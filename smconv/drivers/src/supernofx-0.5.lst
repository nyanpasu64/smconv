0001   0000             ;========================================================
0002   0000             ; "SM-SPC"
0003   0000             ;
0004   0000             ; snesmod spc driver
0005   0000             ;
0006   0000             ; (c) 2009 Mukunda Johnson
0007   0000             ; (c) 2013 Additional code added by KungFuFurby for pitch modulation and noise generation
0008   0000             ; (c) 2014-2017 Additional code added by Augustus Blackheart and KungFuFurby
0009   0000             ;========================================================
0010   0000             ;#define DEBUGINC inc debug \ mov SPC_PORT0, debug
0011   0000             
0012   0000             .define LBYTE(z) (z & 0FFh)
0013   0000             .define HBYTE(z) (z >> 8)
0014   0000             
0015   0000             .define SPROC TCALL 0
0016   0000             .define SPROC2 SPROC
0017   0000             
0018   0000             ;********************************************************
0019   0000             ; PROTOCOL
0020   0000             ;
0021   0000             ; mm = mimic data
0022   0000             ; id = message id
0023   0000             ; vv = validation data (not previous value)
0024   0000             ; v1 = nonzero validation data (not previous value)
0025   0000             ;
0026   0000             ; SPC PORTS:
0027   0000             ; PORT0 = RESERVED
0028   0000             ; PORT1 = COMMUNICATION
0029   0000             ; PORT2 = STATUS:
0030   0000             ;   MSB fep-cccc LSB
0031   0000             ;   f = module volume fade[out/in] in progress
0032   0000             ;   e = end of module reached (restarted from beginning)
0033   0000             ;   p = module is playing (0 means not playing or preparing...)
0034   0000             ;   cccc = cue, incremented on SF1 pattern effect
0035   0000             ; PORT3 = MODULE POSITION
0036   0000             ; 
0037   0000             ; NAME	ID	DESC
0038   0000             ;--------------------------------------------------------
0039   0000             ; LOAD	00	Upload Module
0040   0000             ; 
0041   0000             ; >> id vv -- --	send message
0042   0000             ; << -- mm -- --	message confirmed
0043   0000             ;
0044   0000             ; >> -- v1 DD DD	transfer module
0045   0000             ; << -- mm -- --	DDDD = data, loop until all words xferred
0046   0000             ;
0047   0000             ; >> -- 00 DD DD	final word
0048   0000             ; << -- mm -- --	okay proceed to transfer sources...
0049   0000             ;
0050   0000             ; for each entry in SOURCE_LIST:
0051   0000             ;
0052   0000             ; >> 01 vv LL LL	send loop point
0053   0000             ; << -- mm -- --	loop point saved
0054   0000             ; >> -- v1 DD DD	transfer source data
0055   0000             ; << -- mm -- --	DDDD = data, loop unti all words xferred
0056   0000             ;
0057   0000             ; >> -- 00 DD DD	transfer last word
0058   0000             ; << -- mm -- --	
0059   0000             ;
0060   0000             ; [loop until all needed sources are transferred]
0061   0000             ;
0062   0000             ; >> 00 vv -- --	terminate transfer
0063   0000             ; << -- mm -- --
0064   0000             ;
0065   0000             ; notes:
0066   0000             ;   this function resets the memory system
0067   0000             ;   all sound effects will become invalid
0068   0000             ; 
0069   0000             ;   after final sample transferred the system may
0070   0000             ;   be halted for some time to setup the echo delay.
0071   0000             ;--------------------------------------------------------
0072   0000             ; VOL	02	Set Master Volume
0073   0000             ;
0074   0000             ; >> id vv VV --
0075   0000             ; << -- mm -- --
0076   0000             ;
0077   0000             ; VV = master volume level (0..127)
0078   0000             ;--------------------------------------------------------
0079   0000             ; PLAY	03	Play Module
0080   0000             ;
0081   0000             ; >> id vv -- pp
0082   0000             ; << -- mm -- --
0083   0000             ;
0084   0000             ; pp = start position
0085   0000             ;--------------------------------------------------------
0086   0000             ; STOP	04	Stop Playback
0087   0000             ;
0088   0000             ; >> id vv -- --
0089   0000             ; << -- mm -- --
0090   0000             ;--------------------------------------------------------
0091   0000             ; MVOL	05	Set Module Volume
0092   0000             ;
0093   0000             ; >> id vv -- VV
0094   0000             ; << -- mm -- --
0095   0000             ;
0096   0000             ; VV = 0..255 new module volume scale
0097   0000             ;--------------------------------------------------------
0098   0000             ; FADE	06	Fade Module Volume
0099   0000             ;
0100   0000             ; >> id vv tt VV
0101   0000             ; << -- mm -- --
0102   0000             ;
0103   0000             ; VV = 0..255 target volume level
0104   0000             ; tt = fade speed (added every m tick)
0105   0000             ;--------------------------------------------------------
0106   0000             ; RES	07	Reset
0107   0000             ;
0108   0000             ; >> id vv -- --
0109   0000             ; 
0110   0000             ; <driver unloaded>
0111   0000             ;--------------------------------------------------------
0112   0000             ; TEST	09	Test function
0113   0000             ;
0114   0000             ; >> id vv -- --
0115   0000             ; << -- mm -- --
0116   0000             ;********************************************************
0117   0000             
0118   0000             
0119   0000             ;*****************************************************************************************
0120   0000             ; dsp registers		; Nocash SNES Specs
0121   0000             ;*****************************************************************************************
0122   0000             DSPV_VOL	=00h	; Left volume for Voice 0..7 (R/W)
0123   0000             DSPV_VOLR	=01h	; Right volume for Voice 0..7 (R/W)
0124   0000             DSPV_PL		=02h	; Pitch scaler for Voice 0..7, lower 8bit (R/W)
0125   0000             DSPV_PH		=03h	; Pitch scaler for Voice 0..7, upper 6bit (R/W)
0126   0000             DSPV_SRCN	=04h	; Source number for Voice 0..7 (R/W)
0127   0000             DSPV_ADSR1	=05h	; ADSR settings for Voice 0..7, lower 8bit (R/W)
0128   0000             DSPV_ADSR2	=06h	; ADSR settings for Voice 0..7, upper 8bit (R/W
0129   0000             DSPV_GAIN	=07h	; Gain settings for Voice 0..7 (R/W)
0130   0000             DSPV_ENVX	=08h	; Current envelope value for Voice 0..7 (R)
0131   0000             DSPV_OUTX	=09h	; Current sample value for Voice 0..7 (R) 
0132   0000             
0133   0000             ;		=0Ah	; Unused (8 bytes of general-purpose RAM) (R/W)
0134   0000             ;		=1Ah	; These registers seem to have no function at all.
0135   0000             ;		=2Ah	; Data written to them seems to have no effect on
0136   0000             ;		=3Ah	; sound output, the written values seem to be left
0137   0000             ;		=4Ah	; intact (ie. they aren't overwritten by voice or
0138   0000             ;		=5Ah	; or echo status information).
0139   0000             ;		=6Ah	;
0140   0000             ;		=7Ah	;
0141   0000             
0142   0000             ;		=0Bh	; Unused (8 bytes of general-purpose RAM) (R/W)
0143   0000             ;		=1Bh	;
0144   0000             ;		=2Bh	;
0145   0000             ;		=3Bh	;
0146   0000             ;		=4Bh	;
0147   0000             ;		=5Bh	;
0148   0000             ;		=6Bh	;
0149   0000             ;		=7Bh	;
0150   0000             
0151   0000             			; volume: (negative = phase inverted)
0152   0000             DSP_MVOL	=0Ch	; Left channel master volume (R/W)  :: (-127..+127) -128 causes
0153   0000             DSP_MVOLR	=1Ch	; Right channel master volume (R/W) :: multiply overflows
0154   0000             DSP_EVOL	=2Ch	; Left channel echo volume  :: (-128..+127) -128 can be safely
0155   0000             DSP_EVOLR	=3Ch	; Right channel echo volume :: used
0156   0000             DSP_KON		=4Ch	; Flags for Voice 0..7 (0=No change, 1=Key On) (W)
0157   0000             DSP_KOF		=5Ch	; Flags for Voice 0..7 (0=No change, 1=Key Off) (R/W)
0158   0000             DSP_FLG		=6Ch	; Reset, Mute, Echo-Write flags and Noise Clock (R/W)
0159   0000             			; 0-4 Noise frequency (0=Stop, 1=16Hz, 2=21Hz, ..., 1Eh=16kHz, 1Fh=32kHz)
0160   0000             			; 5   Echo Buffer Writes (0=Enable, 1=Disable) (doesn't disable echo-reads)
0161   0000             			; 6   Mute Amplifier     (0=Normal, 1=Mute) (doesn't stop internal processing)
0162   0000             			; 7   Soft Reset         (0=Normal, 1=KeyOff all voices, and set Envelopes=0)
0163   0000             DSP_ENDX	=7Ch	; Voice End Flags for Voice 0..7 (R) (W=Ack)
0164   0000             
0165   0000             DSP_EFB		=0Dh	; Echo feedback volume (R/W)
0166   0000             ;		=1Dh	; Unused (1 byte of general-purpose RAM) (R/W)
0167   0000             DSP_PMON	=2Dh	; Pitch Modulation Enable Flags for Voice 1..7 (R/W) (see notes below)
0168   0000             DSP_NON		=3Dh	; Noise Enable Flags for Voice 0..7 (R/W)
0169   0000             DSP_EON		=4Dh	; Echo Enable Flags for Voice 0..7 (R/W)
0170   0000             DSP_DIR		=5Dh	; Sample table address (R/W)
0171   0000             			; 0-7   Sample Table Address (in 256-byte steps) (indexed via DSPV_SRCN)
0172   0000             			; The table can contain up to 256 four-byte entries (max 1Kbyte). Each
0173   0000             			; entry is: 
0174   0000             			; Byte 0-1  BRR Start Address (used when voice is Keyed-ON)
0175   0000             			; Byte 2-3  BRR Restart/Loop Address (used when end of BRR data reached)
0176   0000             			; Changing DIR or VxSRCN has no immediate effect (until/unless voices
0177   0000             			; are newly Looped or Keyed-ON).
0178   0000             
0179   0000             DSP_ESA		=6Dh	; Echo ring buffer address (R/W)
0180   0000             DSP_EDL		=7Dh	; Echo delay (ring buffer size) (R/W)
0181   0000             
0182   0000             ;		=0Eh	; Unused (8 bytes of general-purpose RAM) (R/W)
0183   0000             ;		=1Eh	;
0184   0000             ;		=2Eh	;
0185   0000             ;		=3Eh	;
0186   0000             ;		=4Eh	;
0187   0000             ;		=5Eh	;
0188   0000             ;		=6Eh	;
0189   0000             ;		=7Eh	;
0190   0000             
0191   0000             DSP_C0		=0Fh	; Echo FIR filter coefficient 0..7 (R/W)
0192   0000             DSP_C1		=1Fh	; Value -128 should not be used for any of the FIRx
0193   0000             DSP_C2		=2Fh	; registers (to avoid multiply overflows). To avoid
0194   0000             DSP_C3		=3Fh	; additional overflows: The sum of POSITIVE values
0195   0000             DSP_C4		=4Fh	; in the first seven registers (FIR0..FIR6) should
0196   0000             DSP_C5		=5Fh	; not exceed +7Fh, and the sum of NEGATIVE values
0197   0000             DSP_C6		=6Fh	; should not exceed -7Fh. The sum of all eight
0198   0000             DSP_C7		=7Fh	; registers (FIR0..FIR7) should be usually around +80h
0199   0000             
0200   0000             ;-----------------------;
0201   0000             
0202   0000             ; 2Dh - PMON - Pitch Modulation Enable Flags for Voice 1..7 (R/W)
0203   0000             ; Pitch modulation allows to generate "Frequency Sweep" effects by mis-using the
0204   0000             ; amplitude from channel (x-1) as pitch factor for channel (x).
0205   0000             ;  0    Not used
0206   0000             ;  1-7  Flags for Voice 1..7 (0=Normal, 1=Modulate by Voice 0..6)
0207   0000             ; For example, output a very loud 1Hz sine-wave on channel 4 (with Direct
0208   0000             ; Gain=40h, and with Left/Right volume=0; unless you actually want to output it
0209   0000             ; to the speaker). Then additionally output a 2kHz sine wave on channel 5 with
0210   0000             ; PMON.Bit5 set. The "2kHz" sound should then repeatedly sweep within 1kHz..3kHz
0211   0000             ; range (or, for a more decent sweep in 1.8kHz..2.2kHz range, drop the Gain
0212   0000             ; level of channel 4)
0213   0000             
0214   0000             ; x5h/x6h - ADSR 1/2
0215   0000             ;  0-3   4bit Attack rate   ;Rate=N*2+1, Step=+32 (or Step=+1024 when Rate=31)
0216   0000             ;  4-6   3bit Decay rate    ;Rate=N*2+16, Step=-(((Level-1) SAR 8)+1)
0217   0000             ;  7     ADSR/Gain Select   ;0=Use VxGAIN, 1=Use VxADSR (Attack/Decay/Sustain)
0218   0000             ;  8-12  5bit Sustain rate  ;Rate=N, Step=-(((Level-1) SAR 8)+1)
0219   0000             ;  13-15 3bit Sustain level ;Boundary=(N+1)*100h
0220   0000             ;  N/A   0bit Release rate  ;Rate=31, Step=-8 (or Step=-800h when BRR-end)
0221   0000             
0222   0000             ; Echo Overflows
0223   0000             ; Setting FIRx, EFB, or EVOLx to -128 does probably cause multiply overflows?
0224   0000             
0225   0000             FLG_NOISE	=0E0h
0226   0000             FLG_RESET	=80h
0227   0000             FLG_MUTE	=40h
0228   0000             FLG_ECEN	=20h
0229   0000             
0230   0000             LIN_DEC = %10000000
0231   0000             EXP_DEC = %10100000
0232   0000             LIN_INC = %11000000
0233   0000             EXP_INC = %11100000
0234   0000             
0235   0000             GAIN_RATE = 1Ch ; 1eh = 4ms; 1ceh = 8ms
0236   0000             
0237   0000             #define SETDSP(xx,yy) mov SPC_DSPA, #xx\ mov SPC_DSPD, #yy
0238   0000             
0239   0000             ;*****************************************************************************************
0240   0000             ; module defs
0241   0000             ;*****************************************************************************************
0242   0000             
0243   0000             MOD_IV		=00H	; INITIAL VOLUME
0244   0000             MOD_IT		=01H	; INITIAL TEMPO
0245   0000             MOD_IS		=02H	; INITIAL SPEED
0246   0000             MOD_CV		=03H	; INITIAL CHANNEL VOLUME
0247   0000             MOD_CP		=0BH	; INITIAL CHANNEL PANNING
0248   0000             MOD_EVOL	=13H	; ECHO VOLUME (LEFT)
0249   0000             MOD_EVOLR	=14H	; ECHO VOLUME (RIGHT)
0250   0000             MOD_EDL		=15H	; ECHO DELAY
0251   0000             MOD_EFB		=16H	; ECHO FEEDBACK
0252   0000             MOD_EFIR	=17H	; ECHO FIR COEFS
0253   0000             MOD_EON		=1FH	; ECHO ENABLE BITS
0254   0000             MOD_SEQU	=20H	; SEQUENCE
0255   0000             MOD_PTABLE_L	=0E8H	; PATTERN TABLE
0256   0000             MOD_PTABLE_H	=128H	; 
0257   0000             MOD_ITABLE_L	=168H	; INSTRUMENT TABLE
0258   0000             MOD_ITABLE_H	=1A8H	; 
0259   0000             MOD_STABLE_L	=1E8H	; SAMPLE TABLE
0260   0000             MOD_STABLE_H	=228H	;
0261   0000             
0262   0000             INS_FADEOUT	=00H
0263   0000             INS_SAMPLE	=01H
0264   0000             INS_GVOL	=02H
0265   0000             INS_SETPAN	=03H
0266   0000             INS_ENVLEN	=04H
0267   0000             INS_ENVSUS	=05H
0268   0000             INS_ENVLOOPST	=06H
0269   0000             INS_ENVLOOPEND	=07H
0270   0000             INS_ENVDATA	=08H
0271   0000             
0272   0000             SAMP_DVOL	=00H
0273   0000             SAMP_GVOL	=01H
0274   0000             SAMP_PITCHBASE	=02H
0275   0000             SAMP_DINDEX	=04H
0276   0000             SAMP_SETPAN	=05H
0277   0000             
0278   0000             
0279   0000             ;*****************************************************************************
0280   0000             ; 0000 - 00EF   zero-page memory
0281   0000             ;*****************************************************************************
0282   0000             
0283   0000             
0284   0000             m0:		.block 2
0285   0002             m1:		.block 2
0286   0004             m2:		.block 2
0287   0006             m3:		.block 2
0288   0008             m4:		.block 2
0289   000A             m5:		.block 2
0290   000C             m6:		.block 2
0291   000E             ;next_sample:	.block 1
0292   000E             
0293   000E             ;stream_size:	.block 1
0294   000E             ;stream_region:	.block 1
0295   000E             
0296   000E             ;mod_active:	.block 1
0297   000E             mod_position:	.block 1
0298   000F             mod_tick:	.block 1
0299   0010             mod_row:	.block 1
0300   0011             mod_bpm:	.block 1
0301   0012             mod_speed:	.block 1
0302   0013             mod_speed_bk:	.block 1
0303   0014             mod_gvol:	.block 1
0304   0015             
0305   0015             module_vol:	.block 1 ; module volume
0306   0016             module_fadeT:	.block 1 ; module volume fade target
0307   0017             module_fadeR:	.block 1 ; module volume fade rate
0308   0018             module_fadeC:	.block 1 ; timer counter
0309   0019             
0310   0019             patt_addr:	.block 2
0311   001B             patt_rows:	.block 1
0312   001C             ;pattjump_enable: .block 1
0313   001C             pattjump_index:	.block 1 ; 0 = no pattern jump
0314   001D             patt_update:	.block 1 ; PATTERN UPDATE FLAGS
0315   001E             
0316   001E             MAX_ADSR_CHANNELS:	=4
0317   001E             
0318   001E             ch_start:
0319   001E             ch_pitch_l:	.block 8
0320   0026             ch_pitch_h:	.block 8
0321   002E             ch_volume:	.block 8 ; 0..64
0322   0036             ch_cvolume:	.block 8 ; 0..128 (IT = 0..64)
0323   003E             ch_panning:	.block 8 ; 0..64
0324   0046             ch_cmem:	.block 8
0325   004E             ch_note:	.block 8
0326   0056             ch_instr:	.block 8
0327   005E             ch_vcmd:	.block 8
0328   0066             ch_command:	.block 8
0329   006E             ch_param:	.block 8
0330   0076             ch_sample:	.block 8
0331   007E             ch_flags:	.block 8
0332   0086             ch_env_y_l:	.block 8
0333   008E             ch_env_y_h:	.block 8
0334   0096             ch_env_node:	.block 8
0335   009E             ch_env_tick:	.block 8
0336   00A6             ch_env_vib:	.block 8
0337   00AE             ch_vib_wav:	.block 8 ; for negative sine values and triangle
0338   00B6             ch_fadeout:	.block 8
0339   00BE             ;ch_ad:		.block MAX_ADSR_CHANNELS
0340   00BE             ;ch_sr:		.block MAX_ADSR_CHANNELS
0341   00BE             ch_end:
0342   00BE             
0343   00BE             
0344   00BE             ; channel processing variables:
0345   00BE             t_hasdata:	.block 1
0346   00BF             ;t_sampoff:	.block 1 ; sample offset not yet implemented
0347   00BF             t_volume:	.block 1
0348   00C0             t_panning:	.block 1
0349   00C1             t_pitch:
0350   00C1             t_pitch_l:	.block 1
0351   00C2             t_pitch_h:	.block 1
0352   00C3             t_flags:	.block 1
0353   00C4             t_env:		.block 1 ; 0..255
0354   00C5             
0355   00C5             p_instr:	.block 2
0356   00C7             
0357   00C7             STATUS:		.block 1
0358   00C8             STATUS_P	=32
0359   00C8             STATUS_E	=64
0360   00C8             STATUS_F	=128
0361   00C8             
0362   00C8             ;debug:		.block 1
0363   00C8             
0364   00C8             CF_NOTE		=1
0365   00C8             CF_INSTR	=2
0366   00C8             CF_VCMD		=4
0367   00C8             CF_CMD		=8
0368   00C8             CF_KEYON	=16
0369   00C8             CF_FADE		=32
0370   00C8             CF_SURROUND	=64
0371   00C8             CF_MUTE		=128
0372   00C8             
0373   00C8             TF_START	=80H
0374   00C8             TF_DELAY	=2
0375   00C8             
0376   00C8             ;---------------------------
0377   00C8             ; extras
0378   00C8             ;---------------------------
0379   00C8             STANDARD        = 7
0380   00C8             BANDPASS        = 15
0381   00C8             HIGHPASS        = 23
0382   00C8             LOWPASS         = 31
0383   00C8             CUSTOM1		= 39
0384   00C8             CUSTOM2		= 47
0385   00C8             
0386   00C8             current_evol:		.block 1
0387   00C9             current_evol_time:	.block 1
0388   00CA             current_filter_time:	.block 1
0389   00CB             current_noise_time:	.block 1
0390   00CC             current_wt_time:	.block 1
0391   00CD             evol_fb:		.block 1
0392   00CE             evol_max:		.block 1
0393   00CF             evol_min:		.block 1
0394   00D0             evol_time:		.block 1
0395   00D1             filter_cmp:		.block 1
0396   00D2             filter_time:		.block 1
0397   00D3             ;filter_delay1:		.block 1
0398   00D3             ;filter_delay2:		.block 1
0399   00D3             ;filter_delay3:		.block 1
0400   00D3             filter_values:		.block 8
0401   00DB             ;min_bp_filter:		.block 1
0402   00DB             noise_sweep_endmax:	.block 1
0403   00DC             noise_sweep_endmin:	.block 1
0404   00DD             noise_sweep_start:	.block 1
0405   00DE             noise_time:		.block 1
0406   00DF             noise_value:		.block 1
0407   00E0             parameter_mode:		.block 1
0408   00E1             wt_cur:			.block 1
0409   00E2             wt_max:			.block 1
0410   00E3             wt_min:			.block 1
0411   00E4             wt_sample_high:		.block 1
0412   00E5             wt_sample_low:		.block 1
0413   00E6             wt_time:		.block 1
0414   00E7             ;---------------------------------------;
0415   00E7             special:		.block 1	;
0416   00E8             ;---------------------------------------;	
0417   00E8             SF_MODACTIVE		=1		; mod_active
0418   00E8             SF_EVOLINC		=2		; filter sweep evol (inc/dec)
0419   00E8             SF_WTDIR		=4		; (inc/dec)
0420   00E8             SF_NOISESWEEP		=8		; noise frequency cylce (off/on)
0421   00E8             SF_NOISEINC		=16		; noise frequency (dec/inc)
0422   00E8             SF_SWINGTEMPO		=32		; swing tempo (off/on)
0423   00E8             SF_SWINGODD		=64		; swing tempo (odd/even)
0424   00E8             SF_PATTERNJUMP		=128		; pattern jump (off/on)
0425   00E8             ;---------------------------------------;
0426   00E8             special_mode:		.block 1
0427   00E9             ;---------------------------------------;
0428   00E9             SM_FILTERSWEEP		=1		; filter sweep (off/on)
0429   00E9             SM_3AFRESET		=2		; reset all before S3[A-F]
0430   00E9             SM_WAVETABLE		=4		; (enable/disable)
0431   00E9             SM_MVOLEVOLDIR		=8		; (inc evol dec mvol/dec evol inc mvol)
0432   00E9             SM_NOISEREPEAT		=16		; (once/repeat)
0433   00E9             SM_NOISEMODE		=32		; (normal/ping pong)
0434   00E9             SM_PANBRELLO		=64		; (off/on)
0435   00E9             SM_TREMOLO		=128		; (off/on)
0436   00E9             ;---------------------------------------;
0437   00E9             swing_tempo_mod:	.block 1
0438   00EA             
0439   00EA             DEFAULT_EVOL_MAX:	=64
0440   00EA             DEFAULT_EVOL_MIN:	=32
0441   00EA             DEFAULT_FILTER_DELAY1:	=10
0442   00EA             DEFAULT_FILTER_DELAY2:	=12
0443   00EA             DEFAULT_FILTER_DELAY3:	=14
0444   00EA             DEFAULT_FILTER_TIME:	=80h	; {3-255}
0445   00EA             DEFAULT_MAX_NOISE:	=1Fh
0446   00EA             DEFAULT_MODVOL:		=8Fh
0447   00EA             DEFAULT_MVOL:		=50h	; xmsnes 32h
0448   00EA             DEFAULT_NOISE_TIME:	=80h
0449   00EA             DEFAULT_RAMP_POS:	=40h
0450   00EA             DEFAULT_RAMP_NEG:	=0bfh
0451   00EA             DEFAULT_SQ_POS:		=40h
0452   00EA             DEFAULT_SQ_NEG:		=00h
0453   00EA             DEFAULT_SWING:		=1
0454   00EA             DEFAULT_TEMPO:		=4eh	; original in snesmod was 50h
0455   00EA             DEFAULT_VOL_SAT:	=64
0456   00EA             DEFAULT_WT_MAX:		=8
0457   00EA             DEFAULT_WT_MIN:		=0
0458   00EA             
0459   00EA             Z_SURROUND	=1
0460   00EA             Z_MUTE		=2
0461   00EA             Z_UNMUTE	=3
0462   00EA             Z_FMON		=4
0463   00EA             Z_FMOFF		=5
0464   00EA             Z_CHFS_W_RES	=6
0465   00EA             Z_CHFS		=7
0466   00EA             Z_EFIR		=8
0467   00EA             Z_MVOL		=9
0468   00EA             Z_EVOL		=10
0469   00EA             Z_EFB		=11
0470   00EA             Z_EDL		=12
0471   00EA             Z_ETIMENOISE	=13
0472   00EA             Z_MINMAX	=14
0473   00EA             Z_FILTERTIME	=15
0474   00EA             
0475   00EA             MAX_ZP_CLEAR:		 ; do not clear comms_v or xfer_address!!
0476   00EA             comms_v:	.block 1 ; communication variable
0477   00EB             xfer_address:	.block 2
0478   00ED             
0479   00ED             STREAM_REGION = 0FFh
0480   00ED             
0481   00ED             ;-----------------------------------------------------------------------------
0482   00ED             
0483   00ED             
0484   00ED             ;*****************************************************************************
0485   00ED             ; 00F0 - 00FF	Registers
0486   00ED             ;*****************************************************************************
0487   00ED             
0488   00ED             
0489   00ED             SPC_TEST	=0F0h ; Testing functions (W)                                  0Ah
0490   00ED             SPC_CONTROL	=0F1h ; Timer, I/O and ROM Control (W)                         80h
0491   00ED             		      ; bits 0-2 timer enables (1=on), bits 4-5 are I/O port clear bits (11=clear all)
0492   00ED             SPC_DSP		=0F2h ; DSP Register Index (R/W)
0493   00ED             SPC_DSPA	=0F2h ; 
0494   00ED             SPC_DSPD	=0F3h ; DSP Register Data (R/W)
0495   00ED             SPC_PORT0	=0F4h ; CPU Input and Output Register 0 (R and W)      R=00h,W=00h
0496   00ED             SPC_PORT1	=0F5h ; CPU Input and Output Register 1 (R and W)      R=00h,W=00h
0497   00ED             SPC_PORT2	=0F6h ; CPU Input and Output Register 2 (R and W)      R=00h,W=00h
0498   00ED             SPC_PORT3	=0F7h ; CPU Input and Output Register 3 (R and W)      R=00h,W=00h
0499   00ED             SPC_AUXPORT4	=0F8h ; External I/O Port P4 (S-SMP Pins 34-27) (R/W) (unused) FFh
0500   00ED             SPC_AUXPORT5	=0F9h ; External I/O Port P5 (S-SMP Pins 25-18) (R/W) (unused) FFh
0501   00ED             SPC_TIMER0	=0FAh ; Timer 0 Divider (for 8000Hz clock source) (W)
0502   00ED             SPC_TIMER1	=0FBh ; Timer 1 Divider (for 8000Hz clock source) (W)
0503   00ED             SPC_TIMER2	=0FCh ; Timer 2 Divider (for 64000Hz clock source) (W)
0504   00ED             SPC_COUNTER0	=0FDh ; Timer 0 Output (R)
0505   00ED             SPC_COUNTER1	=0FEh ; Timer 1 Output (R)
0506   00ED             SPC_COUNTER2	=0FFh ; Timer 2 Output (R)
0507   00ED             
0508   00ED             DEBUG_P0 = SPC_PORT0
0509   00ED             DEBUG_P2 = SPC_PORT2
0510   00ED             ;-----------------------------------------------------------------------------
0511   00ED             
0512   00ED             
0513   00ED             ;*****************************************************************************
0514   00ED             ; 0100 - 01FF	Page 1, mainly used for stack space
0515   00ED             ;*****************************************************************************
0516   00ED             ;-----------------------------------------------------------------------------
0517   00ED             
0518   00ED             
0519   00ED             ;*****************************************************************************
0520   00ED             ; 0200 - 02FF	Sample Directory
0521   00ED             ;*****************************************************************************
0522   00ED             SampleDirectory		=0200h	; 256 bytes	(64-sample directory)
0523   00ED             ;-----------------------------------------------------------------------------
0524   00ED             
0525   00ED             
0526   00ED             ;*****************************************************************************
0527   00ED             ; 0300 - 037F   Pattern Memory
0528   00ED             ;-----------------------------------------------------------------------------
0529   00ED             PatternMemory		=0300h	; 16*8 bytes
0530   00ED             ;-----------------------------------------------------------------------------
0531   00ED             
0532   00ED             
0533   00ED             ;*****************************************************************************
0534   0380             .org 380h	; program
0535   0380             ;*****************************************************************************
0536   0380             
0537   0380             
0538   0380             ;-------------------------------------------------------;---------------------
0539   0380             main:							;
0540   0380             ;-------------------------------------------------------;---------------------
0541   0380 3F 10 05    	call	ClearMemory				;
0542   0383             							;
0543   0383 8F 00 F5    	mov	SPC_PORT1, #0				; reset some ports
0544   0386 8F 00 F6    	mov	SPC_PORT2, #0				;
0545   0389 8F 00 F7    	mov	SPC_PORT3, #0				;
0546   038C 8F 00 F1    	mov	SPC_CONTROL, #0				; reset control
0547   038F 8F FF FB    	mov	SPC_TIMER1, #255			; reset fade timer
0548   0392             							;---------------------
0549   0392 8F 5D F2    	mov	SPC_DSPA, #DSP_DIR			; set source dir
0550   0395 8F 02 F3    	mov	SPC_DSPD, #HBYTE(SampleDirectory)	;
0551   0398             ;-------------------------------------------------------;---------------------
0552   0398 8F A0 EB    	mov	xfer_address, #LBYTE(MODULE)		; reset transfer address
0553   039B 8F 1A EC    	mov	xfer_address+1, #HBYTE(MODULE)		;
0554   039E             ;-------------------------------------------------------;---------------------
0555   039E             ;*****************************************************************************
0556   039E             ;* setup streaming system
0557   039E             ;*****************************************************************************
0558   039E             	;mov	stream_size, #0			;
0559   039E             	;mov	a, #0FFh			; calc streaming region address H
0560   039E             	;setc					;
0561   039E             	;sbc	a, stream_size			;
0562   039E             	;mov	stream_region, a		;
0563   039E             ;-----------------------------------------------------------------------------
0564   039E E8 8D       	mov	a, #LBYTE(__BRK_ROUTINE__)	; set BRK/TCALL0 vector
0565   03A0 C5 DE FF    	mov	!0FFDEH, a			;
0566   03A3 E8 13       	mov	a, #HBYTE(__BRK_ROUTINE__)	;
0567   03A5 C5 DF FF    	mov	!0FFDFH, a			;
0568   03A8             ;-----------------------------------------------------------------------------
0569   03A8 8F 06 F1    	mov	SPC_CONTROL, #%110
0570   03AB             ;-----------------------------------------------------------------------------
0571   03AB 2F 08       	bra	patch1			; patch for it->spc conversion
0572   03AD 3F 8E 06    	call	Module_Stop		;
0573   03B0 E8 00       	mov	a, #0			;
0574   03B2 3F A6 06    	call	Module_Start		;
0575   03B5             patch1:					;
0576   03B5             ;-----------------------------------------------------------------------------
0577   03B5             
0578   03B5             ;-----------------------------------------------------------------------------
0579   03B5             main_loop:
0580   03B5             ;-----------------------------------------------------------------------------
0581   03B5             
0582   03B5 01          	SPROC2
0583   03B6 3F 60 05    	call	ProcessComms
0584   03B9             
0585   03B9 13 E7 F9    	bbc0	special, main_loop		; test SF_MODACTIVE
0586   03BC             
0587   03BC 01          	SPROC
0588   03BD 3F 02 07    	call	ProcessFade
0589   03C0 01          	SPROC
0590   03C1 3F 38 07    	call	Module_Update
0591   03C4 01          	SPROC
0592   03C5             ;-----------------------------------------------------------------------------
0593   03C5             update_ports:
0594   03C5             ;-----------------------------------------------------------------------------
0595   03C5 FA C7 F6    	mov	SPC_PORT2, STATUS
0596   03C8 FA 0E F7    	mov	SPC_PORT3, mod_position
0597   03CB             ;-----------------------------------------------------------------------------
0598   03CB 53 E8 10    	bbc2	special_mode, skip_wavetable	; test SM_WAVETABLE
0599   03CE             ;-----------------------------------------------------------------------------
0600   03CE AB CC       	inc	current_wt_time
0601   03D0 69 E6 CC    	cmp	current_wt_time, wt_time
0602   03D3 D0 09       	bne	skip_wavetable
0603   03D5             ;-----------------------------------------------------------------------------
0604   03D5 8F 00 CC    	mov	current_wt_time, #0
0605   03D8 EB E1       	mov	y, wt_cur
0606   03DA             
0607   03DA 01          	SPROC
0608   03DB 3F E8 04    	call	WaveTable
0609   03DE             ;-----------------------------------------------------------------------------
0610   03DE             skip_wavetable:
0611   03DE             ;-----------------------------------------------------------------------------
0612   03DE 13 E8 0E    	bbc0	special_mode, skip_filter_sweep	; test SM_FILTERSWEEP
0613   03E1             ;-----------------------------------------------------------------------------
0614   03E1 AB CA       	inc	current_filter_time
0615   03E3 69 CA D2    	cmp	filter_time, current_filter_time
0616   03E6 D0 07       	bne	skip_filter_sweep
0617   03E8             ;-----------------------------------------------------------------------------
0618   03E8 8F 00 CA    	mov	current_filter_time, #0
0619   03EB 01          	SPROC
0620   03EC 3F 02 04    	call	FilterSweep
0621   03EF             ;-----------------------------------------------------------------------------
0622   03EF             skip_filter_sweep:
0623   03EF             ;-----------------------------------------------------------------------------
0624   03EF 73 E7 0E    	bbc3	special, skip_noise_freq		; test SF_NOISESWEEP
0625   03F2             
0626   03F2 AB CB       	inc	current_noise_time
0627   03F4 69 CB DE    	cmp	noise_time, current_noise_time
0628   03F7 D0 BC       	bne	main_loop
0629   03F9             ;-----------------------------------------------------------------------------
0630   03F9 8F 00 CB    	mov	current_noise_time, #0
0631   03FC 01          	SPROC
0632   03FD 3F AE 04    	call	NoiseFreqSweep
0633   0400             ;-----------------------------------------------------------------------------
0634   0400             skip_noise_freq:
0635   0400             ;-----------------------------------------------------------------------------
0636   0400 2F B3       	bra	main_loop
0637   0402             
0638   0402             ;=============================================================================
0639   0402             FilterSweep:
0640   0402             ;=============================================================================
0641   0402 3F 81 04    	call	EVOLSweep		; m0 = current channel target value
0642   0405 8F 00 04    	mov	m2, #0			; m1 = current value
0643   0408 8F 00 06    	mov	m3, #0			; m2 = total pos filter values
0644   040B CD 07       	mov	x, #7			; m3 = total neg filter values
0645   040D             ;---------------------------------------; m4 = tmp for converting neg to pos
0646   040D             _filter_sweep:
0647   040D             ;---------------------------------------;
0648   040D 4D          	push	x			;
0649   040E             ;---------------------------------------;
0650   040E             _overflow_check:
0651   040E             ;---------------------------------------;
0652   040E F5 38 08    	mov	a, !CBITS+x		;
0653   0411 C4 F2       	mov	SPC_DSPA, a		;
0654   0413 E4 F3       	mov	a, SPC_DSPD		;
0655   0415 C4 02       	mov	m1, a			;
0656   0417 30 06       	bmi	_check_neg		;
0657   0419             ;---------------------------------------;
0658   0419 60          	clrc				;
0659   041A 89 02 04    	adc	m2, m1			; add positive values together
0660   041D 2F 09       	bra	_dex			;
0661   041F             ;---------------------------------------;
0662   041F             _check_neg:
0663   041F             ;---------------------------------------;
0664   041F 48 FF       	eor	a, #0FFh		;
0665   0421 BC          	inc	a			;
0666   0422 C4 08       	mov	m4, a			;
0667   0424 60          	clrc				;
0668   0425 89 08 06    	adc	m3, m4			; add negative values together
0669   0428             					;
0670   0428 1D          _dex:	dec	x			;
0671   0429 10 E3       	bpl	_overflow_check		;
0672   042B             ;---------------------------------------;
0673   042B CE          	pop	x			;
0674   042C 2F 01       	bra	_channel_mode		;
0675   042E             ;---------------------------------------;
0676   042E 1D          _cm_dx:	dec	x			;
0677   042F             ;---------------------------------------;
0678   042F             _channel_mode:				;
0679   042F             ;---------------------------------------;
0680   042F F4 D3       	mov	a, filter_values+x	; get target filter value for current channel
0681   0431 68 80       	cmp	a, #80h			; if value is +128, move to next channel
0682   0433 F0 F9       	beq	_cm_dx			; skipping the overflow check
0683   0435             					;
0684   0435 C4 00       	mov	m0, a			; m0 = current channel target value
0685   0437             ;---------------------------------------;
0686   0437             _select_channel:			;
0687   0437             ;---------------------------------------;
0688   0437 F5 38 08    	mov	a, !CBITS+x		;
0689   043A C4 F2       	mov	SPC_DSPA, a		;
0690   043C E4 F3       	mov	a, SPC_DSPD		;  a = current filter value
0691   043E C4 02       	mov	m1, a			; m1 = current filter value
0692   0440 30 12       	bmi	_from_neg		;
0693   0442 F0 20       	beq	_from_z			;
0694   0444             ;---------------------------------------;
0695   0444             _from_pos:
0696   0444             ;---------------------------------------;
0697   0444 E4 00       	mov	a, m0			;
0698   0446 30 23       	bmi	_filter_dec		;
0699   0448             ;---------------------------------------;
0700   0448             _pos_to_pos:
0701   0448             ;---------------------------------------;
0702   0448 69 02 00    	cmp	m0, m1			;
0703   044B 90 1E       	bcc	_filter_dec		;
0704   044D 78 7F 04    	cmp	m2, #7Fh		; do the total positive values exceed 126?
0705   0450 90 1D       	bcc	_filter_inc		; if not decrease is ok (inc is negative dec)
0706   0452 2F 29       	bra	_skip_channel		; total of positive values are too high
0707   0454             ;---------------------------------------;
0708   0454             _from_neg:
0709   0454             ;---------------------------------------;
0710   0454 E4 00       	mov	a, m0			;
0711   0456 10 17       	bpl	_filter_inc		; target is a positive value
0712   0458             ;---------------------------------------;
0713   0458             _neg_to_neg:
0714   0458             ;---------------------------------------;
0715   0458 69 02 00    	cmp	m0, m1			;
0716   045B B0 12       	bcs	_filter_inc		;
0717   045D 78 7F 06    	cmp	m3, #7Fh		; do the total negative values exceed 126?
0718   0460 90 09       	bcc	_filter_dec		; if not increase is ok (dec is negative inc)
0719   0462 2F 19       	bra	_skip_channel		; total of positive values are too high
0720   0464             ;---------------------------------------;
0721   0464             _from_z:
0722   0464             ;---------------------------------------;
0723   0464 E4 00       	mov	a, m0			;
0724   0466 69 02 00    	cmp	m0, m1			; target, current value
0725   0469 10 04       	bpl	_filter_inc		;
0726   046B             ;---------------------------------------;
0727   046B             _filter_dec:
0728   046B             ;---------------------------------------;
0729   046B 8B 02       	dec	m1			; decrease current filter value
0730   046D 2F 02       	bra	_store_new_value	;
0731   046F             ;---------------------------------------;
0732   046F             _filter_inc:
0733   046F             ;---------------------------------------;
0734   046F AB 02       	inc	m1			; increase current filter value
0735   0471             ;---------------------------------------;
0736   0471             _store_new_value:			;
0737   0471             ;---------------------------------------;
0738   0471 FA 02 F3    	mov	SPC_DSPD, m1		; store current filter value
0739   0474 69 02 00    	cmp	m0, m1			; does current filter value equal target value?
0740   0477 D0 04       	bne	_skip_channel		; if not, keep filter sweep enabled
0741   0479             ;---------------------------------------;
0742   0479             _reset_fv:
0743   0479             ;---------------------------------------;
0744   0479 E8 80       	mov	a, #80h			; disable filter sweep
0745   047B D4 D3       	mov	filter_values+x, a	; for current channel
0746   047D             ;---------------------------------------;
0747   047D             _skip_channel:				;
0748   047D             ;---------------------------------------;
0749   047D 1D          	dec	x			;
0750   047E 10 8D       	bpl	_filter_sweep		;
0751   0480 6F          	ret				;
0752   0481             
0753   0481             ;=============================================================================
0754   0481             EVOLSweep:
0755   0481             ;=============================================================================
0756   0481 78 00 D0    	cmp	evol_time, #0
0757   0484 F0 27       	beq	_end_evol
0758   0486 AB C9       	inc	current_evol_time
0759   0488 69 D0 C9    	cmp	current_evol_time, evol_time
0760   048B D0 20       	bne	_end_evol
0761   048D 8F 00 C9    	mov	current_evol_time, #0
0762   0490             
0763   0490             _det_dir:
0764   0490 23 E7 09    	bbs1	special, _dec_evol		; test SF_EVOLINC
0765   0493 69 CE C8    	cmp	current_evol, evol_max
0766   0496 F0 15       	beq	_end_evol
0767   0498 AB C8       	inc	current_evol
0768   049A 2F 07       	bra	_set_evol
0769   049C             
0770   049C             _dec_evol:
0771   049C 69 CF C8    	cmp	current_evol, evol_min
0772   049F F0 0C       	beq	_end_evol
0773   04A1 8B C8       	dec	current_evol
0774   04A3             
0775   04A3             _set_evol:
0776   04A3 E4 C8       	mov	a, current_evol
0777   04A5 30 03       	bmi	_set
0778   04A7 48 FF       	eor	a, #255
0779   04A9 BC          	inc	a
0780   04AA 3F DD 10    _set:	call	Command_EchoVolume2
0781   04AD             
0782   04AD             _end_evol:
0783   04AD 6F          	ret
0784   04AE             
0785   04AE             ;=============================================================================
0786   04AE             NoiseFreqSweep:
0787   04AE             ;=============================================================================
0788   04AE 83 E7 11    	bbs4	special, _do_inc		; test SF_NOISEINC
0789   04B1             
0790   04B1             _do_dec:
0791   04B1 8B DF       	dec	noise_value
0792   04B3 78 20 DF    	cmp	noise_value, #20h
0793   04B6 90 03       	bcc	_check_min
0794   04B8 FA DD DF    	mov	noise_value, noise_sweep_start
0795   04BB             
0796   04BB             _check_min:
0797   04BB 69 DC DF    	cmp	noise_value, noise_sweep_endmin
0798   04BE D0 24       	bne	_do_noise
0799   04C0 2F 0F       	bra	_check_pingpong
0800   04C2             
0801   04C2             _do_inc:
0802   04C2 AB DF       	inc	noise_value
0803   04C4 78 20 DF    	cmp	noise_value, #20h
0804   04C7 90 03       	bcc	_check_max
0805   04C9 FA DD DF    	mov	noise_value, noise_sweep_start
0806   04CC             
0807   04CC             _check_max:
0808   04CC 69 DB DF    	cmp	noise_value, noise_sweep_endmax
0809   04CF D0 13       	bne	_do_noise
0810   04D1             
0811   04D1             _check_pingpong:
0812   04D1 B3 E8 05    	bbc5	special_mode, _check_repeat		; test SM_NOISEMODE
0813   04D4 58 10 E7    	eor	special, #SF_NOISEINC
0814   04D7 2F 0B       	bra	_do_noise
0815   04D9             
0816   04D9             _check_repeat:
0817   04D9 93 E8 05    	bbc4	special_mode, _turn_nfc_off		; test SM_NOISEREPEAT
0818   04DC FA DD DF    	mov	noise_value, noise_sweep_start
0819   04DF 2F 03       	bra	_do_noise
0820   04E1             
0821   04E1             _turn_nfc_off:
0822   04E1 38 F7 E7    	and	special, #~SF_NOISESWEEP
0823   04E4             
0824   04E4             _do_noise:
0825   04E4 3F B4 0F    	call	SCommand_NoiseFreq1b
0826   04E7             
0827   04E7             check_back_later:
0828   04E7 6F          	ret
0829   04E8             
0830   04E8             ;=============================================================================
0831   04E8             WaveTable:
0832   04E8             ;=============================================================================
0833   04E8 F6 81 11    	mov	a, !WAVETABLE_L+y	;
0834   04EB C5 00 02    	mov	!SampleDirectory, a	; sample start
0835   04EE C5 02 02    	mov	!SampleDirectory+2, a	; loop start
0836   04F1 E8 1A       	mov	a, #HBYTE(WTLoop1)	;
0837   04F3 C5 01 02    	mov	!SampleDirectory+1, a	; sample start
0838   04F6 C5 03 02    	mov	!SampleDirectory+3, a	; loop start
0839   04F9 53 E7 07    	bbc2	special, WTIncrease	; test SF_WTDIR
0840   04FC             ;---------------------------------------;
0841   04FC DC          	dec	y			;
0842   04FD 7E E3       	cmp	y, wt_min		; if minimum is reached switch direction
0843   04FF F0 0A       	beq	_wt_swap_dir		;
0844   0501 2F 05       	bra	_wt_exit		;
0845   0503             ;---------------------------------------;
0846   0503             WTIncrease:				;
0847   0503             ;---------------------------------------;
0848   0503 FC          	inc	y			;
0849   0504 7E E2       	cmp	y, wt_max		; if maximum is reached switch direction
0850   0506 B0 03       	bcs	_wt_swap_dir		;
0851   0508             ;---------------------------------------;
0852   0508             _wt_exit:				;
0853   0508             ;---------------------------------------;
0854   0508 CB E1       	mov	wt_cur, y		;
0855   050A 6F          	ret				;
0856   050B             ;---------------------------------------;
0857   050B             _wt_swap_dir:				;
0858   050B             ;---------------------------------------;
0859   050B 58 04 E7    	eor	special, #SF_WTDIR	;
0860   050E 2F D7       	bra	check_back_later	;
0861   0510             					;
0862   0510             
0863   0510             ;=============================================================================
0864   0510             ClearMemory:
0865   0510             ;=============================================================================
0866   0510 CD 00               mov     x, #0
0867   0512 E8 00               mov     a, #0
0868   0514             _clrmem:
0869   0514 AF                  mov     (X)+, a
0870   0515 C8 EA               cmp     x, #MAX_ZP_CLEAR
0871   0517 D0 FB               bne     _clrmem
0872   0519             
0873   0519 6F          	ret
0874   051A             
0875   051A             ;=============================================================================
0876   051A             ResetSound:
0877   051A             ;=============================================================================
0878   051A 8F 5C F2    	SETDSP( DSP_KOF, 0FFh );
0878   051D 8F FF F3    
0879   0520 8F 6C F2    	SETDSP( DSP_FLG, FLG_ECEN );
0879   0523 8F 20 F3    
0880   0526 8F 2D F2    	SETDSP( DSP_PMON, 0 );
0880   0529 8F 00 F3    
0881   052C 8F 2C F2    	SETDSP( DSP_EVOL, 0 );
0881   052F 8F 00 F3    
0882   0532 8F 3C F2    	SETDSP( DSP_EVOLR, 0 );
0882   0535 8F 00 F3    
0883   0538 8F 3D F2    	SETDSP( DSP_NON, 00h );
0883   053B 8F 00 F3    
0884   053E 8F 5C F2    	SETDSP( DSP_KOF, 000h ); this is weird
0884   0541 8F 00 F3    
0885   0544             
0886   0544 3F 10 05    	call	ClearMemory
0887   0547 3F 70 11    	call	ResetMasterVolume
0888   054A 8F 40 CE    	mov	evol_max, #DEFAULT_EVOL_MAX
0889   054D 8F 20 CF    	mov	evol_min, #DEFAULT_EVOL_MIN
0890   0550 8F 80 D2    	mov	filter_time, #DEFAULT_FILTER_TIME
0891   0553 8F 8F 15    	mov	module_vol, #DEFAULT_MODVOL
0892   0556 8F FF 16    	mov	module_fadeT, #255
0893   0559 8F 1F DB    	mov	noise_sweep_endmax, #DEFAULT_MAX_NOISE
0894   055C 8F 08 E2    	mov	wt_max, #DEFAULT_WT_MAX
0895   055F 6F          	ret
0896   0560             
0897   0560             ;=============================================================================
0898   0560             ProcessComms:
0899   0560             ;=============================================================================
0900   0560 69 F5 EA    	cmp	comms_v, SPC_PORT1	; test for command
0901   0563 D0 01       	bne	_new_message		;
0902   0565 6F          	ret				; <no message>
0903   0566             ;---------------------------------------;
0904   0566             _new_message:
0905   0566             ;---------------------------------------;
0906   0566 FA F5 EA    	mov	comms_v, SPC_PORT1	; copy V
0907   0569 E4 F4       	mov	a, SPC_PORT0		; jump to message
0908   056B 00          	nop				; verify data
0909   056C 64 F4       	cmp	a, SPC_PORT0		;
0910   056E D0 F6       	bne	_new_message		;
0911   0570 28 7F       	and	a, #127			; mask 7 bits
0912   0572 1C          	asl	a			;
0913   0573 5D          	mov	x, a			;
0914   0574 1F 77 05    	jmp	[CommandTable+x]	;'
0915   0577             ;---------------------------------------;---------------------------
0916   0577             CommandTable:
0917   0577             ;---------------------------------------;---------------------------
0918   0577 AB 05       	.word	CMD_LOAD		; 00h - load module
0919   0579 F7 05       	.word	CMD_LOADWT		; 01h - load wavetable
0920   057B 89 05       	.word	CMD_POS			; 02h - CMD_VOL set volume DISABLED
0921   057D             ;---------------------------------------;---------------------------
0922   057D 98 06       	.word	CMD_PLAY		; 03h - play
0923   057F 9E 05       	.word	CMD_STOP		; 04h - stop
0924   0581 A3 05       	.word	CMD_MVOL		; 05h - set module volume
0925   0583 90 05       	.word	CMD_FADE		; 06h - fade module volume
0926   0585             ;---------------------------------------;---------------------------
0927   0585             	;.word	CMD_NULL		; 07h - CMD_RES reset DISABLED
0928   0585             	;.word	CMD_NULL		; 08h - CMD_FX sound effect DISABLED
0929   0585             ;---------------------------------------;---------------------------
0930   0585             CommandRet:
0931   0585             ;---------------------------------------;---------------------------
0932   0585 FA EA F5    	mov	SPC_PORT1, comms_v	; 07h,08h
0933   0588 6F          	ret				; 08h
0934   0589             ;---------------------------------------;---------------------------
0935   0589             	;.word	CMD_POS			; 09h - CMD_TEST DISABLED
0936   0589             	;.word	CMD_NULL		; 0ah - CMD_SSIZE set stream size DISABLED
0937   0589             
0938   0589             ;*******************************************************************
0939   0589             CMD_POS:
0940   0589             ;*******************************************************************
0941   0589 E4 F7       	mov	a, SPC_PORT3
0942   058B 3F 1E 0C    	call	Command_SetPosition2
0943   058E 2F F5       	bra	CommandRet
0944   0590             
0945   0590             ;*******************************************************************
0946   0590             CMD_FADE:
0947   0590             ;*******************************************************************
0948   0590 18 80 C7    	or	STATUS, #STATUS_F
0949   0593 FA C7 F6    	mov	SPC_PORT2, STATUS
0950   0596 FA F7 16    	mov	module_fadeT, SPC_PORT3
0951   0599 FA F6 17    	mov	module_fadeR, SPC_PORT2
0952   059C 2F E7       	bra	CommandRet
0953   059E             
0954   059E             ;*******************************************************************
0955   059E             CMD_STOP:
0956   059E             ;*******************************************************************
0957   059E 3F 8E 06    	call	Module_Stop
0958   05A1             CMD_NULL:	;*
0959   05A1 2F E2       	bra	CommandRet
0960   05A3             
0961   05A3             ;*******************************************************************
0962   05A3             CMD_MVOL:
0963   05A3             ;*******************************************************************
0964   05A3 FA F7 15    	mov	module_vol, SPC_PORT3
0965   05A6 FA F7 16    	mov	module_fadeT, SPC_PORT3
0966   05A9 2F DA       	bra	CommandRet
0967   05AB             
0968   05AB             ;*******************************************************************
0969   05AB             CMD_LOAD:
0970   05AB             ;*******************************************************************
0971   05AB 3F 8E 06    	call	Module_Stop
0972   05AE 8F A0 EB    	mov	xfer_address, #LBYTE(MODULE)	; reset transfer address
0973   05B1 8F 1A EC    	mov	xfer_address+1, #HBYTE(MODULE)	;
0974   05B4 3F 02 06    	call	StartTransfer
0975   05B7             
0976   05B7 8F 00 02    	mov	m1, #0
0977   05BA             _wait_for_sourcen:			;
0978   05BA 69 F5 EA    	cmp	comms_v, SPC_PORT1	;
0979   05BD F0 FB       	beq	_wait_for_sourcen	;
0980   05BF FA F5 EA    	mov	comms_v, SPC_PORT1	;
0981   05C2 78 00 F4    	cmp	SPC_PORT0, #0		; if p0 != 0:
0982   05C5 F0 0E       	beq	_end_of_sources		; load source
0983   05C7             					;
0984   05C7 EB 02       	mov	y, m1			;
0985   05C9 60          	clrc				;
0986   05CA 98 04 02    	adc	m1, #4			;
0987   05CD 3F E1 05    	call	RegisterSource		;
0988   05D0 3F 02 06    	call	StartTransfer		;
0989   05D3             					;
0990   05D3 2F E5       	bra	_wait_for_sourcen	; load next source
0991   05D5             
0992   05D5             _end_of_sources:			; if p0 == 0:
0993   05D5 E5 00 02    	mov	a, !SampleDirectory	; store backup of this info
0994   05D8 C4 E5       	mov	wt_sample_low, a	; in case wavetable cycle is used
0995   05DA E5 01 02    	mov	a, !SampleDirectory+1	;
0996   05DD C4 E4       	mov	wt_sample_high, a	;
0997   05DF 2F A4       	bra	CommandRet		;
0998   05E1             
0999   05E1             ;-------------------------------------------------------------------
1000   05E1             RegisterSource:
1001   05E1             ;-------------------------------------------------------------------
1002   05E1 E4 EB       	mov	a, xfer_address		;
1003   05E3 D6 00 02    	mov	!SampleDirectory+y, a	; sample start
1004   05E6 60          	clrc				;
1005   05E7 84 F6       	adc	a, SPC_PORT2		;
1006   05E9 D6 02 02    	mov	!SampleDirectory+2+y, a	; loop start
1007   05EC             					;
1008   05EC E4 EC       	mov	a, xfer_address+1	;
1009   05EE D6 01 02    	mov	!SampleDirectory+1+y, a	; sample start
1010   05F1             					;
1011   05F1 84 F7       	adc	a, SPC_PORT3		;
1012   05F3 D6 03 02    	mov	!SampleDirectory+3+y, a	; loop start
1013   05F6             
1014   05F6 6F          	ret
1015   05F7             
1016   05F7             ;*******************************************************************
1017   05F7             CMD_LOADWT:
1018   05F7             ;*******************************************************************
1019   05F7 8F 10 EB    	mov	xfer_address, #LBYTE(WTLoop1)
1020   05FA 8F 1A EC    	mov	xfer_address+1, #HBYTE(WTLoop1)
1021   05FD 3F 02 06    	call	StartTransfer
1022   0600 2F 83       	bra	CommandRet
1023   0602             
1024   0602             ;===================================================================
1025   0602             StartTransfer:
1026   0602             ;===================================================================
1027   0602 F8 EA       	mov	x, comms_v		; start transfer
1028   0604 8D 00       	mov	y, #0			;
1029   0606 D8 F5       	mov	SPC_PORT1, x		;
1030   0608             ;---------------------------------------;---------------------------
1031   0608             DoTransfer:
1032   0608             ;---------------------------------------;---------------------------
1033   0608 3E F5       	cmp	x, SPC_PORT1		; wait for data
1034   060A F0 FC       	beq	DoTransfer		;
1035   060C             ;---------------------------------------;
1036   060C F8 F5       	mov	x, SPC_PORT1		;
1037   060E             					;---------------------------
1038   060E E4 F6       	mov	a, SPC_PORT2		; copy data
1039   0610 D7 EB       	mov	[xfer_address]+y, a	;
1040   0612 E4 F7       	mov	a, SPC_PORT3		;
1041   0614 D8 F5       	mov	SPC_PORT1, x		;<- reply to snes
1042   0616 FC          	inc	y			;
1043   0617 D7 EB       	mov	[xfer_address]+y, a	;
1044   0619 FC          	inc	y			;
1045   061A F0 10       	beq	_inc_address		; catch index overflow
1046   061C             ;---------------------------------------;---------------------------
1047   061C C8 00       _cont1:	cmp	x, #0			; loop until x=0
1048   061E D0 E8       	bne	DoTransfer		;
1049   0620             ;---------------------------------------;---------------------------
1050   0620 CB 00       	mov	m0, y
1051   0622 60          	clrc
1052   0623 89 00 EB    	adc	xfer_address, m0
1053   0626 98 00 EC    	adc	xfer_address+1, #0
1054   0629 D8 EA       	mov	comms_v, x
1055   062B 6F          	ret
1056   062C             ;-------------------------------------------------------------------
1057   062C             _inc_address:
1058   062C             ;-------------------------------------------------------------------
1059   062C AB EC       	inc	xfer_address+1
1060   062E 2F EC       	bra	_cont1
1061   0630             
1062   0630             ;********************************************************
1063   0630             ;CMD_RES:	; 13 bytes
1064   0630             ;********************************************************
1065   0630             	;mov	SPC_DSPA, #DSP_FLG
1066   0630             	;mov	SPC_DSPD, #11100000b
1067   0630             	;clrp
1068   0630             	;mov	SPC_CONTROL, #10000000b ;
1069   0630             	;jmp	0FFC0h
1070   0630             
1071   0630             ;*******************************************************************
1072   0630             SetupEcho:				; STREAM_REGION = 0FFh
1073   0630             ;*******************************************************************
1074   0630 E5 B5 1A    	mov	a, !MODULE+MOD_EDL	; ESA = stream_region - EDL*8
1075   0633 F0 58       	beq	_skip_enable_echo	; skip all of this if echo isn't enabled
1076   0635             ;---------------------------------------;---------------------------
1077   0635 9F          	xcn	a			; max = stream_region -1
1078   0636 5C          	lsr	a			;
1079   0637 C4 00       	mov	m0, a			;
1080   0639 E8 FF       	mov	a, #STREAM_REGION	;
1081   063B 80          	setc				;
1082   063C A4 00       	sbc	a, m0			;
1083   063E 68 FF       	cmp	a, #STREAM_REGION	;
1084   0640 D0 01       	bne	_edl_not_ss		;
1085   0642             ;---------------------------------------;---------------------------
1086   0642 9C          	dec	a			;
1087   0643             ;---------------------------------------;---------------------------
1088   0643             _edl_not_ss:
1089   0643             ;---------------------------------------;---------------------------
1090   0643 8F 6D F2    	mov	SPC_DSPA, #DSP_ESA	;
1091   0646 C4 F3       	mov	SPC_DSPD, a		;
1092   0648             
1093   0648 C4 01       	mov	m0+1, a			; clear memory region used by echo
1094   064A 8F 00 00    	mov	m0, #0			;
1095   064D E8 00       	mov	a, #0			;
1096   064F 8D 00       	mov	y, #0			;
1097   0651             ;---------------------------------------;---------------------------
1098   0651             _clearmem:
1099   0651             ;---------------------------------------;---------------------------
1100   0651 D7 00       	mov	[m0]+y, a		;
1101   0653 FC          	inc	y			;
1102   0654 D0 FB       	bne	_clearmem		;
1103   0656             ;---------------------------------------;---------------------------
1104   0656 AB 01       	inc	m0+1			;
1105   0658 78 FF 01    	cmp	m0+1, #STREAM_REGION	;
1106   065B D0 F4       	bne	_clearmem		;
1107   065D             ;---------------------------------------;---------------------------
1108   065D 3F 51 11    	call	ResetEFIR		;
1109   0660 3F F3 10    	call	ResetEchoFeedback	;
1110   0663             ;---------------------------------------;---------------------------
1111   0663 8F 4D F2    	mov	SPC_DSPA, #DSP_EON	; copy EON
1112   0666 E5 BF 1A    	mov	a, !MODULE+MOD_EON	;
1113   0669 C4 F3       	mov	SPC_DSPD, a		;
1114   066B             					;
1115   066B 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL	; read old EDL, set new EDL
1116   066E EB F3       	mov	y, SPC_DSPD		;
1117   0670 E5 B5 1A    	mov	a, !MODULE+MOD_EDL	;
1118   0673 C4 F3       	mov	SPC_DSPD, a		;
1119   0675             					;
1120   0675             	;-------------------------------;---------------------------
1121   0675             	; delay EDL*16ms before enabling echo
1122   0675             	; 16384 clks * EDL
1123   0675             	; EDL<<14 clks
1124   0675             	;
1125   0675             	; run loop EDL<<10 times
1126   0675             	;-------------------------------;---------------------------
1127   0675             					;
1128   0675 DD          	mov	a, y			;
1129   0676 1C          	asl	a			;
1130   0677 1C          	asl	a			;
1131   0678 BC          	inc	a			;
1132   0679 C4 01       	mov	m0+1, a			;
1133   067B 8F 00 00    	mov	m0, #0			;
1134   067E             ;---------------------------------------;---------------------------
1135   067E             _delay_16clks:
1136   067E             ;---------------------------------------;---------------------------
1137   067E 77 00       	cmp	a, [0]+y		;
1138   0680 1A 00       	decw	m0			;
1139   0682 D0 FA       	bne	_delay_16clks		;
1140   0684             ;---------------------------------------;---------------------------
1141   0684 3F D4 10    	call	ResetEchoVolume		;
1142   0687 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG	; clear ECEN
1143   068A 8F 00 F3    	mov	SPC_DSPD, #0
1144   068D             ;-------------------------------------------------------------------
1145   068D             _skip_enable_echo:
1146   068D             ;-------------------------------------------------------------------
1147   068D 6F          	ret
1148   068E             
1149   068E             ;*****************************************************************************
1150   068E             Module_Stop:
1151   068E             ;*****************************************************************************
1152   068E 3F 1A 05    	call	ResetSound
1153   0691 8F 06 F1    	mov	SPC_CONTROL, #%110
1154   0694 38 FE E7    	and	special, #~SF_MODACTIVE
1155   0697 6F          	ret
1156   0698             
1157   0698             ;********************************************************
1158   0698             CMD_PLAY:
1159   0698             ;********************************************************
1160   0698 3F 8E 06    	call	Module_Stop
1161   069B E4 F7       	mov	a, SPC_PORT3
1162   069D 38 DF C7    	and	STATUS, #~STATUS_P
1163   06A0 FA C7 F6    	mov	SPC_PORT2, STATUS
1164   06A3 FA EA F5    	mov	SPC_PORT1, comms_v
1165   06A6             ;********************************************************
1166   06A6             ; play module...
1167   06A6             ;
1168   06A6             ; a = initial position
1169   06A6             ;*******************************************************************
1170   06A6             Module_Start:
1171   06A6             ;*******************************************************************
1172   06A6 C4 0E       	mov	mod_position, a
1173   06A8 3F 1A 05    	call	ResetSound
1174   06AB             ;-------------------------------------------------------------------
1175   06AB 18 01 E7    	or	special, #SF_MODACTIVE
1176   06AE E5 A2 1A    	mov	a, !MODULE+MOD_IS
1177   06B1 C4 12       	mov	mod_speed, a
1178   06B3 E5 A1 1A    	mov	a, !MODULE+MOD_IT
1179   06B6 3F F2 06    	call	Module_ChangeTempo
1180   06B9             ;-------------------------------------------------------------------
1181   06B9 E5 A0 1A    	mov	a, !MODULE+MOD_IV
1182   06BC C4 14       	mov	mod_gvol, a
1183   06BE             
1184   06BE CD 07       	mov	x, #7
1185   06C0             ;-------------------------------------------------------------------
1186   06C0             _copy_cvolume:					; copy volume levels
1187   06C0             ;-------------------------------------------------------------------
1188   06C0 F5 A3 1A    	mov	a, !MODULE+MOD_CV+x		;
1189   06C3 D4 36       	mov	ch_cvolume+x, a			;
1190   06C5 1D          	dec	x				;
1191   06C6 10 F8       	bpl	_copy_cvolume			;
1192   06C8             ;-------------------------------------------------------------------
1193   06C8 CD 07       	mov	x, #7
1194   06CA             ;-------------------------------------------------------------------
1195   06CA             _copy_cpan:
1196   06CA             ;-------------------------------------------------------------------
1197   06CA F5 AB 1A    	mov	a, !MODULE+MOD_CP+x
1198   06CD 68 41       	cmp	a, #65
1199   06CF B0 04       	bcs	_cpan_surround
1200   06D1 D4 3E       	mov	ch_panning+x, a
1201   06D3 2F 08       	bra	_cpan_normal
1202   06D5             ;-------------------------------------------------------------------
1203   06D5             _cpan_surround:
1204   06D5             ;-------------------------------------------------------------------
1205   06D5 E8 20       	mov	a, #32
1206   06D7 D4 3E       	mov	ch_panning+x, a
1207   06D9 E8 40       	mov	a, #CF_SURROUND
1208   06DB D4 7E       	mov	ch_flags+x, a
1209   06DD             ;-------------------------------------------------------------------
1210   06DD             _cpan_normal:
1211   06DD             ;-------------------------------------------------------------------
1212   06DD 1D          	dec	x
1213   06DE 10 EA       	bpl	_copy_cpan
1214   06E0             ;-------------------------------------------------------------------
1215   06E0 3F 30 06    	call	SetupEcho
1216   06E3             
1217   06E3 E4 0E       	mov	a, mod_position
1218   06E5 3F FE 07    	call	Module_ChangePosition
1219   06E8             
1220   06E8             	; start timer
1221   06E8 8F 07 F1    	mov	SPC_CONTROL, #%111
1222   06EB             
1223   06EB 18 20 C7    	or	STATUS, #STATUS_P
1224   06EE FA C7 F6    	mov	SPC_PORT2, STATUS
1225   06F1             
1226   06F1             	;SETDSP( DSP_KOF, 0 );	// ?????? already done in reset sound
1227   06F1 6F          	ret
1228   06F2             
1229   06F2             ;*****************************************************************************
1230   06F2             ; a = new BPM value
1231   06F2             ;*****************************************************************************
1232   06F2             Module_ChangeTempo:
1233   06F2             ;*****************************************************************************
1234   06F2 4D          	push	x
1235   06F3             
1236   06F3 C4 11       	mov	mod_bpm, a
1237   06F5 8F 06 F1    	mov	SPC_CONTROL, #%110
1238   06F8             
1239   06F8 5D          	mov	x, a
1240   06F9 8D 4E       	mov	y, #DEFAULT_TEMPO
1241   06FB E8 00       	mov	a, #00h
1242   06FD 9E          	div	ya, x
1243   06FE C4 FA       	mov	SPC_TIMER0, a
1244   0700             
1245   0700 CE          	pop	x
1246   0701             
1247   0701 6F          	ret
1248   0702             
1249   0702             ;*****************************************************************************
1250   0702             ; process module fading
1251   0702             ;*****************************************************************************
1252   0702             ProcessFade:
1253   0702             ;*****************************************************************************
1254   0702 E4 FE       	mov	a, SPC_COUNTER1
1255   0704 F0 31       	beq	_skipfade
1256   0706 18 80 C7    	or	STATUS, #STATUS_F
1257   0709 E4 15       	mov	a, module_vol
1258   070B 64 16       	cmp	a, module_fadeT
1259   070D F0 25       	beq	_nofade
1260   070F 90 10       	bcc	_fadein
1261   0711             
1262   0711             _fadeout:
1263   0711 A4 17       	sbc	a, module_fadeR
1264   0713 B0 04       	bcs	_fade_satL
1265   0715 FA 16 15    	mov	module_vol, module_fadeT
1266   0718 6F          	ret
1267   0719             
1268   0719             _fade_satL:
1269   0719 64 16       	cmp	a, module_fadeT
1270   071B B0 14       	bcs	_fadeset
1271   071D FA 16 15    	mov	module_vol, module_fadeT
1272   0720 6F          	ret
1273   0721             
1274   0721             _fadein:
1275   0721 84 17       	adc	a, module_fadeR
1276   0723 90 04       	bcc	_fade_satH
1277   0725 FA 16 15    	mov	module_vol, module_fadeT
1278   0728 6F          	ret
1279   0729             
1280   0729             _fade_satH:
1281   0729 64 16       	cmp	a, module_fadeT
1282   072B 90 04       	bcc	_fadeset
1283   072D FA 16 15    	mov	module_vol, module_fadeT
1284   0730 6F          	ret
1285   0731             
1286   0731             _fadeset:
1287   0731 C4 15       	mov	module_vol, a
1288   0733 6F          	ret
1289   0734             
1290   0734             _nofade:
1291   0734 38 7F C7    	and	STATUS, #~STATUS_F
1292   0737             _skipfade:
1293   0737             _notick:
1294   0737 6F          	ret
1295   0738             
1296   0738             ;*****************************************************************************
1297   0738             ; Update module playback
1298   0738             ;*****************************************************************************
1299   0738             Module_Update:
1300   0738             ;*****************************************************************************
1301   0738 E4 FD       	mov	a, SPC_COUNTER0		; check for a tick
1302   073A F0 FB       	beq	_notick			;
1303   073C             ;---------------------------------------;
1304   073C             					;
1305   073C             	;-------------------------------;
1306   073C             	; module tick!!!
1307   073C             	;-------------------------------;
1308   073C             					;
1309   073C 78 00 0F    	cmp	mod_tick, #0		;
1310   073F D0 69       	bne	_skip_read_pattern	;
1311   0741             ;---------------------------------------;
1312   0741 8D 01       	mov	y, #1			; skip hints
1313   0743 F7 19       	mov	a, [patt_addr]+y	; copy update flags
1314   0745 FC          	inc	y			;
1315   0746 C4 1D       	mov	patt_update, a		;
1316   0748 C4 02       	mov	m1, a			;
1317   074A CD 00       	mov	x, #0			;
1318   074C 4B 02       	lsr	m1			; test first bit
1319   074E 90 36       	bcc	_no_channel_data	;
1320   0750             ;---------------------------------------;
1321   0750             _read_pattern_data:
1322   0750             ;---------------------------------------;
1323   0750 01          	SPROC				;
1324   0751 F7 19       	mov	a, [patt_addr]+y	; read maskvar
1325   0753 FC          	inc	y			;
1326   0754 C4 00       	mov	m0, a			;
1327   0756 93 00 05    	bbc4	m0, _skip_read_note	; test/read new note
1328   0759 F7 19       	mov	a, [patt_addr]+y	;
1329   075B FC          	inc	y			;
1330   075C D4 4E       	mov	ch_note+x, a		;
1331   075E             ;---------------------------------------;
1332   075E             _skip_read_note:
1333   075E             ;---------------------------------------;
1334   075E B3 00 05    	bbc5	m0, _skip_read_instr	; test/read new instrument
1335   0761 F7 19       	mov	a, [patt_addr]+y	;
1336   0763 FC          	inc	y			;
1337   0764 D4 56       	mov	ch_instr+x, a		;
1338   0766             ;---------------------------------------;
1339   0766             _skip_read_instr:
1340   0766             ;---------------------------------------;
1341   0766 D3 00 05    	bbc6	m0, _skip_read_vcmd	; test/read new vcmd
1342   0769 F7 19       	mov	a, [patt_addr]+y	;
1343   076B FC          	inc	y			;
1344   076C D4 5E       	mov	ch_vcmd+x, a		;
1345   076E             ;---------------------------------------;
1346   076E             _skip_read_vcmd:
1347   076E             ;---------------------------------------;
1348   076E F3 00 0A    	bbc7	m0, _skip_read_cmd	; test/read new cmd+param
1349   0771 F7 19       	mov	a, [patt_addr]+y	;
1350   0773 FC          	inc	y			;
1351   0774 D4 66       	mov	ch_command+x, a		;
1352   0776 F7 19       	mov	a, [patt_addr]+y	;
1353   0778 FC          	inc	y			;
1354   0779 D4 6E       	mov	ch_param+x, a		;
1355   077B             ;---------------------------------------;
1356   077B             _skip_read_cmd:
1357   077B             ;---------------------------------------;
1358   077B 38 0F 00    	and	m0, #0Fh		; set flags (lower nibble)
1359   077E F4 7E       	mov	a, ch_flags+x		;
1360   0780 28 F0       	and	a, #0F0h		;
1361   0782 04 00       	or	a, m0			;
1362   0784 D4 7E       	mov	ch_flags+x, a		;
1363   0786             ;---------------------------------------;
1364   0786             _no_channel_data:
1365   0786             _rp_nextchannel:
1366   0786             ;---------------------------------------;
1367   0786 3D          	inc	x			; increment index
1368   0787 4B 02       	lsr	m1			; shift out next bit
1369   0789 B0 C5       	bcs	_read_pattern_data	; process if set
1370   078B D0 F9       	bne	_no_channel_data	; loop if bits remain (upto 8 iterations)
1371   078D             ;---------------------------------------;
1372   078D CB 00       	mov	m0, y			; add offset to pattern address
1373   078F 60          	clrc				;
1374   0790 89 00 19    	adc	patt_addr, m0		;
1375   0793 98 00 1A    	adc	patt_addr+1, #0		;
1376   0796             
1377   0796 B3 E7 11    	bbc5	special, _no_change	; test SM_SWINGTEMPO
1378   0799             ;---------------------------------------;
1379   0799             _swing_tempo:
1380   0799             ;---------------------------------------;
1381   0799 E4 13       	mov	a, mod_speed_bk		;
1382   079B C3 E7 03    	bbs6	special, _swing_even	; test SF_SWINGODD
1383   079E             ;---------------------------------------;
1384   079E             _swing_odd:
1385   079E             ;---------------------------------------;
1386   079E 80          	setc				;
1387   079F 84 E9       	adc	a, swing_tempo_mod	;
1388   07A1             ;---------------------------------------;
1389   07A1             _swing_even:
1390   07A1             ;---------------------------------------;
1391   07A1 58 40 E7    	eor	special, #SF_SWINGODD	;
1392   07A4 68 00       	cmp	a, #0			;
1393   07A6 F0 02       	beq	_no_change		;
1394   07A8             ;---------------------------------------;
1395   07A8 C4 12       	mov	mod_speed, a		;
1396   07AA             ;---------------------------------------;
1397   07AA             _no_change:
1398   07AA             _skip_read_pattern:
1399   07AA             ;-----------------------------------------------;-----------------------------
1400   07AA CD 00       	mov	x, #0				; update module channels
1401   07AC E4 1D       	mov	a, patt_update			;
1402   07AE             ;-----------------------------------------------;
1403   07AE             _muc_loop:
1404   07AE             ;-----------------------------------------------
1405   07AE 5C          	lsr	a
1406   07AF             
1407   07AF 2D          	push	a
1408   07B0             
1409   07B0 E8 00       	mov	a, #0
1410   07B2 3C          	rol	a
1411   07B3 C4 BE       	mov	t_hasdata, a
1412   07B5             
1413   07B5             ;-----------------------------------------------------------------------------
1414   07B5 01          	SPROC
1415   07B6             
1416   07B6             	;--------------------------------------
1417   07B6             	; get data pointers
1418   07B6             	;--------------------------------------
1419   07B6 FB 56       	mov	y, ch_instr+x
1420   07B8 DC          	dec	y
1421   07B9 F6 08 1C    	mov	a, !MODULE+MOD_ITABLE_L+y
1422   07BC C4 C5       	mov	p_instr, a
1423   07BE F6 48 1C    	mov	a, !MODULE+MOD_ITABLE_H+y
1424   07C1 C4 C6       	mov	p_instr+1, a
1425   07C3             
1426   07C3 8F 00 C3    	mov	t_flags, #0
1427   07C6 78 00 BE    	cmp	t_hasdata, #0
1428   07C9 F0 05       	beq	_muc_nopatterndata
1429   07CB             
1430   07CB 3F 40 08    	call	Channel_ProcessData
1431   07CE 2F 03       	bra	_muc_pa
1432   07D0             ;-----------------------------------------------------------------------------
1433   07D0             _muc_nopatterndata:
1434   07D0             ;-----------------------------------------------------------------------------
1435   07D0 3F B9 08    	call	Channel_CopyTemps
1436   07D3             ;-----------------------------------------------------------------------------
1437   07D3             _muc_pa:
1438   07D3             ;-----------------------------------------------------------------------------
1439   07D3 3F F2 08    	call	Channel_ProcessAudio
1440   07D6             ;-----------------------------------------------------------------------------
1441   07D6 AE          	pop	a
1442   07D7             
1443   07D7 3D          	inc	x
1444   07D8 C8 08       	cmp	x, #8
1445   07DA D0 D2       	bne	_muc_loop
1446   07DC             ;-----------------------------------------------------------------------------
1447   07DC AB 0F       	inc	mod_tick		; increment tick until >= SPEED
1448   07DE 69 12 0F    	cmp	mod_tick, mod_speed	;
1449   07E1 90 1A       	bcc	_exit_tick		;
1450   07E3             ;---------------------------------------;
1451   07E3 8F 00 0F    	mov	mod_tick, #0		;
1452   07E6 F3 E7 04    	bbc7	special, _no_pattjump	; test SF_PATTERNJUMP
1453   07E9 E4 1C       	mov	a, pattjump_index	;
1454   07EB 2F 11       	bra	Module_ChangePosition	;
1455   07ED             ;---------------------------------------;
1456   07ED             _no_pattjump:
1457   07ED             ;---------------------------------------;
1458   07ED AB 10       	inc	mod_row			; increment row until > PATTERN_ROWS
1459   07EF F0 07       	beq	_adv_pos		;
1460   07F1 69 1B 10    	cmp	mod_row, patt_rows	;
1461   07F4 F0 07       	beq	_exit_tick		;
1462   07F6 90 05       	bcc	_exit_tick		;
1463   07F8             ;---------------------------------------;
1464   07F8             _adv_pos:
1465   07F8             ;---------------------------------------;
1466   07F8 E4 0E       	mov	a, mod_position		; advance position
1467   07FA BC          	inc	a			;
1468   07FB 2F 01       	bra	Module_ChangePosition	;
1469   07FD             ;---------------------------------------;
1470   07FD             _exit_tick:
1471   07FD             ;---------------------------------------;
1472   07FD 6F          	ret				;
1473   07FE             ;---------------------------------------;
1474   07FE             
1475   07FE             ;*******************************************************************
1476   07FE             ; set sequence position
1477   07FE             ;
1478   07FE             ; a=position
1479   07FE             ;*******************************************************************
1480   07FE             Module_ChangePosition:
1481   07FE FD          	mov	y, a
1482   07FF             _skip_pattern:
1483   07FF F6 C0 1A    	mov	a, !MODULE+MOD_SEQU+y
1484   0802 68 FE       	cmp	a, #254			; skip +++
1485   0804 D0 03       	bne	_not_plusplusplus	;
1486   0806 FC          	inc	y			;
1487   0807 2F F6       	bra	_skip_pattern		;
1488   0809             
1489   0809             _not_plusplusplus:
1490   0809 68 FF       	cmp	a, #255			; restart on ---
1491   080B D0 04       	bne	_not_end		;
1492   080D 8D 00       	mov	y, #0			;
1493   080F 2F EE       	bra	_skip_pattern		;
1494   0811             
1495   0811             _not_end:
1496   0811 CB 0E       	mov	mod_position, y
1497   0813 FD          	mov	y, a
1498   0814 F6 88 1B    	mov	a, !MODULE+MOD_PTABLE_L+y
1499   0817 C4 19       	mov	patt_addr, a
1500   0819 F6 C8 1B    	mov	a, !MODULE+MOD_PTABLE_H+y
1501   081C C4 1A       	mov	patt_addr+1, a
1502   081E 8D 00       	mov	y, #0
1503   0820 F7 19       	mov	a, [patt_addr]+y
1504   0822 C4 1B       	mov	patt_rows, a
1505   0824             
1506   0824 3A 19       	incw	patt_addr
1507   0826             
1508   0826 38 7F E7    	and	special, #~SF_PATTERNJUMP
1509   0829 8F 00 0F    	mov	mod_tick, #0
1510   082C 8F 00 10    	mov	mod_row, #0
1511   082F 6F          	ret
1512   0830             
1513   0830             
1514   0830 010204081020BITS:	.byte   1,  2,  4,  8, 16, 32, 64,128
1514   0836 4080
1515   0838 0F1F2F3F4F5FCBITS:	.byte  DSP_C0,DSP_C1,DSP_C2,DSP_C3,DSP_C4,DSP_C5,DSP_C6,DSP_C7
1515   083E 6F7F
1516   0840             
1517   0840             
1518   0840             ;*****************************************************************************
1519   0840             Channel_ProcessData:
1520   0840             ;*****************************************************************************
1521   0840 78 00 0F    	cmp	mod_tick, #0		; skip tick0 processing on other ticks
1522   0843 D0 5C       	bne	_cpd_non0		;
1523   0845             					;
1524   0845 F4 7E       	mov	a, ch_flags+x		;
1525   0847 C4 0C       	mov	m6, a			;
1526   0849 13 0C 4A    	bbc0	m6, _cpd_no_note	; test for note
1527   084C             ;---------------------------------------;
1528   084C F4 4E       	mov	a, ch_note+x		;
1529   084E 68 FE       	cmp	a, #254			; test notecut/noteoff
1530   0850 F0 10       	beq	_cpd_notecut		;
1531   0852 B0 17       	bcs	_cpd_noteoff		;
1532   0854             ;---------------------------------------;
1533   0854             _cpd_note:				; don't start note on glissando
1534   0854             ;---------------------------------------;
1535   0854 73 0C 06    	bbc3	m6, _cpdn_test_for_glis	;
1536   0857 F4 66       	mov	a, ch_command+x		;
1537   0859 68 07       	cmp	a, #7			;
1538   085B F0 11       	beq	_cpd_note_next		;
1539   085D             ;---------------------------------------;
1540   085D             _cpdn_test_for_glis:
1541   085D             ;---------------------------------------;
1542   085D 3F C6 08    	call	Channel_StartNewNote	;
1543   0860 2F 0C       	bra	_cpd_note_next		;
1544   0862             ;---------------------------------------;
1545   0862             _cpd_notecut:				;notecut:
1546   0862             ;---------------------------------------;
1547   0862 E8 00       	mov	a, #0			; cut volume
1548   0864 D4 2E       	mov	ch_volume+x, a		;
1549   0866 38 FE 0C    	and	m6, #~CF_NOTE		; clear note flag
1550   0869 2F 03       	bra	_cpd_note_next		;
1551   086B             ;---------------------------------------;
1552   086B             _cpd_noteoff:				;noteoff:
1553   086B             ;---------------------------------------;
1554   086B 38 EE 0C    	and	m6, #~(CF_NOTE|CF_KEYON); clear note and keyon flags
1555   086E             ;---------------------------------------;
1556   086E             _cpd_note_next:
1557   086E             ;---------------------------------------;
1558   086E 33 0C 22    	bbc1	m6, _cpdn_no_instr	; apply instrument SETPAN
1559   0871             ;---------------------------------------;
1560   0871 8D 03       	mov	y, #INS_SETPAN		;
1561   0873 F7 C5       	mov	a, [p_instr]+y		;
1562   0875 30 02       	bmi	_cpdi_nsetpan		;
1563   0877             ;---------------------------------------;
1564   0877 D4 3E       	mov	ch_panning+x, a		;
1565   0879             ;---------------------------------------;
1566   0879             _cpdi_nsetpan:
1567   0879             ;---------------------------------------;
1568   0879 FB 76       	mov	y, ch_sample+x		; apply sample SETPAN
1569   087B             ;	beq	_cpdi_nosample		;
1570   087B F6 88 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1571   087E C4 00       	mov	m0, a			;
1572   0880 F6 C8 1C    	mov	a, !MODULE+MOD_STABLE_H+y	;
1573   0883 C4 01       	mov	m0+1, a			;
1574   0885 8D 00       	mov	y, #SAMP_DVOL		; copy default volume
1575   0887 F7 00       	mov	a, [m0]+y		;
1576   0889 D4 2E       	mov	ch_volume+x, a		;
1577   088B 8D 05       	mov	y, #SAMP_SETPAN		;
1578   088D F7 00       	mov	a, [m0]+y		;
1579   088F 30 02       	bmi	_cpdi_nsetpan_s		;
1580   0891             ;---------------------------------------;
1581   0891 D4 3E       	mov	ch_panning+x, a		;
1582   0893             ;---------------------------------------;
1583   0893             _cpdi_nsetpan_s:
1584   0893             _cpdi_nosample:
1585   0893             _cpdn_no_instr:
1586   0893             ;---------------------------------------;
1587   0893 38 FE 0C    	and	m6, #~CF_NOTE		;
1588   0896             ;---------------------------------------;
1589   0896             _cpd_no_note:
1590   0896             ;---------------------------------------;
1591   0896 E4 0C       	mov	a, m6			; save flag mods
1592   0898 D4 7E       	mov	ch_flags+x, a		;
1593   089A             					;
1594   089A 28 03       	and	a, #(CF_NOTE|CF_INSTR)	; test for note or instrument
1595   089C F0 03       	beq	_no_note_or_instr	;
1596   089E             ;---------------------------------------;
1597   089E 3F DD 08    	call	Channel_ResetVolume	; and reset volume things
1598   08A1             ;---------------------------------------;
1599   08A1             _no_note_or_instr:			;
1600   08A1             _cpd_non0:				; nonzero ticks: just update audio
1601   08A1             ;---------------------------------------;
1602   08A1 01          	SPROC				;
1603   08A2             					;
1604   08A2 F4 7E       	mov	a, ch_flags+x		; test and process volume command
1605   08A4 28 04       	and	a, #CF_VCMD		;
1606   08A6 F0 03       	beq	_skip_vcmd		;
1607   08A8             ;---------------------------------------;
1608   08A8 3F EC 0A    	call	Channel_ProcessVolumeCommand
1609   08AB             ;---------------------------------------;
1610   08AB             _skip_vcmd:
1611   08AB             ;---------------------------------------;
1612   08AB 01          	SPROC				;
1613   08AC 3F B9 08    	call	Channel_CopyTemps	; copy t values
1614   08AF             					;
1615   08AF F4 7E       	mov	a, ch_flags+x		; test and process command
1616   08B1 28 08       	and	a, #CF_CMD		;
1617   08B3 F0 03       	beq	_skip_cmd		;
1618   08B5             ;---------------------------------------;
1619   08B5 3F BE 0B    	call	Channel_ProcessCommand	;
1620   08B8             ;---------------------------------------;
1621   08B8             _skip_cmd:
1622   08B8             ;---------------------------------------;
1623   08B8 6F          	ret
1624   08B9             
1625   08B9             ;*****************************************************************************
1626   08B9             Channel_CopyTemps:
1627   08B9             ;*****************************************************************************
1628   08B9 F4 1E       	mov	a, ch_pitch_l+x		; prepare for effects processing.....
1629   08BB FB 26       	mov	y, ch_pitch_h+x		;
1630   08BD DA C1       	movw	t_pitch, ya		;
1631   08BF F4 2E       	mov	a, ch_volume+x		;
1632   08C1 FB 3E       	mov	y, ch_panning+x		;
1633   08C3 DA BF       	movw	t_volume, ya		;
1634   08C5             	;mov	t_sampoff, #0		;
1635   08C5             
1636   08C5 6F          	ret
1637   08C6             
1638   08C6             ;*****************************************************************************
1639   08C6             Channel_StartNewNote:
1640   08C6             ;*****************************************************************************
1641   08C6 F4 4E       	mov	a, ch_note+x		; pitch = note * 64
1642   08C8 8D 40       	mov	y, #64			;
1643   08CA CF          	mul	ya			;
1644   08CB D4 1E       	mov	ch_pitch_l+x, a		;
1645   08CD DB 26       	mov	ch_pitch_h+x, y		;
1646   08CF             					;
1647   08CF F4 56       	mov	a, ch_instr+x		; test for instrument and copy sample!
1648   08D1 F0 06       	beq	_csnn_no_instr		;
1649   08D3             ;---------------------------------------;
1650   08D3 8D 01       	mov	y, #INS_SAMPLE		;
1651   08D5 F7 C5       	mov	a, [p_instr]+y		;
1652   08D7 D4 76       	mov	ch_sample+x, a		;
1653   08D9             ;---------------------------------------;
1654   08D9             _csnn_no_instr:
1655   08D9             ;---------------------------------------;
1656   08D9 18 80 C3    	or	t_flags, #TF_START	; set start flag
1657   08DC 6F          	ret
1658   08DD             
1659   08DD             ;*****************************************************************************
1660   08DD             Channel_ResetVolume:
1661   08DD             ;*****************************************************************************
1662   08DD E8 FF       	mov	a, #255			; reset fadeout
1663   08DF D4 B6       	mov	ch_fadeout+x, a		;----------------
1664   08E1 E8 00       	mov	a, #0			; reset envelope
1665   08E3 D4 96       	mov	ch_env_node+x, a	;
1666   08E5 D4 9E       	mov	ch_env_tick+x, a	;----------------
1667   08E7 D4 46       	mov	ch_cmem+x, a		; reset CMem
1668   08E9             					;----------------
1669   08E9 F4 7E       	mov	a, ch_flags+x		; set KEYON
1670   08EB 08 10       	or	a, #CF_KEYON		; clear FADE
1671   08ED 28 DF       	and	a, #~CF_FADE		;
1672   08EF D4 7E       	mov	ch_flags+x, a		;----------------
1673   08F1 6F          	ret
1674   08F2             
1675   08F2             ;*****************************************************************************
1676   08F2             Channel_ProcessAudio:
1677   08F2             ;*****************************************************************************
1678   08F2 01          	SPROC					;
1679   08F3 FB 76       	mov	y, ch_sample+x			; m5 = sample address
1680   08F5             ;	beq	_cpa_nsample			;
1681   08F5 F6 88 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1682   08F8 C4 0A       	mov	m5, a				;
1683   08FA F6 C8 1C    	mov	a, !MODULE+MOD_STABLE_H+y	;
1684   08FD C4 0B       	mov	m5+1, a				;
1685   08FF             ;-----------------------------------------------;
1686   08FF             _cpa_nsample:
1687   08FF             ;-----------------------------------------------;
1688   08FF 3F 21 0A    	call	Channel_ProcessEnvelope		;
1689   0902             						;
1690   0902 F4 7E       	mov	a, ch_flags+x			; process FADE
1691   0904 28 20       	and	a, #CF_FADE			;
1692   0906 F0 0D       	beq	_skip_fade			;
1693   0908             ;-----------------------------------------------;
1694   0908 F4 B6       	mov	a, ch_fadeout+x			;
1695   090A 80          	setc					;
1696   090B 8D 00       	mov	y, #INS_FADEOUT			;
1697   090D B7 C5       	sbc	a, [p_instr]+y			;
1698   090F B0 02       	bcs	_subfade_noverflow		;	
1699   0911             ;-----------------------------------------------;
1700   0911 E8 00       	mov	a, #0				;
1701   0913             ;-----------------------------------------------;
1702   0913             _subfade_noverflow:
1703   0913             ;-----------------------------------------------
1704   0913 D4 B6       	mov	ch_fadeout+x, a
1705   0915             ;-----------------------------------------------
1706   0915             _skip_fade:
1707   0915             ;-----------------------------------------------;
1708   0915             	;mov	a, !BITS+x			; no sfx support
1709   0915             	;and	a, #0
1710   0915             	;bne	_sfx_override
1711   0915             ;-----------------------------------------------;
1712   0915 E4 C3       	mov	a, t_flags			; exit if 'note delay' is set
1713   0917 28 02       	and	a, #TF_DELAY			;
1714   0919 F0 01       	beq	_cpa_ndelay			;
1715   091B             ;-----------------------------------------------;
1716   091B             _sfx_override:
1717   091B             ;-----------------------------------------------
1718   091B 6F          	ret
1719   091C             ;-----------------------------------------------
1720   091C             _cpa_ndelay:
1721   091C             ;-----------------------------------------------;
1722   091C             						;
1723   091C             	;---------------------------------------;
1724   091C             	; COMPUTE VOLUME:
1725   091C             	; V*CV*SV*GV*VEV*FADE
1726   091C             	; m0 = result (0..255)
1727   091C             	;---------------------------------------;
1728   091C             						;
1729   091C 8D 02       	mov	y, #INS_GVOL			;
1730   091E F7 C5       	mov	a, [p_instr]+y			;
1731   0920             						;
1732   0920 2D          	push	a				;
1733   0921             						;
1734   0921 8D 01       	mov	y, #SAMP_GVOL			;
1735   0923 F7 0A       	mov	a, [m5]+y			;
1736   0925             						;
1737   0925 2D          	push	a				;
1738   0926             						;
1739   0926 E4 BF       	mov	a, t_volume			; y = 8-BIT VOLUME
1740   0928 1C          	asl	a				;
1741   0929 1C          	asl	a				;		
1742   092A 90 02       	bcc	_cpa_clamp_vol			;	
1743   092C             ;-----------------------------------------------;
1744   092C E8 FF       	mov	a, #255				;
1745   092E             ;-----------------------------------------------;
1746   092E             _cpa_clamp_vol:	
1747   092E             ;-----------------------------------------------;
1748   092E FD          	mov	y, a				;
1749   092F             						;
1750   092F F4 36       	mov	a, ch_cvolume+x			; *= CV
1751   0931 1C          	asl	a				;
1752   0932 1C          	asl	a				;
1753   0933 B0 01       	bcs	_calcvol_skip_cv		;
1754   0935             ;-----------------------------------------------;
1755   0935 CF          	mul	ya				;
1756   0936             ;-----------------------------------------------;
1757   0936             _calcvol_skip_cv:
1758   0936             ;-----------------------------------------------;
1759   0936 AE          	pop	a				; *= SV
1760   0937             						;
1761   0937 1C          	asl	a				;
1762   0938 1C          	asl	a				;
1763   0939 B0 01       	bcs	_calcvol_skip_sv		;
1764   093B             ;-----------------------------------------------;
1765   093B CF          	mul	ya				;
1766   093C             ;-----------------------------------------------;
1767   093C             _calcvol_skip_sv:
1768   093C             ;-----------------------------------------------;
1769   093C AE          	pop	a				;
1770   093D             						;
1771   093D 1C          	asl	a				;
1772   093E B0 01       	bcs	_calcvol_skip_iv		;
1773   0940 CF          	mul	ya				;
1774   0941             ;-----------------------------------------------;
1775   0941             _calcvol_skip_iv:
1776   0941             ;-----------------------------------------------;
1777   0941 E4 14       	mov	a, mod_gvol			; *= GV
1778   0943 1C          	asl	a				;
1779   0944 B0 01       	bcs	_calcvol_skip_gvol		;
1780   0946             ;-----------------------------------------------;
1781   0946 CF          	mul	ya				;
1782   0947             ;-----------------------------------------------;
1783   0947             _calcvol_skip_gvol:				;
1784   0947             ;-----------------------------------------------;
1785   0947 E4 C4       	mov	a, t_env			; *= VEV
1786   0949 CF          	mul	ya				;
1787   094A             						;
1788   094A F4 B6       	mov	a, ch_fadeout+x			; *= FADE
1789   094C CF          	mul	ya				;
1790   094D             						;
1791   094D E4 15       	mov	a, module_vol			;
1792   094F CF          	mul	ya				;
1793   0950             						;
1794   0950 DD          	mov	a, y				; store 7bit result
1795   0951 5C          	lsr	a				; 
1796   0952 C4 04       	mov	m2, a				;
1797   0954             						;
1798   0954 78 80 C3    	cmp	t_flags, #80h			;
1799   0957 B0 0E       	bcs	_dont_hack_gain			;
1800   0959 68 00       	cmp	a, #0				;
1801   095B D0 02       	bne	_gain_not_zero			; map value 0 to fast linear decrease
1802   095D             ;-----------------------------------------------;
1803   095D E8 9C       	mov	a, #(LIN_DEC|GAIN_RATE)		;
1804   095F             ;-----------------------------------------------;
1805   095F             _gain_not_zero:
1806   095F             ;-----------------------------------------------;
1807   095F 68 7E       	cmp	a, #126				; map value 126 to fast linear increase
1808   0961 D0 02       	bne	_gain_not_max			; ...127 not reached
1809   0963             ;-----------------------------------------------;
1810   0963 E8 DC       	mov	a, #(LIN_INC|GAIN_RATE)		;
1811   0965             ;-----------------------------------------------;
1812   0965             _gain_not_max:
1813   0965             ;-----------------------------------------------;
1814   0965 C4 04       	mov	m2, a				;
1815   0967             ;-----------------------------------------------;
1816   0967             _dont_hack_gain:
1817   0967             ;-----------------------------------------------;
1818   0967 F4 7E       	mov	a, ch_flags+x			; [KFF] added in pitchmod
1819   0969 28 80       	and	a, #CF_MUTE			;
1820   096B F0 08       	beq	panning				;
1821   096D 8F 00 02    	mov	m1, #0				;
1822   0970 8F 00 03    	mov	m1+1, #0			;
1823   0973 2F 17       	bra	_cpa_nsurround			;
1824   0975             ;-----------------------------------------------;
1825   0975             panning:
1826   0975             ;-----------------------------------------------;
1827   0975             						;
1828   0975             	;---------------------------------------;
1829   0975             	; compute PANNING
1830   0975             	;---------------------------------------;
1831   0975             						;
1832   0975 E4 C0       	mov	a, t_panning			; a = panning 0..127	
1833   0977 1C          	asl	a				;	
1834   0978 10 01       	bpl	_clamppan			;
1835   097A             ;-----------------------------------------------;
1836   097A 9C          	dec	a				;
1837   097B             ;-----------------------------------------------;
1838   097B             _clamppan:
1839   097B             ;-----------------------------------------------;	
1840   097B C4 03       	mov	m1+1, a				; store panning (volume) levels
1841   097D 48 7F       	eor	a, #127				;
1842   097F C4 02       	mov	m1, a				;
1843   0981             
1844   0981 F4 7E       	mov	a, ch_flags+x			; apply surround (R = -R)
1845   0983 28 40       	and	a, #CF_SURROUND			;
1846   0985 F0 05       	beq	_cpa_nsurround			;
1847   0987 58 FF 03    	eor	m1+1, #255			;
1848   098A AB 03       	inc	m1+1				;
1849   098C             ;-----------------------------------------------;
1850   098C             _cpa_nsurround:
1851   098C             ;-----------------------------------------------;
1852   098C             						;
1853   098C             	;---------------------------------------;
1854   098C             	; compute PITCH
1855   098C             	;---------------------------------------;
1856   098C             						;
1857   098C C8 01       	cmp	x, #1				;
1858   098E             						;
1859   098E 8D 02       	mov	y, #SAMP_PITCHBASE		; m3 = t_pitch PITCHBASE
1860   0990 F7 0A       	mov	a, [m5]+y			;
1861   0992 60          	clrc					;
1862   0993 84 C1       	adc	a, t_pitch_l			;
1863   0995 C4 06       	mov	m3, a				;
1864   0997 FC          	inc	y				;
1865   0998 F7 0A       	mov	a, [m5]+y			;
1866   099A 84 C2       	adc	a, t_pitch_h			;
1867   099C C4 07       	mov	m3+1, a				;
1868   099E 10 0C       	bpl	_positive_oct			;
1869   09A0             ;-----------------------------------------------;
1870   09A0             
1871   09A0             	;-----------------------------------------------------------------;
1872   09A0             	; Negative octave handling by KungFuFurby 12/16/15 - 12/17/15     ;
1873   09A0             	; Negative octave detected!                                       ;
1874   09A0             	; This code ensures that the SPC700 can handle lower pitches than ;
1875   09A0             	; what SNESMod normally supports.                                 ;
1876   09A0             	;-----------------------------------------------------------------;
1877   09A0             
1878   09A0 48 FF       	eor	a, #0FFh			; Prevent glitched
1879   09A2 FD          	mov	y, a				; division read.
1880   09A3 F6 89 11    	mov	a, !LUT_DIV3+y			; m0 = octave
1881   09A6 48 FF       	eor	a, #0FFh			;
1882   09A8 C4 00       	mov	m0, a				;
1883   09AA 2F 06       	bra	_oct_cont			;
1884   09AC             ;-----------------------------------------------;
1885   09AC             _positive_oct:
1886   09AC             ;-----------------------------------------------;
1887   09AC FD          	mov	y, a				; m0 = octave
1888   09AD F6 89 11    	mov	a, !LUT_DIV3+y			;
1889   09B0 C4 00       	mov	m0, a				;
1890   09B2             ;-----------------------------------------------;
1891   09B2             _oct_cont:
1892   09B2             ;-----------------------------------------------;
1893   09B2 1C          	asl	a				; m3 -= (oct*3) << 8
1894   09B3 60          	clrc					; Safety clear for negative
1895   09B4 84 00       	adc	a, m0				; octaves
1896   09B6 C4 01       	mov	m0+1, a				;
1897   09B8 E4 07       	mov	a, m3+1				;
1898   09BA 80          	setc					;
1899   09BB A4 01       	sbc	a, m0+1				;
1900   09BD             						;
1901   09BD 0B 06       	asl	m3				; m3 = m3*2 + LUT_FTAB base
1902   09BF 3C          	rol	a				;
1903   09C0 98 90 06    	adc	m3, #LBYTE(LUT_FTAB)		;
1904   09C3 88 13       	adc	a, #HBYTE(LUT_FTAB)		; 
1905   09C5 C4 07       	mov	m3+1, a				;
1906   09C7             						;
1907   09C7 8D 00       	mov	y, #0				; read ftab[f]
1908   09C9 F7 06       	mov	a, [m3]+y			;
1909   09CB C4 08       	mov	m4, a				;
1910   09CD FC          	inc	y				;
1911   09CE F7 06       	mov	a, [m3]+y			;
1912   09D0             						;
1913   09D0 2D          	push	a				;
1914   09D1             						;
1915   09D1 E8 08       	mov	a, #8				; y = 8-oct
1916   09D3 80          	setc					;
1917   09D4 A4 00       	sbc	a, m0				;
1918   09D6 FD          	mov	y, a				;
1919   09D7             
1920   09D7 AE          	pop	a				; a,m4 = ftab value
1921   09D8 F0 05       	beq	_no_pitch_shift			; skip shift if 0
1922   09DA             ;-----------------------------------------------;
1923   09DA             _cont_pitch_shift:
1924   09DA             ;-----------------------------------------------;
1925   09DA 5C          	lsr	a				; shift by (8-oct)
1926   09DB 6B 08       	ror	m4				;
1927   09DD FE FB       	dbnz	y, _cont_pitch_shift		; (thanks KungFuFurby)
1928   09DF             
1929   09DF             	;-----------------------------------------------------------------;	
1930   09DF             	; WARNING: More than eight pitch shifts are possible, so the code ;
1931   09DF             	; has been compressed to a mere three lines. The only problem     ;
1932   09DF             	; will be with glitched values out of range.                      ;
1933   09DF             	;-----------------------------------------------------------------;
1934   09DF             
1935   09DF             ;-----------------------------------------------;
1936   09DF             _no_pitch_shift:
1937   09DF             ;-----------------------------------------------;
1938   09DF C4 09       	mov	m4+1, a				;
1939   09E1             						;
1940   09E1             	;---------------------------------------;
1941   09E1             	; m1 = VOL/VOLR
1942   09E1             	; m2 = GAIN
1943   09E1             	; m4 = PITCH
1944   09E1             	;---------------------------------------;
1945   09E1             						;
1946   09E1 7D          	mov	a, x				; DSPA = voices[x]
1947   09E2 9F          	xcn	a				;
1948   09E3 C4 F2       	mov	SPC_DSPA, a			;
1949   09E5             						;-----------------------------
1950   09E5 E4 C3       	mov	a, t_flags			; test for KEYON
1951   09E7 28 80       	and	a, #TF_START			;
1952   09E9 F0 15       	beq	_cpa_nstart			;-----------------------------
1953   09EB             ;-----------------------------------------------;keyon:
1954   09EB 8D 04       	mov	y, #SAMP_DINDEX			; set SRCN
1955   09ED F7 0A       	mov	a, [m5]+y			;
1956   09EF 18 04 F2    	or	SPC_DSPA, #DSPV_SRCN		;
1957   09F2 C4 F3       	mov	SPC_DSPD, a			;-----------------------------
1958   09F4             	;---------------------------------------;
1959   09F4             	; **TODO: SAMPLE OFFSET
1960   09F4             	;---------------------------------------;
1961   09F4 8F 4C F2    	mov	SPC_DSPA, #DSP_KON		; set KON bit
1962   09F7 F5 30 08    	mov	a, !BITS+x			;
1963   09FA C4 F3       	mov	SPC_DSPD, a			;-----------------------------
1964   09FC 7D          	mov	a, x				; restore DSPA = voices[x]
1965   09FD 9F          	xcn	a				;
1966   09FE C4 F2       	mov	SPC_DSPA, a			;
1967   0A00             ;-----------------------------------------------;
1968   0A00             _cpa_nstart:
1969   0A00             ;-----------------------------------------------;
1970   0A00 FA 02 F3    	mov	SPC_DSPD, m1			; set VOLUME
1971   0A03 AB F2       	inc	SPC_DSPA			;
1972   0A05 FA 03 F3    	mov	SPC_DSPD, m1+1			;
1973   0A08 AB F2       	inc	SPC_DSPA			;-----------------------------
1974   0A0A FA 08 F3    	mov	SPC_DSPD, m4			; set PITCH
1975   0A0D AB F2       	inc	SPC_DSPA			;
1976   0A0F FA 09 F3    	mov	SPC_DSPD, m4+1			;
1977   0A12 AB F2       	inc	SPC_DSPA			;
1978   0A14 AB F2       	inc	SPC_DSPA			;-----------------------------
1979   0A16             						;
1980   0A16             	;cmp	x, #MAX_ADSR_CHANNELS		; only channels 0-3 may use ADSR
1981   0A16             	;bcs	_ch_direct_gain			;
1982   0A16             	;mov	a, ch_ad+x			; test to see if ADSR has been
1983   0A16             	;cmp	a, #ADSR			; set for channel
1984   0A16             	;bcs	_ch_adsr			;
1985   0A16             ;-----------------------------------------------;
1986   0A16             _ch_direct_gain:
1987   0A16             ;-----------------------------------------------;
1988   0A16 8F 00 F3    	mov	SPC_DSPD, #00h			; disable ADSR
1989   0A19 18 07 F2    	or	SPC_DSPA, #07h			; set GAIN [default]
1990   0A1C FA 04 F3    	mov	SPC_DSPD, m2			;-----------------------------
1991   0A1F             						;
1992   0A1F             	;---------------------------------------;
1993   0A1F             	; **TODO: RESTORE SAMPLE OFFSET
1994   0A1F             	;---------------------------------------;
1995   0A1F             						;
1996   0A1F             ;-----------------------------------------------;
1997   0A1F             _end_ch_process_audio:
1998   0A1F             ;-----------------------------------------------;
1999   0A1F 01          	SPROC					;
2000   0A20             ;-----------------------------------------------;
2001   0A20             _env_quit:
2002   0A20             ;-----------------------------------------------;
2003   0A20 6F          	ret					;
2004   0A21             ;-----------------------------------------------;
2005   0A21             _ch_adsr:
2006   0A21             ;-----------------------------------------------;
2007   0A21             	;mov	SPC_DSPD, a			; store attack and decay rate
2008   0A21             	;inc	SPC_DSPA			;
2009   0A21             	;mov	a, ch_sr+x			;
2010   0A21             	;mov	SPC_DSPD, a			; store sustain rate and level
2011   0A21             	;bra	_end_ch_process_audio		;
2012   0A21             ;-----------------------------------------------;
2013   0A21             
2014   0A21             ;*****************************************************************************
2015   0A21             Channel_ProcessEnvelope:
2016   0A21             ;*****************************************************************************
2017   0A21 E4 C3       	mov	a, t_flags			; exit if 'note delay' is set
2018   0A23 28 02       	and	a, #TF_DELAY			;
2019   0A25 D0 F9       	bne	_env_quit			;
2020   0A27             ;-----------------------------------------------;
2021   0A27 8D 04       	mov	y, #INS_ENVLEN			; test for envelope
2022   0A29 F7 C5       	mov	a, [p_instr]+y			;
2023   0A2B C4 00       	mov	m0, a				;
2024   0A2D D0 0B       	bne	_envelope_valid			;if no envelope:
2025   0A2F             ;-----------------------------------------------;
2026   0A2F 8F FF C4    	mov	t_env, #255			; set to max
2027   0A32             						;
2028   0A32 F4 7E       	mov	a, ch_flags+x			; start fade on KEYOFF
2029   0A34 28 10       	and	a, #CF_KEYON			;
2030   0A36 F0 E8       	beq	_env_quit			;
2031   0A38 2F 6E       	bra	_env_setfade			;
2032   0A3A             ;-----------------------------------------------;
2033   0A3A             _envelope_valid:
2034   0A3A             ;-----------------------------------------------;
2035   0A3A F4 96       	mov	a, ch_env_node+x		; read envelope node data
2036   0A3C             						;
2037   0A3C 60          	clrc					; m1/m2
2038   0A3D 88 08       	adc	a, #INS_ENVDATA			;
2039   0A3F FD          	mov	y, a				;
2040   0A40 F7 C5       	mov	a, [p_instr]+y			;
2041   0A42 C4 02       	mov	m1, a				;
2042   0A44 FC          	inc	y				;
2043   0A45 F7 C5       	mov	a, [p_instr]+y			;
2044   0A47 C4 03       	mov	m1+1, a				;
2045   0A49 FC          	inc	y				;
2046   0A4A F7 C5       	mov	a, [p_instr]+y			;
2047   0A4C C4 04       	mov	m2, a				;
2048   0A4E FC          	inc	y				;
2049   0A4F F7 C5       	mov	a, [p_instr]+y			;
2050   0A51 C4 05       	mov	m2+1, a				;
2051   0A53             
2052   0A53 01          	SPROC
2053   0A54 F4 9E       	mov	a, ch_env_tick+x		; test zero/nonzero tick
2054   0A56 D0 0A       	bne	_env_nonzero_tick		;
2055   0A58             ;-----------------------------------------------;ZEROTICK:
2056   0A58 E4 02       	mov	a, m1				; copy Y level
2057   0A5A D4 8E       	mov	ch_env_y_h+x, a			;
2058   0A5C E8 00       	mov	a, #0				;
2059   0A5E D4 86       	mov	ch_env_y_l+x, a			;
2060   0A60 2F 25       	bra	_env_zerotick			;
2061   0A62             ;-----------------------------------------------;
2062   0A62             _env_nonzero_tick:				;NONZERO:
2063   0A62             ;-----------------------------------------------;
2064   0A62 F4 86       	mov	a, ch_env_y_l+x			;
2065   0A64 60          	clrc					;
2066   0A65 84 04       	adc	a, m2				;
2067   0A67 D4 86       	mov	ch_env_y_l+x, a			;
2068   0A69 F4 8E       	mov	a, ch_env_y_h+x			;
2069   0A6B 84 05       	adc	a, m2+1				;
2070   0A6D 10 08       	bpl	_catch_negative			; clamp result 0.0->64.0
2071   0A6F             ;-----------------------------------------------;
2072   0A6F E8 00       	mov	a, #0				;
2073   0A71 D4 8E       	mov	ch_env_y_h+x, a			;
2074   0A73 D4 86       	mov	ch_env_y_l+x, a			;
2075   0A75 2F 10       	bra	_env_zerotick			;
2076   0A77             ;-----------------------------------------------;
2077   0A77             _catch_negative:				;
2078   0A77             ;-----------------------------------------------;
2079   0A77 68 40       	cmp	a, #64				;
2080   0A79 90 0A       	bcc	_catch_plus			;
2081   0A7B             ;-----------------------------------------------;
2082   0A7B E8 40       	mov	a, #64				;
2083   0A7D D4 8E       	mov	ch_env_y_h+x, a			;
2084   0A7F E8 00       	mov	a, #0				;
2085   0A81 D4 86       	mov	ch_env_y_l+x, a			;
2086   0A83 2F 02       	bra	_env_zerotick			;
2087   0A85             ;-----------------------------------------------;
2088   0A85             _catch_plus:
2089   0A85             ;-----------------------------------------------;
2090   0A85 D4 8E       	mov	ch_env_y_h+x, a			;
2091   0A87             ;-----------------------------------------------;
2092   0A87             _env_zerotick:
2093   0A87             ;-----------------------------------------------;
2094   0A87 F4 86       	mov	a, ch_env_y_l+x			; t_env = env << 2
2095   0A89 C4 02       	mov	m1, a				;
2096   0A8B F4 8E       	mov	a, ch_env_y_h+x			;
2097   0A8D 0B 02       	asl	m1				;
2098   0A8F 3C          	rol	a				;
2099   0A90 0B 02       	asl	m1				;
2100   0A92 3C          	rol	a				;
2101   0A93             						;
2102   0A93 90 02       	bcc	_env_shift_clamp		; clamp to 255
2103   0A95             ;-----------------------------------------------;
2104   0A95 E8 FF       	mov	a, #255				;
2105   0A97             ;-----------------------------------------------;
2106   0A97             _env_shift_clamp:
2107   0A97             ;-----------------------------------------------;
2108   0A97 C4 C4       	mov	t_env, a			;
2109   0A99             						;
2110   0A99 F4 7E       	mov	a, ch_flags+x			; don't advance if "keyon" and node=sustain
2111   0A9B 28 10       	and	a, #CF_KEYON			;
2112   0A9D F0 10       	beq	_env_nsustain			;
2113   0A9F             ;-----------------------------------------------;
2114   0A9F 8D 05       	mov	y, #INS_ENVSUS			;
2115   0AA1 F7 C5       	mov	a, [p_instr]+y			;
2116   0AA3 74 96       	cmp	a, ch_env_node+x		;
2117   0AA5 D0 08       	bne	_env_nsustain			;
2118   0AA7             ;-----------------------------------------------;
2119   0AA7 6F          	ret					;
2120   0AA8             ;-----------------------------------------------;
2121   0AA8             _env_setfade:
2122   0AA8             ;-----------------------------------------------;
2123   0AA8 F4 7E       	mov	a, ch_flags+x			;
2124   0AAA 08 20       	or	a, #CF_FADE			;
2125   0AAC D4 7E       	mov	ch_flags+x, a			;
2126   0AAE 6F          	ret					;
2127   0AAF             ;-----------------------------------------------;
2128   0AAF             _env_nsustain:					;
2129   0AAF             ;-----------------------------------------------;
2130   0AAF BB 9E       	inc	ch_env_tick+x			; increment tick
2131   0AB1 F4 9E       	mov	a, ch_env_tick+x		;
2132   0AB3 64 03       	cmp	a, m1+1				; exit if < duration
2133   0AB5 90 24       	bcc	_env_exit			;
2134   0AB7             ;-----------------------------------------------;
2135   0AB7 E8 00       	mov	a, #0				; reset tick
2136   0AB9 D4 9E       	mov	ch_env_tick+x, a		;
2137   0ABB             						;
2138   0ABB 8D 07       	mov	y, #INS_ENVLOOPEND		; turn on FADE if keyoff and loop
2139   0ABD F7 C5       	mov	a, [p_instr]+y			;
2140   0ABF 68 FF       	cmp	a, #255				;
2141   0AC1 F0 19       	beq	_env_no_loop			;
2142   0AC3 F4 7E       	mov	a, ch_flags+x			;	
2143   0AC5 28 10       	and	a, #CF_KEYON			;	
2144   0AC7 D0 06       	bne	_env_no_fade			;	
2145   0AC9 F4 7E       	mov	a, ch_flags+x			;
2146   0ACB 08 20       	or	a, #CF_FADE			;
2147   0ACD D4 7E       	mov	ch_flags+x, a			;
2148   0ACF             ;-----------------------------------------------;
2149   0ACF             _env_no_fade:
2150   0ACF             ;-----------------------------------------------;
2151   0ACF F4 96       	mov	a, ch_env_node+x		; test for loop point
2152   0AD1             ;	mov	y, #INS_ENVLOOPEND		;
2153   0AD1 77 C5       	cmp	a, [p_instr]+y			;
2154   0AD3 D0 07       	bne	_env_loop_test			;
2155   0AD5             ;-----------------------------------------------;
2156   0AD5 8D 06       	mov	y, #INS_ENVLOOPST		;
2157   0AD7 F7 C5       	mov	a, [p_instr]+y			;
2158   0AD9 D4 96       	mov	ch_env_node+x, a		;
2159   0ADB             ;-----------------------------------------------;
2160   0ADB             _env_exit:
2161   0ADB             ;-----------------------------------------------;
2162   0ADB 6F          	ret					;
2163   0ADC             ;-----------------------------------------------;
2164   0ADC             _env_loop_test:
2165   0ADC             _env_no_loop:
2166   0ADC             ;-----------------------------------------------;
2167   0ADC F4 96       	mov	a, ch_env_node+x		;
2168   0ADE 80          	setc					; suspicious...
2169   0ADF B8 04 00    	sbc	m0, #4				;
2170   0AE2 64 00       	cmp	a, m0				; test for envelope end
2171   0AE4 F0 C2       	beq	_env_setfade			;
2172   0AE6 60          	clrc					; increment node
2173   0AE7 88 04       	adc	a, #4				;
2174   0AE9 D4 96       	mov	ch_env_node+x, a		;
2175   0AEB 6F          	ret					;
2176   0AEC             ;-----------------------------------------------;
2177   0AEC             
2178   0AEC             ;*****************************************************************************
2179   0AEC             Channel_ProcessVolumeCommand:
2180   0AEC             ;*****************************************************************************
2181   0AEC F4 2E       	mov	a, ch_volume+x
2182   0AEE FB 5E       	mov	y, ch_vcmd+x
2183   0AF0 CB 00       	mov	m0, y
2184   0AF2 3F F8 0A    	call	do_vcmd
2185   0AF5 D4 2E       	mov	ch_volume+x, a
2186   0AF7 6F          	ret
2187   0AF8             
2188   0AF8             do_vcmd:
2189   0AF8 AD 41       	cmp	y, #65
2190   0AFA 90 19       	bcc	vcmd_setvol
2191   0AFC AD 4B       	cmp	y, #75
2192   0AFE 90 1C       	bcc	vcmd_finevolup
2193   0B00 AD 55       	cmp	y, #85
2194   0B02 90 29       	bcc	vcmd_finevoldown
2195   0B04 AD 5F       	cmp	y, #95
2196   0B06 90 34       	bcc	vcmd_volup
2197   0B08 AD 69       	cmp	y, #105
2198   0B0A 90 3A       	bcc	vcmd_voldown
2199   0B0C AD C1       	cmp	y, #193
2200   0B0E B0 04       	bcs	vcmd_invalid
2201   0B10 AD 80       	cmp	y, #128
2202   0B12 B0 3C       	bcs	vcmd_pan
2203   0B14             vcmd_invalid:
2204   0B14 6F          	ret
2205   0B15             
2206   0B15             ;-----------------------------------------------------------------------------
2207   0B15             ; 00-64 set volume
2208   0B15             ;-----------------------------------------------------------------------------
2209   0B15             vcmd_setvol:
2210   0B15 78 00 0F    	cmp	mod_tick, #0		; a = volume
2211   0B18 D0 01       	bne	exit_vcmd		;
2212   0B1A DD          	mov	a, y			;
2213   0B1B             exit_vcmd:				;
2214   0B1B 6F          	ret				;
2215   0B1C             
2216   0B1C             ;-----------------------------------------------------------------------------
2217   0B1C             ; 65-74 fine vol up
2218   0B1C             ;-----------------------------------------------------------------------------
2219   0B1C             vcmd_finevolup:
2220   0B1C B8 41 00    	sbc	m0, #65			; m0 = rate (-1)
2221   0B1F 78 00 0F    	cmp	mod_tick, #0
2222   0B22 D0 F7       	bne	exit_vcmd
2223   0B24             
2224   0B24             _vcmd_add_sat64:
2225   0B24 84 00       	adc	a, m0			; a += rate (+1)
2226   0B26 68 41       	cmp	a, #DEFAULT_VOL_SAT+1	; saturate to DEFAULT_VOL_SAT
2227   0B28 90 F1       	bcc	exit_vcmd		;
2228   0B2A E8 40       	mov	a, #DEFAULT_VOL_SAT	;
2229   0B2C 6F          	ret				;
2230   0B2D             
2231   0B2D             ;-----------------------------------------------------------------------------
2232   0B2D             ; 75-84 fine vol down
2233   0B2D             ;-----------------------------------------------------------------------------
2234   0B2D             vcmd_finevoldown:
2235   0B2D B8 4A 00    	sbc	m0, #75-1		; m0 = rate [carry is cleared]
2236   0B30 78 00 0F    	cmp	mod_tick, #0
2237   0B33 D0 E6       	bne	exit_vcmd
2238   0B35             
2239   0B35             _vcmd_sub_sat0:	
2240   0B35 A4 00       	sbc	a, m0			; a -= rate
2241   0B37 B0 E2       	bcs	exit_vcmd		; saturate lower bound to 0
2242   0B39 E8 00       	mov	a, #0			;
2243   0B3B 6F          	ret				;
2244   0B3C             
2245   0B3C             ;-----------------------------------------------------------------------------
2246   0B3C             ; 85-94 vol up
2247   0B3C             ;-----------------------------------------------------------------------------
2248   0B3C             vcmd_volup:
2249   0B3C B8 55 00    	sbc	m0, #85			; m0 = rate (-1)
2250   0B3F 78 00 0F    	cmp	mod_tick, #0
2251   0B42 F0 D7       	beq	exit_vcmd
2252   0B44 2F DE       	bra	_vcmd_add_sat64
2253   0B46             
2254   0B46             ;-----------------------------------------------------------------------------
2255   0B46             ; 95-104 vol down
2256   0B46             ;-----------------------------------------------------------------------------
2257   0B46             vcmd_voldown:
2258   0B46 B8 5E 00    	sbc	m0, #95-1
2259   0B49 78 00 0F    	cmp	mod_tick, #0
2260   0B4C F0 CD       	beq	exit_vcmd
2261   0B4E 2F E5       	bra	_vcmd_sub_sat0
2262   0B50             
2263   0B50             ;-----------------------------------------------------------------------------
2264   0B50             ; 128-192 set pan
2265   0B50             ;-----------------------------------------------------------------------------
2266   0B50             vcmd_pan:
2267   0B50 78 00 0F    	cmp	mod_tick, #0		; set panning
2268   0B53 D0 C6       	bne	exit_vcmd		;
2269   0B55 2D          	push	a			;
2270   0B56 DD          	mov	a, y			;
2271   0B57 A8 80       	sbc	a, #128			;
2272   0B59 3F 9B 10    	call	Command_SetPanningb	; Bugfix by KungFuFurby 12/20/15
2273   0B5C AE          	pop	a			;
2274   0B5D 6F          	ret				;
2275   0B5E             
2276   0B5E             command_memory_map:	
2277   0B5E 000000102020	.byte 00h, 00h, 00h, 10h, 20h, 20h, 30h, 70h, 00h
2277   0B64 307000
2278   0B67             	;       A    B    C    D    E    F    G    H    I
2279   0B67 401010001050	.byte 40h, 10h, 10h, 00h, 10h, 50h, 10h, 80h, 70h
2279   0B6D 108070
2280   0B70             	;       J    K    L    M    N    O    P    Q    R
2281   0B70 600070001000	.byte 60h, 00h, 70h, 00h, 10h, 00h, 70h, 00h
2281   0B76 7000
2282   0B78             	;       S    T    U    V    W    X    Y    Z
2283   0B78             
2284   0B78             ;********************************************************
2285   0B78             Channel_ProcessCommandMemory:
2286   0B78             ;********************************************************
2287   0B78 FB 66       	mov	y, ch_command+x
2288   0B7A F6 5D 0B    	mov	a, !command_memory_map-1+y
2289   0B7D F0 3E       	beq	_cpc_quit		; 0 = no memory!
2290   0B7F D8 00       	mov	m0, x
2291   0B81 60          	clrc
2292   0B82 84 00       	adc	a, m0
2293   0B84 FD          	mov	y, a
2294   0B85 AD 70       	cmp	y, #70h			; <7 : single param
2295   0B87 90 27       	bcc	_cpcm_single		;
2296   0B89             ;--------------------------------------------------------
2297   0B89             _cpcm_double:				; >=7: double param
2298   0B89             ;--------------------------------------------------------
2299   0B89 F6 F0 02    	mov	a, !PatternMemory-10h+y
2300   0B8C C4 00       	mov	m0, a
2301   0B8E F4 6E       	mov	a, ch_param+x
2302   0B90 68 10       	cmp	a, #10h
2303   0B92 90 09       	bcc	_cpcmd_h_clr
2304   0B94             
2305   0B94 2D          	push	a
2306   0B95             
2307   0B95 38 0F 00    	and	m0, #0Fh
2308   0B98 04 00       	or	a, m0
2309   0B9A C4 00       	mov	m0, a
2310   0B9C             
2311   0B9C AE          	pop	a
2312   0B9D             
2313   0B9D             _cpcmd_h_clr:
2314   0B9D 28 0F       	and	a, #0Fh
2315   0B9F F0 07       	beq	_cpcmd_l_clr
2316   0BA1 38 F0 00    	and	m0, #0F0h
2317   0BA4 04 00       	or	a, m0
2318   0BA6 C4 00       	mov	m0, a
2319   0BA8             
2320   0BA8             _cpcmd_l_clr:
2321   0BA8 E4 00       	mov	a, m0
2322   0BAA D4 6E       	mov	ch_param+x, a
2323   0BAC D6 F0 02    	mov	!PatternMemory-10h+y, a
2324   0BAF 6F          	ret
2325   0BB0             
2326   0BB0             ;--------------------------------------------------------
2327   0BB0             _cpcm_single:
2328   0BB0             ;--------------------------------------------------------
2329   0BB0 F4 6E       	mov	a, ch_param+x
2330   0BB2 F0 04       	beq	_cpcms_clear
2331   0BB4 D6 F0 02    	mov	!PatternMemory-10h+y, a
2332   0BB7 6F          	ret
2333   0BB8             
2334   0BB8             _cpcms_clear:
2335   0BB8 F6 F0 02    	mov	a, !PatternMemory-10h+y
2336   0BBB D4 6E       	mov	ch_param+x, a	
2337   0BBD             
2338   0BBD             _cpc_quit:
2339   0BBD 6F          	ret
2340   0BBE             
2341   0BBE             ;********************************************************
2342   0BBE             Channel_ProcessCommand:
2343   0BBE             ;********************************************************
2344   0BBE F4 66       	mov	a, ch_command+x		; exit if cmd = 0 
2345   0BC0 F0 FB       	beq	_cpc_quit		;
2346   0BC2             
2347   0BC2 78 00 0F    	cmp	mod_tick, #0		; process MEMORY on t0
2348   0BC5 D0 03       	bne	_cpc_nott0		;
2349   0BC7 3F 78 0B    	call	Channel_ProcessCommandMemory
2350   0BCA             
2351   0BCA             _cpc_nott0:
2352   0BCA FB 66       	mov	y, ch_command+x		; setup jump address
2353   0BCC F6 DE 0B    	mov	a, !CMD_JUMPTABLE_L-1+y	;
2354   0BCF C5 DD 0B    	mov	!cpc_jump+1, a		;
2355   0BD2 F6 F8 0B    	mov	a, !CMD_JUMPTABLE_H-1+y	;
2356   0BD5 C5 DE 0B    	mov	!cpc_jump+2, a		;
2357   0BD8 F4 6E       	mov	a, ch_param+x		; preload data
2358   0BDA EB 0F       	mov	y, mod_tick		;
2359   0BDC             
2360   0BDC             	;-------------------------------
2361   0BDC             	; a = param
2362   0BDC             	; y = tick
2363   0BDC             	; Z = tick=0
2364   0BDC             	;-------------------------------
2365   0BDC             	
2366   0BDC             cpc_jump:
2367   0BDC 5F 11 00    	jmp	$0011
2368   0BDF             	
2369   0BDF             ; note: tasm has some kind of bug that removes the 16th character
2370   0BDF             ; in macro args (...?)
2371   0BDF             ;-----------------------------------------------------------------------
2372   0BDF             CMD_JUMPTABLE_L:
2373   0BDF             ;-----------------------------------------------------------------------
2374   0BDF 13          	.byte	LBYTE(Command_SetSpeed)			; Axx
2375   0BE0 1C          	.byte	LBYTE(Command_SetPositXion)		; Bxx
2376   0BE1 25          	.byte	LBYTE(Command_PatternBXreak)		; Cxx
2377   0BE2 37          	.byte	LBYTE(Command_VolumeSlXide)		; Dxy
2378   0BE3 45          	.byte	LBYTE(Command_PitchSliXdeDown)		; Exy
2379   0BE4 60          	.byte	LBYTE(Command_PitchSliXdeUp)		; Fxy
2380   0BE5 78          	.byte	LBYTE(Command_GlissandXo)		; Gxx
2381   0BE6 B5          	.byte	LBYTE(Command_Vibrato)			; Hxy
2382   0BE7 C1          	.byte	LBYTE(SCommand_Null)			; Ixx Tremor
2383   0BE8 B6          	.byte	LBYTE(Command_Arpeggio)			; Jxy
2384   0BE9 30          	.byte	LBYTE(Command_VolumeSlXideVibrato)	; Kxy
2385   0BEA C1          	.byte	LBYTE(SCommand_Null)			; Lxx VolumeSlideGliss
2386   0BEB EA          	.byte	LBYTE(Command_SetChannXelVolume)	; Mxx
2387   0BEC F6          	.byte	LBYTE(Command_ChannelVoolumeSlide)	; Nxx
2388   0BED C1          	.byte	LBYTE(SCommand_Null)			; Oxx SampleOffset
2389   0BEE 05          	.byte	LBYTE(Command_PanningSXlide)		; Pxy
2390   0BEF 14          	.byte	LBYTE(Command_RetriggeXrNote)		; Qxy
2391   0BF0 B0          	.byte	LBYTE(Command_Tremolo)			; Rxt
2392   0BF1 A8          	.byte	LBYTE(Command_Extended)			; Sxy
2393   0BF2 53          	.byte	LBYTE(Command_Tempo)			; Txy
2394   0BF3 C1          	.byte	LBYTE(SCommand_Null)			; Uxx Fine Vibrato
2395   0BF4 7E          	.byte	LBYTE(Command_SetGlobaXlVolume)		; Vxx
2396   0BF5 89          	.byte	LBYTE(Command_GlobalVoXlumeSlide)	; Wxy
2397   0BF6 95          	.byte	LBYTE(Command_SetPanniXng)		; Xxx
2398   0BF7 AB          	.byte	LBYTE(Command_PanbrellXo)		; Yxx
2399   0BF8 1D          	.byte	LBYTE(Command_SetParamXeter)		; Zxx
2400   0BF9             ;-----------------------------------------------------------------------
2401   0BF9             CMD_JUMPTABLE_H:
2402   0BF9             ;-----------------------------------------------------------------------
2403   0BF9 0C          	.byte	HBYTE(Command_SetSpeed)			; Axx
2404   0BFA 0C          	.byte	HBYTE(Command_SetPositXion)		; Bxx
2405   0BFB 0C          	.byte	HBYTE(Command_PatternBXreak)		; Cxx
2406   0BFC 0C          	.byte	HBYTE(Command_VolumeSlXide)		; Dxy
2407   0BFD 0C          	.byte	HBYTE(Command_PitchSliXdeDown)		; Exy
2408   0BFE 0C          	.byte	HBYTE(Command_PitchSliXdeUp)		; Fxy
2409   0BFF 0C          	.byte	HBYTE(Command_GlissandXo)		; Gxx
2410   0C00 0C          	.byte	HBYTE(Command_Vibrato)			; Hxy
2411   0C01 0E          	.byte	HBYTE(SCommand_Null)			; Ixx Tremor
2412   0C02 0D          	.byte	HBYTE(Command_Arpeggio)			; Jxy
2413   0C03 0C          	.byte	HBYTE(Command_VolumeSlXideVibrato)	; Kxx
2414   0C04 0E          	.byte	HBYTE(SCommand_Null)			; Lxx VolumeSlideGliss
2415   0C05 0D          	.byte	HBYTE(Command_SetChannXelVolume)	; Mxx
2416   0C06 0D          	.byte	HBYTE(Command_ChannelVoolumeSlide)	; Nxx
2417   0C07 0E          	.byte	HBYTE(SCommand_Null)			; Oxx VolumeSlideGliss
2418   0C08 0E          	.byte	HBYTE(Command_PanningSXlide)		; Pxy
2419   0C09 0E          	.byte	HBYTE(Command_RetriggeXrNote)		; Qxy
2420   0C0A 0C          	.byte	HBYTE(Command_Tremolo)			; Rxy
2421   0C0B 0E          	.byte	HBYTE(Command_Extended)			; Sxy
2422   0C0C 10          	.byte	HBYTE(Command_Tempo)			; Txy
2423   0C0D 0E          	.byte	HBYTE(SCommand_Null)			; Uxx FineVibrato
2424   0C0E 10          	.byte	HBYTE(Command_SetGlobaXlVolume)		; Vxx
2425   0C0F 10          	.byte	HBYTE(Command_GlobalVoXlumeSlide)	; Wxy
2426   0C10 10          	.byte	HBYTE(Command_SetPanniXng)		; Xxx
2427   0C11 0C          	.byte	HBYTE(Command_PanbrellXo)		; Yxx
2428   0C12 11          	.byte	HBYTE(Command_SetParamXeter)		; Zxx
2429   0C13             
2430   0C13             ;=======================================================================
2431   0C13             Command_SetSpeed:
2432   0C13             ;=======================================================================
2433   0C13 D0 06       	bne	cmd_exit1			;on tick0:
2434   0C15 68 00       	cmp	a, #0				; if param != 0
2435   0C17 F0 02       	beq	cmd_exit1			; mod_speed = param
2436   0C19 C4 12       	mov	mod_speed, a			;
2437   0C1B             cmd_exit1:					;
2438   0C1B 6F          	ret					;
2439   0C1C             						;
2440   0C1C             ;=======================================================================
2441   0C1C             Command_SetPosition:
2442   0C1C             ;=======================================================================
2443   0C1C D0 FD       	bne	cmd_exit1			;on tick0:
2444   0C1E             Command_SetPosition2:				;
2445   0C1E C4 1C       	mov	pattjump_index, a		; set jump index
2446   0C20 18 80 E7    	or	special, #SF_PATTERNJUMP	;
2447   0C23 2F 07       	bra	_enable_pattjump		;
2448   0C25             						;
2449   0C25             ;=======================================================================
2450   0C25             Command_PatternBreak:
2451   0C25             ;=======================================================================
2452   0C25             	; nonzero params are not supported	;
2453   0C25 D0 F4       	bne	cmd_exit1			;on tick0:
2454   0C27 FA 0E 1C    	mov	pattjump_index, mod_position	; index = position+1
2455   0C2A AB 1C       	inc	pattjump_index			;
2456   0C2C             _enable_pattjump:				;
2457   0C2C 09 80 E7    	or	special, SF_PATTERNJUMP		; enable pattern jump(break)
2458   0C2F 6F          	ret					;
2459   0C30             						;
2460   0C30             ;=======================================================================
2461   0C30             Command_VolumeSlideVibrato:
2462   0C30             ;=======================================================================
2463   0C30 3F B5 0C    	call	Command_Vibrato
2464   0C33             
2465   0C33 F4 6E       	mov	a, ch_param+x
2466   0C35 EB 0F       	mov	y, mod_tick
2467   0C37             ;=======================================================================
2468   0C37             Command_VolumeSlide:				; Dxy
2469   0C37             ;=======================================================================
2470   0C37 FA BF 00    	mov	m0, t_volume			; slide volume
2471   0C3A 8F 40 01    	mov	m0+1, #DEFAULT_VOL_SAT		;
2472   0C3D 3F E9 12    	call	DoVolumeSlide			;
2473   0C40 C4 BF       	mov	t_volume, a			;
2474   0C42 D4 2E       	mov	ch_volume+x, a			;
2475   0C44 6F          	ret					;
2476   0C45             
2477   0C45             ;=======================================================================
2478   0C45             Command_PitchSlideDown:
2479   0C45             ;=======================================================================
2480   0C45 3F 54 13    	call	PitchSlide_Load			; m0 = slide amount
2481   0C48 BA C1       	movw	ya, t_pitch			; pitch -= m0
2482   0C4A 9A 00       	subw	ya, m0				;
2483   0C4C 30 07       	bmi	_exx_zero			; saturate lower to 0
2484   0C4E DA C1       _ps:	movw	t_pitch, ya			;
2485   0C50 D4 1E       	mov	ch_pitch_l+x, a			;
2486   0C52 DB 26       	mov	ch_pitch_h+x, y			;
2487   0C54 6F          	ret					;
2488   0C55             ;---------------------------------------------------------------------
2489   0C55             _exx_zero:
2490   0C55             ;---------------------------------------------------------------------
2491   0C55 E8 00       	mov	a, #0				; zero pitch
2492   0C57 8D 00       	mov	y, #0				;
2493   0C59 DA C1       	movw	t_pitch, ya			;
2494   0C5B D4 1E       	mov	ch_pitch_l+x, a			;
2495   0C5D D4 26       	mov	ch_pitch_h+x, a			;
2496   0C5F 6F          	ret					;
2497   0C60             ;=======================================================================
2498   0C60             Command_PitchSlideUp:
2499   0C60             ;=======================================================================
2500   0C60 3F 54 13    	call	PitchSlide_Load			; m0 = slide amount
2501   0C63 BA C1       	movw	ya, t_pitch			;
2502   0C65 7A 00       	addw	ya, m0				;
2503   0C67 AD 1A       	cmp	y, #01Ah			;
2504   0C69 B0 02       	bcs	_fxx_max			; clamp upper bound to 1A00H
2505   0C6B 2F E1       	bra	_ps
2506   0C6D             ;-----------------------------------------------------------------------
2507   0C6D             _fxx_max:
2508   0C6D             ;-----------------------------------------------------------------------
2509   0C6D 8D 1A       	mov	y, #01Ah			; max pitch
2510   0C6F E8 00       	mov	a, #0				;
2511   0C71 DA C1       	movw	t_pitch, ya			;
2512   0C73 D4 1E       	mov	ch_pitch_l+x, a			;
2513   0C75 DB 26       	mov	ch_pitch_h+x, y			;
2514   0C77 6F          	ret					;
2515   0C78             ;=======================================================================
2516   0C78             Command_Glissando:
2517   0C78             ;=======================================================================
2518   0C78 F0 A1       	beq	cmd_exit1			; on tickn:
2519   0C7A             
2520   0C7A 3F 60 13    	call	Amult4_M0			; m0 = xx*4 (slide amount)
2521   0C7D             
2522   0C7D F4 4E       	mov	a, ch_note+x			; m1 = slide target
2523   0C7F 8F 00 02    	mov	m1, #0				;
2524   0C82 5C          	lsr	a				;
2525   0C83 6B 02       	ror	m1				;
2526   0C85 5C          	lsr	a				;
2527   0C86 6B 02       	ror	m1				;
2528   0C88 C4 03       	mov	m1+1, a				;
2529   0C8A             
2530   0C8A BA C1       	movw	ya, t_pitch			; test slide direction
2531   0C8C 5A 02       	cmpw	ya, m1				;
2532   0C8E 90 0F       	bcc	_gxx_slideup
2533   0C90             ;-----------------------------------------------
2534   0C90             _gxx_slidedown:
2535   0C90             ;-----------------------------------------------
2536   0C90 9A 00       	subw	ya, m0				; subtract xx*4 from pitch
2537   0C92 30 13       	bmi	_gxx_set			; saturate lower to target pitch
2538   0C94 5A 02       	cmpw	ya, m1				;
2539   0C96 90 0F       	bcc	_gxx_set			;
2540   0C98             _gxx_set2:					;
2541   0C98 DA C1       	movw	t_pitch, ya			;
2542   0C9A D4 1E       	mov	ch_pitch_l+x, a			;
2543   0C9C DB 26       	mov	ch_pitch_h+x, y			;
2544   0C9E 6F          	ret					;
2545   0C9F             ;-----------------------------------------------
2546   0C9F             _gxx_slideup:
2547   0C9F             ;-----------------------------------------------
2548   0C9F 7A 00       	addw	ya, m0				; add xx*4 to pitch
2549   0CA1 5A 02       	cmpw	ya, m1				; saturate upper to target pitch
2550   0CA3 B0 02       	bcs	_gxx_set			;
2551   0CA5 2F F1       	bra	_gxx_set2			;
2552   0CA7             ;-----------------------------------------------
2553   0CA7             _gxx_set:					; pitch = target
2554   0CA7             ;-----------------------------------------------
2555   0CA7 BA 02       	movw	ya, m1				;
2556   0CA9 2F ED       	bra	_gxx_set2			;
2557   0CAB             
2558   0CAB             ;=======================================================================
2559   0CAB             Command_Panbrello:
2560   0CAB             ;=======================================================================
2561   0CAB 18 40 E8    	or	special_mode, #SM_PANBRELLO
2562   0CAE 2F 08       	bra	_skip_pan_trem_disable
2563   0CB0             
2564   0CB0             ;=======================================================================
2565   0CB0             Command_Tremolo:
2566   0CB0             ;=======================================================================
2567   0CB0 18 80 E8    	or	special_mode, #SM_TREMOLO
2568   0CB3 2F 03       	bra	_skip_pan_trem_disable
2569   0CB5             ;=======================================================================
2570   0CB5             Command_Vibrato:
2571   0CB5             ;=======================================================================
2572   0CB5 38 FF E8    	and	special_mode, #~SM_TREMOLO|~SM_PANBRELLO
2573   0CB8             ;-----------------------------------------------
2574   0CB8             _skip_pan_trem_disable:
2575   0CB8             ;-----------------------------------------------
2576   0CB8 E8 70       	mov	a, #70h
2577   0CBA D8 00       	mov	m0, x
2578   0CBC 60          	clrc
2579   0CBD 84 00       	adc	a, m0
2580   0CBF FD          	mov	y, a
2581   0CC0 F6 F0 02    	mov	a, !PatternMemory-10h+y
2582   0CC3             
2583   0CC3 C4 00       	mov	m0, a
2584   0CC5 38 0F 00    	and	m0, #0Fh
2585   0CC8             
2586   0CC8 5C          	lsr	a				; cmem += x*4
2587   0CC9 5C          	lsr	a				;
2588   0CCA 28 3C       	and	a, #111100b			;
2589   0CCC 60          	clrc					;
2590   0CCD 94 46       	adc	a, ch_cmem+x			;
2591   0CCF D4 46       	mov	ch_cmem+x, a			;
2592   0CD1             
2593   0CD1 FD          	mov	y, a				; a = sine[cmem]
2594   0CD2             
2595   0CD2 F4 AE       	mov	a, ch_vib_wav+x
2596   0CD4 C4 02       	mov	m1, a				; m1 = waveform value
2597   0CD6 F4 A6       	mov	a, ch_env_vib+x			; a = vibrato waveform type
2598   0CD8             
2599   0CD8 68 01       	cmp	a, #1
2600   0CDA F0 26       	beq	_hxx_ramp_down
2601   0CDC 68 02       	cmp	a, #2
2602   0CDE F0 30       	beq	_hxx_sq
2603   0CE0 68 04       	cmp	a, #4
2604   0CE2 F0 32       	beq	_hxx_tri
2605   0CE4 68 05       	cmp	a, #5
2606   0CE6 F0 4C       	beq	_hxx_ramp_up
2607   0CE8 68 06       	cmp	a, #6
2608   0CEA F0 34       	beq	_hxx_sq2
2609   0CEC             ;-----------------------------------------------
2610   0CEC             _hxx_sine:					; S30
2611   0CEC             ;-----------------------------------------------;
2612   0CEC AD 80       	cmp	y, #80h				;
2613   0CEE B0 05       	bcs	_hxx_sine_neg			;
2614   0CF0 F6 90 19    	mov	a, !IT_FineSineData+y		; copy positive values
2615   0CF3 2F 53       	bra	_hxx_bpl			;
2616   0CF5             						;
2617   0CF5             _hxx_sine_neg:					;
2618   0CF5 DD          	mov	a, y				; IT_FineSineData is only 128
2619   0CF6 60          	clrc					; bytes long, once the end is
2620   0CF7 A8 7F       	sbc	a, #127				; reached reset to the start
2621   0CF9 FD          	mov	y, a				;
2622   0CFA F6 90 19    	mov	a, !IT_FineSineData+y		; copy positive values
2623   0CFD 48 FF       	eor	a, #0FFh			; ...and make them negative
2624   0CFF BC          	inc	a				;
2625   0D00 2F 46       	bra	_hxx_bpl			;
2626   0D02             ;----------------------------------------------- 
2627   0D02             _hxx_ramp_down:					; S31
2628   0D02             ;-----------------------------------------------
2629   0D02 AD 00       	cmp	y, #0
2630   0D04 D0 03       	bne	_hxx_chk_ramp
2631   0D06             _hxx_res_ramp:
2632   0D06 8F 40 02    	mov	m1, #DEFAULT_RAMP_POS
2633   0D09             _hxx_chk_ramp:
2634   0D09 78 BF 02    	cmp	m1, #DEFAULT_RAMP_NEG
2635   0D0C F0 F8       	beq	_hxx_res_ramp
2636   0D0E             _hxx_dec_ramp:
2637   0D0E 2F 34       	bra	_dec_m1_hxx_bpl
2638   0D10             ;-----------------------------------------------
2639   0D10             _hxx_sq:					; S32
2640   0D10             ;-----------------------------------------------
2641   0D10 AD 80       	cmp	y, #80h
2642   0D12 B0 18       	bcs	_hxx_neg_sq
2643   0D14 2F 1A       	bra	_hxx_pos_sq
2644   0D16             ;-----------------------------------------------
2645   0D16             ;_hxx_rand:					; S33 - unimplemented
2646   0D16             ;-----------------------------------------------
2647   0D16             _hxx_tri:					; S34
2648   0D16             ;-----------------------------------------------
2649   0D16 AD C0       	cmp	y, #0C0h
2650   0D18 B0 26       	bcs	_inc_m1_hxx_bpl
2651   0D1A AD 40       	cmp	y, #040h
2652   0D1C B0 26       	bcs	_dec_m1_hxx_bpl
2653   0D1E 2F 20       	bra	_inc_m1_hxx_bpl
2654   0D20             ;-----------------------------------------------
2655   0D20             _hxx_sq2:					; S36
2656   0D20             ;-----------------------------------------------
2657   0D20 AD C0       	cmp	y, #0C0h
2658   0D22 B0 0C       	bcs	_hxx_pos_sq
2659   0D24 AD 80       	cmp	y, #80h
2660   0D26 B0 04       	bcs	_hxx_neg_sq
2661   0D28 AD 40       	cmp	y, #40h
2662   0D2A B0 04       	bcs	_hxx_pos_sq
2663   0D2C             ;-----------------------------------------------
2664   0D2C             _hxx_neg_sq:
2665   0D2C             ;-----------------------------------------------
2666   0D2C E8 00       	mov	a, #DEFAULT_SQ_NEG
2667   0D2E 2F 18       	bra	_hxx_bpl
2668   0D30             ;-----------------------------------------------
2669   0D30             _hxx_pos_sq:
2670   0D30             ;-----------------------------------------------
2671   0D30 E8 40       	mov	a, #DEFAULT_SQ_POS
2672   0D32 2F 14       	bra	_hxx_bpl
2673   0D34             ;-----------------------------------------------
2674   0D34             _hxx_ramp_up:					; S35
2675   0D34             ;-----------------------------------------------
2676   0D34 AD 00       	cmp	y, #0
2677   0D36 D0 03       	bne	_hex_chk_ramp2
2678   0D38             _hex_res_ramp2:
2679   0D38 8F BF 02    	mov	m1, #DEFAULT_RAMP_NEG
2680   0D3B             _hex_chk_ramp2:
2681   0D3B 78 40 02    	cmp	m1, #DEFAULT_RAMP_POS
2682   0D3E F0 F8       	beq	_hex_res_ramp2
2683   0D40             ;-----------------------------------------------
2684   0D40             _inc_m1_hxx_bpl:
2685   0D40             ;-----------------------------------------------
2686   0D40 AB 02       	inc	m1
2687   0D42 2F 02       	bra	_hxx_bpl_movm1a
2688   0D44             ;-----------------------------------------------
2689   0D44             _dec_m1_hxx_bpl:
2690   0D44             ;-----------------------------------------------
2691   0D44 8B 02       	dec	m1
2692   0D46             ;-----------------------------------------------
2693   0D46             _hxx_bpl_movm1a:
2694   0D46             ;-----------------------------------------------
2695   0D46 E4 02       	mov	a, m1
2696   0D48             ;-----------------------------------------------
2697   0D48             _hxx_bpl:
2698   0D48             ;-----------------------------------------------
2699   0D48 D4 AE       	mov	ch_vib_wav+x, a
2700   0D4A 10 2A       	bpl	_hxx_plus
2701   0D4C             ;-----------------------------------------------
2702   0D4C             _hxx_neg:
2703   0D4C             ;-----------------------------------------------
2704   0D4C 48 FF       	eor	a, #255
2705   0D4E BC          	inc	a
2706   0D4F             
2707   0D4F 3F A9 0D    	call	_hxx_mulya
2708   0D52 C4 00       	mov	m0, a
2709   0D54 E3 E8 0B    	bbs7	special_mode, _hxx_subw_volume	; SM_TREMOLO
2710   0D57 C3 E8 12    	bbs6	special_mode, _hxx_subw_panning	; SM_PANBRELLO
2711   0D5A             ;-----------------------------------------------
2712   0D5A             _hxx_subw:
2713   0D5A             ;-----------------------------------------------
2714   0D5A BA C1       	movw	ya, t_pitch
2715   0D5C 9A 00       	subw	ya, m0
2716   0D5E 30 34       	bmi	_hxx_zero
2717   0D60 2F 21       	bra	_store_pitch
2718   0D62             ;-----------------------------------------------
2719   0D62             _hxx_subw_volume:
2720   0D62             ;-----------------------------------------------
2721   0D62 E4 BF       	mov	a, t_volume
2722   0D64 8D 00       	mov	y, #0
2723   0D66 9A 00       	subw	ya, m0
2724   0D68 30 31       	bmi	_hxx_zvolume
2725   0D6A 2F 1A       	bra	_store_volume
2726   0D6C             ;-----------------------------------------------
2727   0D6C             _hxx_subw_panning:
2728   0D6C             ;-----------------------------------------------
2729   0D6C E4 C0       	mov	a, t_panning
2730   0D6E 8D 00       	mov	y, #0
2731   0D70 9A 00       	subw	ya, m0
2732   0D72 30 2E       	bmi	_hxx_zpanning
2733   0D74 2F 17       	bra	_store_panning
2734   0D76             ;-----------------------------------------------
2735   0D76             _hxx_plus:
2736   0D76             ;-----------------------------------------------
2737   0D76 3F A9 0D    	call	_hxx_mulya
2738   0D79 EB 01       	mov	y, m0+1
2739   0D7B E3 E8 08    	bbs7	special_mode, _store_volume	; SM_TREMOLO
2740   0D7E C3 E8 0C    	bbs6	special_mode, _store_panning	; SM_PANBRELLO
2741   0D81             _hxx_addw:
2742   0D81 7A C1       	addw	ya, t_pitch			; warning: might break something on highest note
2743   0D83             ;-----------------------------------------------
2744   0D83             _store_pitch:
2745   0D83             ;-----------------------------------------------
2746   0D83 DA C1       	movw	t_pitch, ya
2747   0D85 6F          	ret
2748   0D86             ;-----------------------------------------------
2749   0D86             _store_volume:
2750   0D86             ;-----------------------------------------------
2751   0D86 60          	clrc
2752   0D87 84 BF       	adc	a, t_volume
2753   0D89 C4 BF       	mov	t_volume, a
2754   0D8B 2F 11       	bra	_disable_tremolo
2755   0D8D             ;-----------------------------------------------
2756   0D8D             _store_panning:
2757   0D8D             ;-----------------------------------------------
2758   0D8D 60          	clrc
2759   0D8E 84 C0       	adc	a, t_panning
2760   0D90 C4 C0       	mov	t_panning, a
2761   0D92 2F 11       	bra	_disable_panbrello
2762   0D94             ;-----------------------------------------------
2763   0D94             _hxx_zero:
2764   0D94             ;-----------------------------------------------
2765   0D94 8F 00 C1    	mov	t_pitch, #0
2766   0D97 8F 00 C2    	mov	t_pitch+1, #0
2767   0D9A 6F          	ret
2768   0D9B             ;-----------------------------------------------
2769   0D9B             _hxx_zvolume:
2770   0D9B             ;-----------------------------------------------
2771   0D9B 8F 00 BF    	mov	t_volume, #0
2772   0D9E             ;-----------------------------------------------
2773   0D9E             _disable_tremolo:
2774   0D9E             ;-----------------------------------------------
2775   0D9E 38 7F E7    	and	special, #~SM_TREMOLO
2776   0DA1 6F          	ret
2777   0DA2             ;-----------------------------------------------
2778   0DA2             _hxx_zpanning:
2779   0DA2             ;-----------------------------------------------
2780   0DA2 8F 00 C0    	mov	t_panning, #0
2781   0DA5             ;-----------------------------------------------
2782   0DA5             _disable_panbrello:
2783   0DA5             ;-----------------------------------------------
2784   0DA5 38 BF E7    	and	special, #~SM_PANBRELLO
2785   0DA8 6F          	ret
2786   0DA9             ;-----------------------------------------------
2787   0DA9             _hxx_mulya:
2788   0DA9             ;-----------------------------------------------
2789   0DA9 EB 00       	mov	y, m0
2790   0DAB CF          	mul	ya
2791   0DAC CB 01       	mov	m0+1, y
2792   0DAE 8D 04       	mov	y, #4
2793   0DB0             ;-----------------------------------------------
2794   0DB0             _hxx_div:
2795   0DB0             ;-----------------------------------------------
2796   0DB0 4B 01       	lsr	m0+1
2797   0DB2 7C          	ror	a
2798   0DB3 FE FB       	dbnz	y, _hxx_div
2799   0DB5 6F          	ret
2800   0DB6             
2801   0DB6             ;=======================================================================
2802   0DB6             ;Command_Tremor:					; unimplemented
2803   0DB6             ;=======================================================================
2804   0DB6             ;	ret
2805   0DB6             
2806   0DB6             ;=======================================================================
2807   0DB6             Command_Arpeggio:
2808   0DB6             ;=======================================================================
2809   0DB6 D0 05       	bne	_jxx_other
2810   0DB8 E8 00       	mov	a, #0
2811   0DBA D4 46       	mov	ch_cmem+x, a
2812   0DBC 6F          	ret
2813   0DBD             
2814   0DBD             _jxx_other:
2815   0DBD F4 46       	mov	a, ch_cmem+x
2816   0DBF BC          	inc	a
2817   0DC0 68 03       	cmp	a, #3
2818   0DC2 90 02       	bcc	_jxx_less3
2819   0DC4 E8 00       	mov	a, #0
2820   0DC6             _jxx_less3:
2821   0DC6 D4 46       	mov	ch_cmem+x, a
2822   0DC8 68 01       	cmp	a, #1
2823   0DCA F0 03       	beq	_jxx_x
2824   0DCC B0 17       	bcs	_jxx_y
2825   0DCE 6F          	ret
2826   0DCF             
2827   0DCF F4 6E       _jxx_x:	mov	a, ch_param+x
2828   0DD1             
2829   0DD1             _jxx_add:
2830   0DD1 28 F0       	and	a, #0F0h
2831   0DD3 1C          	asl	a
2832   0DD4 8F 00 01    	mov	m0+1, #0
2833   0DD7 2B 01       	rol	m0+1
2834   0DD9 1C          	asl	a
2835   0DDA 2B 01       	rol	m0+1
2836   0DDC C4 00       	mov	m0, a
2837   0DDE BA C1       	movw	ya, t_pitch
2838   0DE0 7A 00       	addw	ya, m0
2839   0DE2 DA C1       	movw	t_pitch, ya
2840   0DE4 6F          	ret
2841   0DE5             
2842   0DE5 F4 6E       _jxx_y:	mov	a, ch_param+x
2843   0DE7 9F          	xcn	a
2844   0DE8 2F E7       	bra	_jxx_add
2845   0DEA             
2846   0DEA             ;=======================================================================
2847   0DEA             Command_SetChannelVolume:
2848   0DEA             ;=======================================================================
2849   0DEA D0 09       	bne	cmd_exit2			; on tick0:
2850   0DEC 68 80       	cmp	a, #80h				;
2851   0DEE D0 03       	bne	_set_cv				;
2852   0DF0 F5 A3 1A    	mov	a, !MODULE+MOD_CV+x		;
2853   0DF3             _set_cv:
2854   0DF3 D4 36       	mov	ch_cvolume+x, a
2855   0DF5             cmd_exit2:
2856   0DF5 6F          	ret
2857   0DF6             
2858   0DF6             ;=======================================================================
2859   0DF6             Command_ChannelVolumeSlide:
2860   0DF6             ;=======================================================================
2861   0DF6 F4 36       	mov	a, ch_cvolume+x			; slide channel volume
2862   0DF8 C4 00       	mov	m0, a				; 
2863   0DFA 8F 40 01    	mov	m0+1, #64			;
2864   0DFD F4 6E       	mov	a, ch_param+x			;
2865   0DFF 3F E9 12    	call	DoVolumeSlide			;
2866   0E02 D4 36       	mov	ch_cvolume+x, a			;
2867   0E04 6F          	ret					;
2868   0E05             
2869   0E05             ;=======================================================================
2870   0E05             ;Command_SampleOffset:
2871   0E05             ;=======================================================================
2872   0E05             	;bne	cmd_exit2			; on tick0:
2873   0E05             	;mov	t_sampoff, a			;   set sampoff data
2874   0E05             	;ret					;
2875   0E05             
2876   0E05             ;=======================================================================
2877   0E05             Command_PanningSlide:
2878   0E05             ;=======================================================================
2879   0E05 9F          	xcn	a
2880   0E06 FA C0 00    	mov	m0, t_panning			; slide panning
2881   0E09 8F 40 01    	mov	m0+1, #64			;
2882   0E0C 3F E9 12    	call	DoVolumeSlide			;
2883   0E0F C4 C0       	mov	t_panning, a			;
2884   0E11 D4 3E       	mov	ch_panning+x, a			;
2885   0E13 6F          	ret					;
2886   0E14             
2887   0E14             ;=======================================================================
2888   0E14             Command_RetriggerNote:
2889   0E14             ;=======================================================================
2890   0E14 28 0F       	and	a, #0Fh				; m0 = y == 0 ? 1 : x
2891   0E16 D0 01       	bne	_crn_x1				;
2892   0E18 BC          	inc	a				;
2893   0E19             _crn_x1:					;	
2894   0E19 C4 00       	mov	m0, a				;
2895   0E1B F4 46       	mov	a, ch_cmem+x			;if cmem is 0:
2896   0E1D D0 05       	bne	_crn_cmem_n0			;  cmem = m0
2897   0E1F E4 00       	mov	a, m0				;
2898   0E21             _crn_count_ret:					;
2899   0E21 D4 46       	mov	ch_cmem+x, a			;
2900   0E23 6F          	ret					;
2901   0E24             						;	
2902   0E24             _crn_cmem_n0:					;else:
2903   0E24 9C          	dec	a				; dec cmem until 0
2904   0E25 D0 FA       	bne	_crn_count_ret			;
2905   0E27             						;RETRIGGER NOTE:
2906   0E27 E4 00       	mov	a, m0				; cmem = m0
2907   0E29 D4 46       	mov	ch_cmem+x, a			;
2908   0E2B             	;----------------------------------------
2909   0E2B             	; affect volume
2910   0E2B             	;----------------------------------------
2911   0E2B F4 6E       	mov	a, ch_param+x
2912   0E2D 9F          	xcn	a
2913   0E2E 28 0F       	and	a, #0Fh
2914   0E30 C4 02       	mov	m1, a
2915   0E32 1C          	asl	a
2916   0E33 4D          	push	x
2917   0E34 5D          	mov	x, a
2918   0E35 E4 BF       	mov	a, t_volume
2919   0E37 60          	clrc
2920   0E38 1F 3B 0E    	jmp	[RNVTABLE+x]
2921   0E3B             
2922   0E3B             
2923   0E3B             ;-----------------------------------------------------------------------------
2924   0E3B             RNVTABLE:
2925   0E3B             ;-----------------------------------------------------------------------------
2926   0E3B 750E5B0E5E0E	.word	rnv_0,rnv_1,rnv_2,rnv_3,rnv_4,rnv_5,rnv_6,rnv_7
2926   0E41 620E660E6A0E6E0E740E
2927   0E4B 750E770E7A0E	.word	rnv_8,rnv_9,rnv_A,rnv_B,rnv_C,rnv_D,rnv_E,rnv_F
2927   0E51 7E0E820E860E8A0E900E
2928   0E5B             ;-----------------------------------------------------------------------------
2929   0E5B             
2930   0E5B             
2931   0E5B 9C          rnv_1:	dec	a
2932   0E5C 2F 35       	bra	_rnv_sat0
2933   0E5E A8 01       rnv_2:	sbc	a, #2-1
2934   0E60 2F 31       	bra	_rnv_sat0
2935   0E62 A8 03       rnv_3:	sbc	a, #4-1
2936   0E64 2F 2D       	bra	_rnv_sat0
2937   0E66 A8 07       rnv_4:	sbc	a, #8-1
2938   0E68 2F 29       	bra	_rnv_sat0
2939   0E6A A8 0F       rnv_5:	sbc	a, #16-1
2940   0E6C 2F 25       	bra	_rnv_sat0
2941   0E6E 8D AA       rnv_6:	mov	y, #170
2942   0E70 CF          	mul	ya
2943   0E71 DD          	mov	a, y
2944   0E72 2F 2B       	bra	_rnv_set
2945   0E74 5C          rnv_7:	lsr	a
2946   0E75             rnv_8:
2947   0E75 2F 28       rnv_0:	bra	_rnv_set
2948   0E77 BC          rnv_9:	inc	a
2949   0E78 2F 1F       	bra	_rnv_sat64
2950   0E7A 88 02       rnv_A:	adc	a, #2
2951   0E7C 2F 1B       	bra	_rnv_sat64
2952   0E7E 88 04       rnv_B:	adc	a, #4
2953   0E80 2F 17       	bra	_rnv_sat64
2954   0E82 88 08       rnv_C:	adc	a, #8
2955   0E84 2F 13       	bra	_rnv_sat64
2956   0E86 88 10       rnv_D:	adc	a, #16
2957   0E88 2F 0F       	bra	_rnv_sat64
2958   0E8A 8D 03       rnv_E:	mov	y, #3
2959   0E8C CF          	mul	ya
2960   0E8D 5C          	lsr	a
2961   0E8E 2F 09       	bra	_rnv_sat64
2962   0E90             
2963   0E90 1C          rnv_F:	asl	a
2964   0E91 2F 06       	bra	_rnv_sat64
2965   0E93             
2966   0E93             _rnv_sat0:
2967   0E93 10 0A       	bpl	_rnv_set
2968   0E95 E8 00       	mov	a, #0
2969   0E97 2F 06       	bra	_rnv_set
2970   0E99             
2971   0E99             _rnv_sat64:
2972   0E99 68 41       	cmp	a, #65
2973   0E9B 90 02       	bcc	_rnv_set
2974   0E9D E8 40       	mov	a, #64
2975   0E9F             _rnv_set:
2976   0E9F CE          	pop	x
2977   0EA0 C4 BF       	mov	t_volume, a
2978   0EA2 D4 2E       	mov	ch_volume+x, a
2979   0EA4 18 80 C3    	or	t_flags, #TF_START
2980   0EA7             
2981   0EA7 6F          	ret
2982   0EA8             
2983   0EA8             ;=======================================================================
2984   0EA8             Command_Extended:
2985   0EA8             ;=======================================================================
2986   0EA8 9F          	xcn	a				; setup jump to:
2987   0EA9 28 0F       	and	a, #0Fh				; CmdExTab[x]
2988   0EAB FD          	mov	y, a				;
2989   0EAC F6 C2 0E    	mov	a, !CmdExTab_L+y		;
2990   0EAF C5 BF 0E    	mov	!cmdex_jmp+1, a			;
2991   0EB2 F6 D2 0E    	mov	a, !CmdExTab_H+y		;
2992   0EB5 C5 C0 0E    	mov	!cmdex_jmp+2, a			;
2993   0EB8             
2994   0EB8 F4 6E       	mov	a, ch_param+x			; a = y
2995   0EBA 28 0F       	and	a, #0Fh				; y = tick
2996   0EBC EB 0F       	mov	y, mod_tick			; z = tick0
2997   0EBE             
2998   0EBE             cmdex_jmp:
2999   0EBE 5F 0B 0A    	jmp	0a0bh
3000   0EC1             
3001   0EC1             ;=======================================================================
3002   0EC1             SCommand_Null:
3003   0EC1             ;=======================================================================
3004   0EC1 6F          	ret
3005   0EC2             
3006   0EC2             CmdExTab_L:
3007   0EC2 E5          	.byte	LBYTE(SCommand_EPN)		; S0x 0-4 Echo; 5-8 Pitch, 9-c Noise
3008   0EC3 AD          	.byte	LBYTE(SCommand_NoiseFrXeq1)	; S1x
3009   0EC4 AA          	.byte	LBYTE(SCommand_NoiseFrXeq2)	; S2x
3010   0EC5 48          	.byte	LBYTE(SCommand_VibWav_XFilter)	; S3x 0-6 Vib. waveform / Filter
3011   0EC6 08          	.byte	LBYTE(SCommand_TremWavX_Noise)	; S4x 0-3 Trem. waveform / Noise
3012   0EC7 A2          	.byte	LBYTE(SCommand_PanWav_XNoise)	; S5x 0-3 Panb. waveform / Noise
3013   0EC8 C1           	.byte	LBYTE(SCommand_Null)
3014   0EC9 BE          	.byte	LBYTE(SCommand_ResetFiXlterOpt)	; S7[E|F]
3015   0ECA CF          	.byte	LBYTE(SCommand_Panning)		; S8x
3016   0ECB F6          	.byte	LBYTE(SCommand_SoundCoXntrol)	; S9x
3017   0ECC C1          	.byte	LBYTE(SCommand_Null)
3018   0ECD C1          	.byte	LBYTE(SCommand_Null)
3019   0ECE 2E          	.byte	LBYTE(SCommand_NoteCut)		; SCx
3020   0ECF 39          	.byte	LBYTE(SCommand_NoteDelXay)	; SDx
3021   0ED0 C1          	.byte	LBYTE(SCommand_Null)
3022   0ED1 48          	.byte	LBYTE(SCommand_Cue)		; SFx
3023   0ED2             CmdExTab_H:
3024   0ED2 0E          	.byte	HBYTE(SCommand_EPN)
3025   0ED3 0F          	.byte	HBYTE(SCommand_NoiseFrXeq1)
3026   0ED4 0F          	.byte	HBYTE(SCommand_NoiseFrXeq2)
3027   0ED5 0F          	.byte	HBYTE(SCommand_VibWav_XFilter)
3028   0ED6 12          	.byte	HBYTE(SCommand_TremWavX_Noise)
3029   0ED7 0F          	.byte	HBYTE(SCommand_PanWav_XNoise)
3030   0ED8 0E          	.byte	HBYTE(SCommand_Null)
3031   0ED9 0F          	.byte	HBYTE(SCommand_ResetFiXlterOpt)
3032   0EDA 0F          	.byte	HBYTE(SCommand_Panning)
3033   0EDB 0F          	.byte	HBYTE(SCommand_SoundCoXntrol)
3034   0EDC 0E          	.byte	HBYTE(SCommand_Null)
3035   0EDD 0E          	.byte	HBYTE(SCommand_Null)
3036   0EDE 10          	.byte	HBYTE(SCommand_NoteCut)
3037   0EDF 10          	.byte	HBYTE(SCommand_NoteDelXay)
3038   0EE0 0E          	.byte	HBYTE(SCommand_Null)
3039   0EE1 10          	.byte	HBYTE(SCommand_Cue)
3040   0EE2             
3041   0EE2             ;-----------------------------------------------------------------------
3042   0EE2             _jmp_resetdelayechofb:
3043   0EE2             ;-----------------------------------------------------------------------
3044   0EE2 5F 02 11    	jmp	Reset_Delay_Echo_Feedback
3045   0EE5             ;=======================================================================
3046   0EE5             SCommand_EPN:	; Echo / Pitchmod / Noise ; This part added by KFF for noise & pitch modulation
3047   0EE5             ;=======================================================================
3048   0EE5 68 0D       	cmp	a, #0dh
3049   0EE7 B0 F9       	bcs	_jmp_resetdelayechofb
3050   0EE9 68 09       	cmp	a, #9			; do we need to do something with noise?
3051   0EEB 90 08       	bcc	_pitch_mod
3052   0EED 8F 3D F2    	mov	SPC_DSPA, #DSP_NON
3053   0EF0 60          	clrc
3054   0EF1 A8 07       	sbc	a, #7
3055   0EF3 2F 0F       	bra	skip_dsp_eon		; preserve DSP_NON in SPC_DSPA
3056   0EF5             ;-----------------------------------------------------------------------
3057   0EF5             _pitch_mod:
3058   0EF5             ;-----------------------------------------------------------------------
3059   0EF5 68 05       	cmp	a, #5			; do we need to do something with pitchmod?
3060   0EF7 90 08       	bcc	SCommand_Echo
3061   0EF9 8F 2D F2    	mov	SPC_DSPA, #DSP_PMON
3062   0EFC 60          	clrc
3063   0EFD A8 03       	sbc	a, #3
3064   0EFF 2F 03       	bra	skip_dsp_eon		; preserve DSP_PMON in SPC_DSPA
3065   0F01             ;=======================================================================
3066   0F01             SCommand_Echo:
3067   0F01             ;=======================================================================
3068   0F01 8F 4D F2    	mov	SPC_DSPA, #DSP_EON
3069   0F04             skip_dsp_eon:
3070   0F04 68 01       	cmp	a, #1
3071   0F06 F0 0D       	beq	_sce_enable_one
3072   0F08 90 0A       	bcc	cmd_exit3
3073   0F0A 68 03       	cmp	a, #3
3074   0F0C 90 0F       	bcc	_sce_disable_one
3075   0F0E F0 17       	beq	_sce_enable_all
3076   0F10 68 04       	cmp	a, #4
3077   0F12 F0 17       	beq	_sce_disable_all
3078   0F14             
3079   0F14             cmd_exit3:
3080   0F14 6F          	ret
3081   0F15             ;-----------------------------------------------------------------------
3082   0F15             _sce_enable_one:
3083   0F15             ;-----------------------------------------------------------------------
3084   0F15 F5 30 08    	mov	a, !BITS+x
3085   0F18 04 F3       	or	a, SPC_DSPD
3086   0F1A C4 F3       	mov	SPC_DSPD, a
3087   0F1C 6F          	ret
3088   0F1D             ;-----------------------------------------------------------------------
3089   0F1D             _sce_disable_one:
3090   0F1D             ;-----------------------------------------------------------------------
3091   0F1D F5 30 08    	mov	a, !BITS+x
3092   0F20 48 FF       	eor	a, #255
3093   0F22 24 F3       	and	a, SPC_DSPD
3094   0F24 C4 F3       	mov	SPC_DSPD, a
3095   0F26 6F          	ret
3096   0F27             ;-----------------------------------------------------------------------
3097   0F27             _sce_enable_all:
3098   0F27             ;-----------------------------------------------------------------------
3099   0F27 8F FF F3    	mov	SPC_DSPD, #0FFh
3100   0F2A 6F          	ret
3101   0F2B             ;-----------------------------------------------------------------------
3102   0F2B             _sce_disable_all:
3103   0F2B             ;-----------------------------------------------------------------------
3104   0F2B 8F 00 F3    	mov	SPC_DSPD, #0
3105   0F2E 6F          	ret
3106   0F2F             
3107   0F2F             ;-----------------------------------------------------------------------
3108   0F2F             _jmp_resetall:
3109   0F2F             ;-----------------------------------------------------------------------
3110   0F2F 5F D2 12    	jmp	ResetAll
3111   0F32             ;-----------------------------------------------------------------------
3112   0F32             _set_echowriteflag:
3113   0F32             ;-----------------------------------------------------------------------
3114   0F32 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
3115   0F35 68 08       	cmp	a, #08h
3116   0F37 F0 04       	beq	_enable_echo_write
3117   0F39             ;-----------------------------------------------------------------------
3118   0F39             _disable_echo_write:
3119   0F39             ;-----------------------------------------------------------------------
3120   0F39 18 20 F3    	or	SPC_DSPD, #FLG_ECEN
3121   0F3C 6F          	ret
3122   0F3D             ;-----------------------------------------------------------------------
3123   0F3D             _enable_echo_write:
3124   0F3D             ;-----------------------------------------------------------------------
3125   0F3D 38 DF F3    	and	SPC_DSPD, #~FLG_ECEN
3126   0F40 6F          	ret
3127   0F41             ;-----------------------------------------------------------------------
3128   0F41             
3129   0F41             ;=======================================================================
3130   0F41             SetWaveform:
3131   0F41             ;=======================================================================
3132   0F41 D4 A6       	mov	ch_env_vib+x, a
3133   0F43 E8 00       	mov	a, #0
3134   0F45 D4 AE       	mov	ch_vib_wav+x, a
3135   0F47 6F          	ret
3136   0F48             ;=======================================================================
3137   0F48             SCommand_VibWav_Filter:				; S3x
3138   0F48             ;=======================================================================
3139   0F48 68 07       	cmp	a, #07h
3140   0F4A 90 F5       	bcc	SetWaveform
3141   0F4C 68 09       	cmp	a, #09h
3142   0F4E 90 E2       	bcc	_set_echowriteflag
3143   0F50 F0 DD       	beq	_jmp_resetall
3144   0F52             
3145   0F52 68 0A       	cmp	a, #0Ah
3146   0F54 F0 14       	beq	Command_SetFilterDefault
3147   0F56 68 0B       	cmp	a, #0Bh
3148   0F58 F0 14       	beq	Command_SetFilterBand
3149   0F5A 68 0C       	cmp	a, #0Ch
3150   0F5C F0 14       	beq	Command_SetFilterHigh
3151   0F5E 68 0D       	cmp	a, #0Dh
3152   0F60 F0 14       	beq	Command_SetFilterLow
3153   0F62 68 0E       	cmp	a, #0Eh
3154   0F64 F0 14       	beq	Command_SetFilterCust1
3155   0F66 68 0F       	cmp	a, #0Fh
3156   0F68 F0 14       	beq	Command_SetFilterCust2
3157   0F6A             ;------------------------------------------------------------------------
3158   0F6A             Command_SetFilterDefault:			; 0Ah
3159   0F6A             ;------------------------------------------------------------------------
3160   0F6A 8D 07       	mov	y, #7
3161   0F6C 2F 12       	bra	_set_special_filter
3162   0F6E             ;------------------------------------------------------------------------
3163   0F6E             Command_SetFilterBand:
3164   0F6E             ;------------------------------------------------------------------------
3165   0F6E 8D 0F       	mov	y, #15
3166   0F70 2F 0E       	bra	_set_special_filter
3167   0F72             ;------------------------------------------------------------------------
3168   0F72             Command_SetFilterHigh:
3169   0F72             ;------------------------------------------------------------------------
3170   0F72 8D 17       	mov	y, #23
3171   0F74 2F 0A       	bra	_set_special_filter
3172   0F76             ;------------------------------------------------------------------------
3173   0F76             Command_SetFilterLow:
3174   0F76             ;------------------------------------------------------------------------
3175   0F76 8D 1F       	mov	y, #31
3176   0F78 2F 06       	bra	_set_special_filter
3177   0F7A             ;------------------------------------------------------------------------
3178   0F7A             Command_SetFilterCust1:
3179   0F7A             ;------------------------------------------------------------------------
3180   0F7A 8D 27       	mov	y, #39
3181   0F7C 2F 02       	bra	_set_special_filter
3182   0F7E             ;------------------------------------------------------------------------
3183   0F7E             Command_SetFilterCust2:
3184   0F7E             ;------------------------------------------------------------------------
3185   0F7E 8D 2F       	mov	y, #47
3186   0F80             
3187   0F80             _set_special_filter:
3188   0F80             
3189   0F80 33 E8 03    	bbc1	special_mode, _skip_reset		; test SM_3AFRESET
3190   0F83             
3191   0F83 3F D8 12    	call	ResetFbFirVol
3192   0F86             _skip_reset:
3193   0F86 80          	setc
3194   0F87 8F 7F F2    	mov	SPC_DSPA, #DSP_C7
3195   0F8A             
3196   0F8A 4D          	push	x
3197   0F8B             
3198   0F8B CD 07       	mov	x, #7
3199   0F8D             _copy_special_coef:
3200   0F8D F6 A4 10    	mov	a, !FILTER+y
3201   0F90 13 E8 04    	bbc0	special_mode, _csc			; test SM_FILTERSWEEP
3202   0F93 D4 D3       	mov	filter_values+x, a
3203   0F95 2F 05       	bra	_cscdy
3204   0F97 C4 F3       _csc:	mov	SPC_DSPD, a
3205   0F99 B8 10 F2    	sbc	SPC_DSPA, #10h
3206   0F9C DC          _cscdy:	dec	y
3207   0F9D 1D          	dec	x
3208   0F9E 10 ED       	bpl	_copy_special_coef
3209   0FA0             
3210   0FA0 CE          	pop	x
3211   0FA1             
3212   0FA1 6F          	ret
3213   0FA2             
3214   0FA2             ;=======================================================================
3215   0FA2             SCommand_PanWav_Noise:				; S5x
3216   0FA2             ;=======================================================================
3217   0FA2             	;cmp	a, #4
3218   0FA2             	;bcc	SCommand_VibWav_Filter
3219   0FA2 18 08 E7    	or	special, #SF_NOISESWEEP
3220   0FA5 60          	clrc
3221   0FA6 88 10       	adc	a, #10h
3222   0FA8 2F 06       	bra	_noise_mov
3223   0FAA             ;=======================================================================
3224   0FAA             SCommand_NoiseFreq2:				; S2x
3225   0FAA             ;=======================================================================
3226   0FAA 60          	clrc
3227   0FAB 88 10       	adc	a, #10h
3228   0FAD             ;=======================================================================
3229   0FAD             SCommand_NoiseFreq1:				; S1x
3230   0FAD             ;=======================================================================
3231   0FAD 38 F7 E7    	and	special, #~SF_NOISESWEEP
3232   0FB0             _noise_mov:
3233   0FB0 C4 DF       	mov	noise_value, a
3234   0FB2 C4 DD       	mov	noise_sweep_start, a
3235   0FB4             ;-----------------------------------------------------------------------
3236   0FB4             SCommand_NoiseFreq1b:
3237   0FB4             ;-----------------------------------------------------------------------
3238   0FB4 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
3239   0FB7 38 E0 F3    	and	SPC_DSPD, #FLG_NOISE
3240   0FBA 09 DF F3    	or	SPC_DSPD, noise_value
3241   0FBD 6F          	ret
3242   0FBE             
3243   0FBE             ;=======================================================================
3244   0FBE             SCommand_ResetFilterOpt:			; S7x
3245   0FBE             ;=======================================================================
3246   0FBE 68 0E       	cmp	a, #0eh
3247   0FC0 F0 05       	beq	_cfs_reset_on
3248   0FC2 68 0F       	cmp	a, #0fh
3249   0FC4 F0 05       	beq	_cfs_reset_off
3250   0FC6 6F          	ret
3251   0FC7             
3252   0FC7             _cfs_reset_on:
3253   0FC7 18 02 E8    	or	special_mode, #SM_3AFRESET
3254   0FCA 6F          	ret
3255   0FCB             
3256   0FCB             _cfs_reset_off:
3257   0FCB 38 FD E8    	and	special_mode, #~SM_3AFRESET
3258   0FCE 6F          	ret
3259   0FCF             
3260   0FCF             ;=======================================================================
3261   0FCF             SCommand_Panning:				; S8x
3262   0FCF             ;=======================================================================
3263   0FCF D0 67       	bne	cmd_exit4			; on tick0:
3264   0FD1 C4 00       	mov	m0, a				; panning = (y << 2) + (y >> 2)
3265   0FD3 1C          	asl	a				;
3266   0FD4 1C          	asl	a				;
3267   0FD5 4B 00       	lsr	m0				;
3268   0FD7 4B 00       	lsr	m0				;
3269   0FD9 84 00       	adc	a, m0				;
3270   0FDB C4 C0       	mov	t_panning, a			;
3271   0FDD 3F 9B 10    	call	Command_SetPanningb		;
3272   0FE0 6F          	ret					;
3273   0FE1             
3274   0FE1             ;-----------------------------------------------------------------------
3275   0FE1             _command_setzmodechfs_r:			; S96
3276   0FE1             ;-----------------------------------------------------------------------
3277   0FE1 3F D8 12    	call	ResetFbFirVol
3278   0FE4             ;-----------------------------------------------------------------------
3279   0FE4             _command_setzmodechfs:				; S97
3280   0FE4             ;-----------------------------------------------------------------------
3281   0FE4 8F 07 E0    	mov	parameter_mode, #Z_CHFS
3282   0FE7             
3283   0FE7 4D          	push	x
3284   0FE8             
3285   0FE8 CD 07       	mov	x, #7
3286   0FEA E8 80       	mov	a, #80h
3287   0FEC D4 D3       _set80:	mov	filter_values+x, a
3288   0FEE 1D          	dec	x
3289   0FEF 10 FB       	bpl	_set80
3290   0FF1             
3291   0FF1 CE          	pop 	x
3292   0FF2             
3293   0FF2 18 01 E8    	or	special_mode, #SM_FILTERSWEEP
3294   0FF5 6F          	ret
3295   0FF6             ;-----------------------------------------------------------------------
3296   0FF6             
3297   0FF6             ;=======================================================================
3298   0FF6             SCommand_SoundControl:				; S9x
3299   0FF6             ;=======================================================================
3300   0FF6 D0 40       	bne	cmd_exit4
3301   0FF8 68 01       	cmp	a, #Z_SURROUND
3302   0FFA F0 15       	beq	_command_surround
3303   0FFC 68 02       	cmp	a, #Z_MUTE
3304   0FFE F0 1E       	beq	_command_mutechannel
3305   1000 68 03       	cmp	a, #Z_UNMUTE
3306   1002 F0 20       	beq	_command_unmutechannel
3307   1004 68 06       	cmp	a, #Z_CHFS_W_RES
3308   1006 F0 D9       	beq	_command_setzmodechfs_r
3309   1008 68 07       	cmp	a, #Z_CHFS
3310   100A F0 D8       	beq	_command_setzmodechfs
3311   100C 68 08       	cmp	a, #Z_EFIR
3312   100E B0 1B       	bcs	_command_setz
3313   1010 6F          	ret
3314   1011             
3315   1011             ;------------------------------------------------------------------------
3316   1011             _command_surround:				; S91
3317   1011             ;------------------------------------------------------------------------
3318   1011 F4 7E       	mov	a, ch_flags+x
3319   1013 08 40       	or	a, #CF_SURROUND
3320   1015 D4 7E       	mov	ch_flags+x, a
3321   1017 E8 20       	mov	a, #32
3322   1019 D4 3E       	mov	ch_panning+x, a
3323   101B C4 C0       	mov	t_panning, a
3324   101D 6F          	ret
3325   101E             ;------------------------------------------------------------------------
3326   101E             _command_mutechannel:				; S92
3327   101E             ;------------------------------------------------------------------------
3328   101E F4 7E       	mov	a, ch_flags+x
3329   1020 08 80       	or	a, #CF_MUTE
3330   1022 2F 04       	bra	_setcf
3331   1024             ;------------------------------------------------------------------------
3332   1024             _command_unmutechannel:				; S93
3333   1024             ;------------------------------------------------------------------------
3334   1024 F4 7E       	mov	a, ch_flags+x
3335   1026 28 7F       	and     a, #~CF_MUTE			; mask 7 bits
3336   1028 D4 7E       _setcf:	mov	ch_flags+x,a
3337   102A 6F          	ret
3338   102B             ;------------------------------------------------------------------------
3339   102B             _command_setz:					; S98
3340   102B             ;------------------------------------------------------------------------
3341   102B C4 E0       	mov	parameter_mode, a
3342   102D 6F          	ret
3343   102E             
3344   102E             ;=======================================================================
3345   102E             SCommand_NoteCut:				; SCx
3346   102E             ;=======================================================================
3347   102E 64 0F       	cmp	a, mod_tick			; on tick Y:
3348   1030 D0 06       	bne	cmd_exit4			;
3349   1032 E8 00       	mov	a, #0				; zero volume
3350   1034 C4 BF       	mov	t_volume, a			;
3351   1036 D4 2E       	mov	ch_volume+x, a			;
3352   1038             cmd_exit4:					;
3353   1038 6F          	ret					;
3354   1039             
3355   1039             ;=======================================================================
3356   1039             SCommand_NoteDelay:				; SDx
3357   1039             ;=======================================================================
3358   1039 64 0F       	cmp	a, mod_tick
3359   103B F0 07       	beq	scdelay_equ
3360   103D B0 01       	bcs	scdelay_lower
3361   103F 6F          	ret
3362   1040             ;-----------------------------------------------------------------------
3363   1040             scdelay_lower:
3364   1040             ;-----------------------------------------------------------------------
3365   1040 18 02 C3    	or	t_flags, #TF_DELAY
3366   1043 6F          	ret
3367   1044             ;-----------------------------------------------------------------------
3368   1044             scdelay_equ:
3369   1044             ;-----------------------------------------------------------------------
3370   1044 18 80 C3    	or	t_flags, #TF_START
3371   1047 6F          	ret
3372   1048             
3373   1048             ;=======================================================================
3374   1048             SCommand_Cue:					; SFx
3375   1048             ;=======================================================================
3376   1048 D0 EE       	bne	cmd_exit4			;on tick0:
3377   104A AB C7       	inc	STATUS				; increment CUE value
3378   104C 38 EF C7    	and	STATUS, #11101111b		; in status and send to
3379   104F FA C7 F6    	mov	SPC_PORT2, STATUS		; snes
3380   1052 6F          	ret					;
3381   1053             
3382   1053             ;=======================================================================
3383   1053             Command_Tempo:					; Txy
3384   1053             ;=======================================================================
3385   1053 68 20       	cmp	a, #20h
3386   1055 90 08       	bcc	_temposlide
3387   1057 68 50       	cmp	a, #80
3388   1059 B0 1C       	bcs	_change_tempo
3389   105B E8 50       	mov	a, #80
3390   105D 2F 18       	bra	_change_tempo
3391   105F             
3392   105F             _temposlide:
3393   105F 68 10       	cmp	a, #10h
3394   1061 90 07       	bcc	_txx_down
3395   1063 28 0F       	and	a, #0Fh
3396   1065 60          	clrc
3397   1066 84 11       	adc	a, mod_bpm
3398   1068 2F 0D       	bra	_change_tempo
3399   106A             
3400   106A             _txx_down:
3401   106A C4 00       	mov	m0, a
3402   106C E4 11       	mov	a, mod_bpm
3403   106E 80          	setc
3404   106F A4 00       	sbc	a, m0
3405   1071 68 50       	cmp	a, #80
3406   1073 B0 02       	bcs	_change_tempo
3407   1075 E8 50       	mov	a, #80
3408   1077             
3409   1077             _change_tempo:
3410   1077 3F F2 06    	call	Module_ChangeTempo
3411   107A 8F 07 F1    	mov	SPC_CONTROL, #%111
3412   107D 6F          	ret
3413   107E             
3414   107E             ;=======================================================================
3415   107E             ;Command_FineVibrato:				; unimplemented
3416   107E             ;=======================================================================
3417   107E             ;	ret
3418   107E             
3419   107E             ;=======================================================================
3420   107E             Command_SetGlobalVolume:
3421   107E             ;=======================================================================
3422   107E D0 B8       	bne	cmd_exit4			; set global volume on tick0
3423   1080 68 80       	cmp	a, #80h				;
3424   1082 90 02       	bcc	_vxx_nsat			; saturate to 80h
3425   1084 E8 80       	mov	a, #80h				;
3426   1086             _vxx_nsat:					;
3427   1086 C4 14       	mov	mod_gvol, a			;
3428   1088 6F          	ret					;
3429   1089             
3430   1089             ;=======================================================================
3431   1089             Command_GlobalVolumeSlide:
3432   1089             ;=======================================================================
3433   1089 FA 14 00    	mov	m0, mod_gvol			; slide global volume
3434   108C 8F 80 01    	mov	m0+1, #128			; max 128
3435   108F 3F E9 12    	call	DoVolumeSlide			;
3436   1092 C4 14       	mov	mod_gvol, a			;
3437   1094 6F          	ret					;
3438   1095             
3439   1095             ;=======================================================================
3440   1095             Command_SetPanning:
3441   1095             ;=======================================================================
3442   1095 D0 A1       	bne	cmd_exit4			; set panning on tick0	
3443   1097 5C          	lsr	a				;
3444   1098 5C          	lsr	a				;
3445   1099 C4 C0       	mov	t_panning, a			;
3446   109B             ;=======================================================================
3447   109B             Command_SetPanningb:
3448   109B             ;=======================================================================
3449   109B D4 3E       	mov	ch_panning+x, a			;
3450   109D F4 7E       	mov	a, ch_flags+x			;
3451   109F 28 BF       	and	a, #~CF_SURROUND		;
3452   10A1 D4 7E       	mov	ch_flags+x, a			;
3453   10A3 6F          	ret					;
3454   10A4             
3455   10A4             ;-----------------------------------------------------------------------
3456   10A4 7F0000000000FILTER:	.byte   $7f,$00,$00,$00,$00,$00,$00,$00
3456   10AA 0000
3457   10AC 343300D9E501	.byte   $34,$33,$00,$d9,$e5,$01,$fc,$eb ; bandpass
3457   10B2 FCEB
3458   10B4 58BFDBF0FE07	.byte   $58,$bf,$db,$f0,$fe,$07,$0c,$0c ; highpass
3458   10BA 0C0C
3459   10BC 0A17232912FE	.byte   $0a,$17,$23,$29,$12,$fe,$f3,$f9 ; lowpass
3459   10C2 F3F9
3460   10C4 F808111C1C11	.byte	$f8,$08,$11,$1c,$1c,$11,$08,$f8 ; ren and stimpy
3460   10CA 08F8
3461   10CC 7F7F7F7F7F7F	.byte	$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f	; star ocean/top
3461   10D2 7F7F
3462   10D4             ;-----------------------------------------------------------------------
3463   10D4             
3464   10D4             ;=======================================================================
3465   10D4             ResetEchoVolume:
3466   10D4             ;=======================================================================
3467   10D4 E5 B3 1A    	mov	a, !MODULE+MOD_EVOL
3468   10D7             ;=======================================================================
3469   10D7             ZCommand_EchoVolume:				; S9A Zxx
3470   10D7             ;=======================================================================
3471   10D7 68 80       	cmp	a, #80h
3472   10D9 F0 F9       	beq	ResetEchoVolume
3473   10DB C4 C8       	mov	current_evol, a
3474   10DD             ;-----------------------------------------------------------------------
3475   10DD             Command_EchoVolume2:
3476   10DD             ;-----------------------------------------------------------------------
3477   10DD 8F 2C F2    	mov	SPC_DSPA, #DSP_EVOL
3478   10E0 C4 F3       	mov	SPC_DSPD, a
3479   10E2 EC B3 1A    	mov	y, !MODULE+MOD_EVOL
3480   10E5 5E B4 1A    	cmp	y, !MODULE+MOD_EVOLR		; check for stereo
3481   10E8 F0 03       	beq	UpdateEchoVolume
3482   10EA 48 FF       	eor	a, #0ffh
3483   10EC BC          	inc	a
3484   10ED             ;-----------------------------------------------------------------------
3485   10ED             UpdateEchoVolume:
3486   10ED             ;-----------------------------------------------------------------------
3487   10ED 8F 3C F2    	mov	SPC_DSPA, #DSP_EVOLR
3488   10F0 C4 F3       	mov	SPC_DSPD, a
3489   10F2 6F          	ret
3490   10F3             
3491   10F3             ;=======================================================================
3492   10F3             ResetEchoFeedback:
3493   10F3             ;=======================================================================
3494   10F3 E5 B6 1A    	mov	a, !MODULE+MOD_EFB
3495   10F6 C4 CD       	mov	evol_fb, a
3496   10F8             ;=======================================================================
3497   10F8             ZCommand_EchoFeedback:			; S9B Zxx
3498   10F8             ;=======================================================================
3499   10F8 68 80       	cmp	a, #80h
3500   10FA F0 F7       	beq	ResetEchoFeedback
3501   10FC             ;=======================================================================
3502   10FC             Command_EchoFeedback2:
3503   10FC             ;=======================================================================
3504   10FC 8F 0D F2    	mov	SPC_DSPA, #DSP_EFB
3505   10FF C4 F3       	mov	SPC_DSPD, a
3506   1101 6F          	ret
3507   1102             
3508   1102             ;======================================================================= 
3509   1102             Reset_Delay_Echo_Feedback:			; S0x
3510   1102             ;=======================================================================
3511   1102 68 0F       	cmp	a, #0fh
3512   1104 F0 ED       	beq	ResetEchoFeedback
3513   1106 68 0E       	cmp	a, #0eh
3514   1108 F0 CA       	beq	ResetEchoVolume
3515   110A 68 0D       	cmp	a, #0dh
3516   110C F0 59       	beq	ResetEchoDelay
3517   110E 6F          	ret
3518   110F             
3519   110F             
3520   110F             ;-----------------------------------------------------------------------
3521   110F             ZCommand_ChFilterSweep:				; S97 Zxx
3522   110F             ;-----------------------------------------------------------------------
3523   110F 68 80       	cmp	a, #80h
3524   1111 F0 06       	beq	_disable_ch_filter_sweep
3525   1113 D4 D3       	mov	filter_values+x, a
3526   1115 18 01 E8    	or	special_mode, #SM_FILTERSWEEP
3527   1118 6F          	ret
3528   1119             
3529   1119             _disable_ch_filter_sweep:
3530   1119 38 FE E8    	and	special_mode, #~SM_FILTERSWEEP
3531   111C 6F          	ret
3532   111D             
3533   111D             ;=======================================================================
3534   111D             Command_SetParameter:
3535   111D             ;=======================================================================
3536   111D             	;cmp	parameter_mode, #Z_DIRECTGAIN	; S95
3537   111D             	;beq	Command_DirectGain
3538   111D 78 07 E0    	cmp	parameter_mode,	#Z_CHFS		; S9[6|7]
3539   1120 F0 ED       	beq	ZCommand_ChFilterSweep
3540   1122 78 08 E0    	cmp	parameter_mode, #Z_EFIR		; S98
3541   1125 F0 17       	beq	ZCommand_SetEFIR
3542   1127 78 09 E0    	cmp	parameter_mode, #Z_MVOL		; S99
3543   112A F0 46       	beq	ZCommand_MasterVolume
3544   112C 78 0A E0    	cmp	parameter_mode, #Z_EVOL		; S9A
3545   112F F0 A6       	beq	ZCommand_EchoVolume
3546   1131 78 0B E0    	cmp	parameter_mode, #Z_EFB		; S9B
3547   1134 F0 C2       	beq	ZCommand_EchoFeedback
3548   1136 78 0D E0    	cmp	parameter_mode, #Z_ETIMENOISE   ; S9D
3549   1139 F0 76       	beq	ZCommand_EVOLSweepNoise
3550   113B 5F 7B 12    	jmp	Command_SetParameter2
3551   113E             
3552   113E             ;=======================================================================
3553   113E             ;Command_DirectGain:
3554   113E             ;=======================================================================
3555   113E             	;ret
3556   113E             
3557   113E             ;=======================================================================
3558   113E             ZCommand_SetEFIR:				; S98 Zxx
3559   113E             ;=======================================================================
3560   113E 38 FE E8    	and	special_mode, #~SM_FILTERSWEEP	; disable channel filter sweep
3561   1141 68 80       	cmp	a, #80h				;
3562   1143 F0 0C       	beq	ResetEFIR			;
3563   1145 FD          	mov	y, a				;
3564   1146 F5 38 08    	mov	a, !CBITS+x			;
3565   1149 C4 F2       	mov	SPC_DSPA, a			;
3566   114B CB F3       	mov	SPC_DSPD, y			;
3567   114D 6F          	ret					;
3568   114E             ;-----------------------------------------------------------------------
3569   114E             ResetEFIR_FS:
3570   114E             ;-----------------------------------------------------------------------
3571   114E 38 FE E8    	and	special_mode, #~SM_FILTERSWEEP
3572   1151             ;=======================================================================
3573   1151             ResetEFIR:
3574   1151             ;=======================================================================
3575   1151 80          	setc					; copy FIR coefficients
3576   1152 8F 7F F2    	mov	SPC_DSPA, #DSP_C7		;
3577   1155             
3578   1155 4D          	push	x				;
3579   1156             
3580   1156 CD 07       	mov	x, #7				;
3581   1158             _copy_coef:					;
3582   1158 F5 B7 1A    	mov	a, !MODULE+MOD_EFIR+x		;
3583   115B D4 D3       	mov	filter_values+x, a		;
3584   115D C4 F3       	mov	SPC_DSPD, a			;
3585   115F B8 10 F2    	sbc	SPC_DSPA, #10h			;
3586   1162 1D          	dec	x				;
3587   1163 10 F3       	bpl	_copy_coef			;
3588   1165             
3589   1165 CE          	pop	x
3590   1166             
3591   1166 6F          	ret
3592   1167             
3593   1167             ;-----------------------------------------------------------------------
3594   1167             ResetEchoDelay:
3595   1167             ;-----------------------------------------------------------------------
3596   1167 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; defined in the header
3597   116A E5 B5 1A    	mov	a, !MODULE+MOD_EDL
3598   116D C4 F3       	mov	SPC_DSPD, a
3599   116F 6F          	ret
3600   1170             ;-----------------------------------------------------------------------
3601   1170             
3602   1170             ;=======================================================================
3603   1170             ResetMasterVolume:
3604   1170             ;=======================================================================
3605   1170 E8 50       	mov	a, #DEFAULT_MVOL
3606   1172             ;=======================================================================
3607   1172             ZCommand_MasterVolume:				; S99 Zxx
3608   1172             ;=======================================================================
3609   1172 68 80       	cmp	a, #80h
3610   1174 F0 FA       	beq	ResetMasterVolume
3611   1176             ;=======================================================================
3612   1176             Command_MasterVolume2:
3613   1176             ;=======================================================================
3614   1176 8F 0C F2    	mov	SPC_DSPA, #DSP_MVOL
3615   1179 C4 F3       	mov	SPC_DSPD, a
3616   117B 8F 1C F2    	mov	SPC_DSPA, #DSP_MVOLR
3617   117E C4 F3       	mov	SPC_DSPD, a
3618   1180 6F          	ret
3619   1181             
3620   1181             ;--------------------------------------------------------
3621   1181             WAVETABLE_L:
3622   1181             ;--------------------------------------------------------
3623   1181 10 22       	.byte	LBYTE(WTLoop1), LBYTE(WTLoop2)
3624   1183 34 46       	.byte	LBYTE(WTLoop3), LBYTE(WTLoop4)
3625   1185 58 6A       	.byte	LBYTE(WTLoop5), LBYTE(WTLoop6)
3626   1187 7C 8E       	.byte	LBYTE(WTLoop7), LBYTE(WTLoop8)
3627   1189             ;--------------------------------------------------------
3628   1189             
3629   1189             
3630   1189             ;--------------------------------------------------------
3631   1189             LUT_DIV3:
3632   1189 000000010101	.byte 0, 0, 0, 1, 1, 1, 2, 2, 2
3632   118F 020202
3633   1192 030303040404	.byte 3, 3, 3, 4, 4, 4, 5, 5, 5
3633   1198 050505
3634   119B 060606070707	.byte 6, 6, 6, 7, 7, 7, 8, 8, 8
3634   11A1 080808
3635   11A4 0909090A0A  	.byte 9, 9, 9,10,10
3636   11A9             ;--------------------------------------------------------
3637   11A9             
3638   11A9             
3639   11A9             
3640   11A9             ;-----------------------------------------------------------------------
3641   11A9             _set_swingmod:
3642   11A9             ;-----------------------------------------------------------------------
3643   11A9 80          	setc
3644   11AA A8 F0       	sbc	a, #0F0h
3645   11AC C4 E9       	mov	swing_tempo_mod, a
3646   11AE 5F 3E 12    	jmp	EnableSwingTempo
3647   11B1             ;=======================================================================
3648   11B1             ZCommand_EVOLSweepNoise:					; S9D Zxx
3649   11B1             ;=======================================================================
3650   11B1 68 20       	cmp	a, #20h
3651   11B3 90 32       	bcc	_set_noise_start
3652   11B5 68 40       	cmp	a, #40h
3653   11B7 90 34       	bcc	_set_noise_endmin
3654   11B9 68 60       	cmp	a, #60h
3655   11BB 90 36       	bcc	_set_noise_endmax
3656   11BD F0 3A       	beq	_disable_noise_sweep
3657   11BF 68 DA       	cmp	a, #0DAh
3658   11C1 90 3A       	bcc	_set_noise_time
3659   11C3 F0 5D       	beq	_set_noiseinc
3660   11C5 68 DB       	cmp	a, #0DBh
3661   11C7 F0 5E       	beq	_set_noisedec
3662   11C9 68 DC       	cmp	a, #0DCh
3663   11CB F0 61       	beq	_enable_noiserepeat
3664   11CD 68 DD       	cmp	a, #0DDh
3665   11CF F0 61       	beq	_disable_noiserepeat
3666   11D1 68 DE       	cmp	a, #0DEh
3667   11D3 F0 61       	beq	_enable_noisepingpong
3668   11D5 68 DF       	cmp	a, #0DFh
3669   11D7 F0 61       	beq	_disable_noisepingpong
3670   11D9 68 F0       	cmp	a, #0F0h
3671   11DB F0 6B       	beq	DisableSwingTempo
3672   11DD 68 F1       	cmp	a, #0F1h
3673   11DF B0 C8       	bcs	_set_swingmod
3674   11E1             
3675   11E1             _set_evol_time:
3676   11E1 80          	setc
3677   11E2 A8 E0       	sbc	a, #0E0h
3678   11E4 C4 D0       	mov	evol_time, a
3679   11E6 6F          	ret
3680   11E7             
3681   11E7             ;-----------------------------------------------------------------------
3682   11E7             _set_noise_start:
3683   11E7             ;-----------------------------------------------------------------------
3684   11E7 18 08 E7            or      special, #SF_NOISESWEEP
3685   11EA 5F B0 0F            jmp     _noise_mov
3686   11ED             ;-----------------------------------------------------------------------
3687   11ED             _set_noise_endmin:
3688   11ED             ;-----------------------------------------------------------------------
3689   11ED 80          	setc
3690   11EE A8 20       	sbc	a, #20h
3691   11F0 C4 DC       	mov	noise_sweep_endmin, a
3692   11F2 6F          	ret
3693   11F3             ;-----------------------------------------------------------------------
3694   11F3             _set_noise_endmax:
3695   11F3             ;-----------------------------------------------------------------------
3696   11F3 80          	setc
3697   11F4 A8 40       	sbc	a, #40h
3698   11F6 C4 DB       	mov	noise_sweep_endmax, a
3699   11F8 6F          	ret
3700   11F9             ;-----------------------------------------------------------------------
3701   11F9             _disable_noise_sweep:
3702   11F9             ;-----------------------------------------------------------------------
3703   11F9 38 F7 E7    	and	special, #~SF_NOISESWEEP
3704   11FC 6F          	ret
3705   11FD             ;-----------------------------------------------------------------------
3706   11FD             _set_noise_time:
3707   11FD             ;-----------------------------------------------------------------------
3708   11FD 80          	setc
3709   11FE A8 60       	sbc	a, #60h
3710   1200 68 38       	cmp	a, #38h
3711   1202 90 01       	bcc	_skip_rola
3712   1204 3C          	rol	a
3713   1205             _skip_rola:
3714   1205 C4 DE       	mov	 noise_time, a
3715   1207 6F          	ret
3716   1208             
3717   1208             ;=======================================================================
3718   1208             SCommand_TremWav_Noise:				; S4x
3719   1208             ;=======================================================================
3720   1208 FD          	mov	y, a
3721   1209 F6 12 12    	mov	a, !S4xTab_L+y
3722   120C C5 10 12    	mov	!s4xjmp+1, a
3723   120F             	;mov	a, !S4xTab_H+y
3724   120F 5F 0B 12    s4xjmp:	jmp	120bh
3725   1212             
3726   1212             S4xTab_L:
3727   1212 4F          	.byte	LBYTE(JmpSetWaveform)		; S40
3728   1213 4F          	.byte	LBYTE(JmpSetWaveform)		; S41
3729   1214 4F          	.byte	LBYTE(JmpSetWaveform)		; S42
3730   1215 4F          	.byte	LBYTE(JmpSetWaveform)		; S43
3731   1216 52          	.byte	LBYTE(EVOL_MaxMin)		; S44
3732   1217 59          	.byte	LBYTE(EVOL_MinMax)		; S45
3733   1218 3E          	.byte	LBYTE(EnableSwingTempo)		; S46
3734   1219 48          	.byte	LBYTE(DisableSwingTempxo)	; S47
3735   121A 74          	.byte	LBYTE(_enable_wavetablxe)	; S48
3736   121B 60          	.byte	LBYTE(_disable_wavetabxle)	; S49
3737   121C 27          	.byte	LBYTE(_set_noisedec)		; S4A
3738   121D 22          	.byte	LBYTE(_set_noiseinc)		; S4B
3739   121E 2E          	.byte	LBYTE(_enable_noiserepxeat)	; S4C
3740   121F 32          	.byte	LBYTE(_disable_noiserexpeat)	; S4D
3741   1220 36          	.byte	LBYTE(_enable_noisepinxgpong)	; S4E
3742   1221 3A          	.byte	LBYTE(_disable_noisepixngpong)	; S4F
3743   1222             
3744   1222             ;S4xTab_H:
3745   1222             	;.byte	HBYTE(JmpSetWaveform)		; S40
3746   1222             	;.byte	HBYTE(JmpSetWaveform)		; S41
3747   1222             	;.byte	HBYTE(JmpSetWaveform)		; S42
3748   1222             	;.byte	HBYTE(JmpSetWaveform)		; S43
3749   1222             	;.byte	HBYTE(EVOL_MaxMin)		; S44
3750   1222             	;.byte	HBYTE(EVOL_MinMax)		; S45
3751   1222             	;.byte	HBYTE(EnableSwingTempo)		; S46
3752   1222             	;.byte	HBYTE(DisableSwingTempxo)	; S47
3753   1222             	;.byte	HBYTE(_enable_wavetablxe)	; S48
3754   1222             	;.byte	HBYTE(_disable_wavetabxle)	; S49
3755   1222             	;.byte	HBYTE(_set_noisedec)		; S4A
3756   1222             	;.byte	HBYTE(_set_noiseinc)		; S4B
3757   1222             	;.byte	HBYTE(_enable_noiserepxeat)	; S4C
3758   1222             	;.byte	HBYTE(_disable_noiserexpeat)	; S4D
3759   1222             	;.byte	HBYTE(_enable_noisepinxgpong)	; S4E
3760   1222             	;.byte	HBYTE(_disable_noisepixngpong)	; S4F
3761   1222             
3762   1222             ;-----------------------------------------------------------------------
3763   1222             _set_noiseinc:	;s4a
3764   1222             ;-----------------------------------------------------------------------
3765   1222 18 10 E7    	or	special, #SF_NOISEINC
3766   1225 2F 03       	bra	_s4xit
3767   1227             ;-----------------------------------------------------------------------
3768   1227             _set_noisedec:	;s4b
3769   1227             ;-----------------------------------------------------------------------
3770   1227 38 EF E7    	and	special, #~SF_NOISEINC
3771   122A 38 DF E8    _s4xit:	and	special_mode, #~SM_NOISEMODE
3772   122D 6F          	ret
3773   122E             ;-----------------------------------------------------------------------
3774   122E             _enable_noiserepeat:	;s4c
3775   122E             ;-----------------------------------------------------------------------
3776   122E 18 10 E8    	or	special_mode, #SM_NOISEREPEAT
3777   1231 6F          	ret
3778   1232             ;-----------------------------------------------------------------------
3779   1232             _disable_noiserepeat:	;s4d
3780   1232             ;-----------------------------------------------------------------------
3781   1232 38 EF E8    	and	special_mode, #~SM_NOISEREPEAT
3782   1235 6F          	ret
3783   1236             ;-----------------------------------------------------------------------
3784   1236             _enable_noisepingpong:	;s4e
3785   1236             ;-----------------------------------------------------------------------
3786   1236 18 20 E8    	or	special_mode, #SM_NOISEMODE
3787   1239 6F          	ret
3788   123A             ;-----------------------------------------------------------------------
3789   123A             _disable_noisepingpong:	;s4f
3790   123A             ;-----------------------------------------------------------------------
3791   123A 38 DF E8    	and	special_mode, #~SM_NOISEMODE
3792   123D 6F          	ret
3793   123E             
3794   123E             ;=======================================================================
3795   123E             EnableSwingTempo:	;s46
3796   123E             ;=======================================================================
3797   123E 18 20 E7    	or	special, #SF_SWINGTEMPO
3798   1241 38 BF E7    	and	special, #~SF_SWINGODD          ; always start at 0
3799   1244 FA 12 13    	mov	mod_speed_bk, mod_speed         ; back up speed
3800   1247 6F          	ret
3801   1248             ;=======================================================================
3802   1248             DisableSwingTempo:	;s47
3803   1248             ;=======================================================================
3804   1248 38 DF E7    	and	special, #~SF_SWINGTEMPO
3805   124B FA 13 12    	mov	mod_speed, mod_speed_bk		; restore speed
3806   124E 6F          	ret
3807   124F             
3808   124F             JmpSetWaveform:	;s40
3809   124F 5F 41 0F    	jmp	SetWaveform
3810   1252             
3811   1252             ;------------------------------------------------------------------------
3812   1252             EVOL_MaxMin:	;s44
3813   1252             ;------------------------------------------------------------------------
3814   1252 18 02 E7    	or	special, #SF_EVOLINC
3815   1255 FA CF C8    	mov	current_evol, evol_min
3816   1258 6F          	ret
3817   1259             ;------------------------------------------------------------------------
3818   1259             EVOL_MinMax:	;s45
3819   1259             ;------------------------------------------------------------------------
3820   1259 38 FD E7    	and	special, #~SF_EVOLINC
3821   125C FA CE C8    	mov	current_evol, evol_max
3822   125F 6F          	ret
3823   1260             ;-----------------------------------------------------------------------
3824   1260             _disable_wavetable:	;s49
3825   1260             ;-----------------------------------------------------------------------
3826   1260 38 FB E8    	and	special_mode, #~SM_WAVETABLE
3827   1263 E4 E5       	mov	a, wt_sample_low		; restore original
3828   1265 C5 00 02    	mov	!SampleDirectory, a		; sample start
3829   1268 C5 02 02    	mov	!SampleDirectory+2, a		; loop start
3830   126B E4 E4       	mov	a, wt_sample_high
3831   126D C5 01 02    	mov	!SampleDirectory+1, a		; sample start
3832   1270 C5 03 02    	mov	!SampleDirectory+3, a		; loop start
3833   1273 6F          	ret
3834   1274             ;-----------------------------------------------------------------------
3835   1274             _enable_wavetable:	;s48
3836   1274             ;-----------------------------------------------------------------------
3837   1274 FA E3 E1    	mov	wt_cur, wt_min
3838   1277 18 04 E8    	or	special_mode, #SM_WAVETABLE
3839   127A 6F          	ret
3840   127B             
3841   127B             ;=======================================================================
3842   127B             Command_SetParameter2:
3843   127B             ;=======================================================================
3844   127B 78 0C E0    	cmp	parameter_mode, #Z_EDL          ; S9C
3845   127E F0 18       	beq	ZCommand_EchoDelaySpecial
3846   1280 78 0E E0    	cmp	parameter_mode, #Z_MINMAX	; S9E
3847   1283 F0 06       	beq	ZCommand_SetEVOLMinMax
3848   1285 78 0F E0    	cmp	parameter_mode, #Z_FILTERTIME	; S9F
3849   1288 F0 58       	beq	ZCommand_SetFilterTime
3850   128A 6F          	ret
3851   128B             
3852   128B             ;=======================================================================
3853   128B             ZCommand_SetEVOLMinMax:				; S9E Zxx
3854   128B             ;=======================================================================
3855   128B 68 80       	cmp	a, #80h
3856   128D B0 03       	bcs	_set_evol_max
3857   128F C4 CF       	mov	evol_min, a
3858   1291 6F          	ret
3859   1292             
3860   1292             _set_evol_max:
3861   1292 80          	setc
3862   1293 A8 80       	sbc	a, #80h
3863   1295 C4 CE       	mov	evol_max, a
3864   1297 6F          	ret
3865   1298             
3866   1298             ;=======================================================================
3867   1298             ZCommand_EchoDelaySpecial:			; S9C Zxx
3868   1298             ;=======================================================================
3869   1298 65 B5 1A    	cmp	a, !MODULE+MOD_EDL
3870   129B F0 02       	beq	SetEchoDelay
3871   129D B0 06       	bcs	_command_special		; if > what's defined in header reset
3872   129F             SetEchoDelay:
3873   129F 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; otherwise change to new value
3874   12A2 C4 F3       	mov	SPC_DSPD, a			;
3875   12A4 6F          	ret
3876   12A5             ;-----------------------------------------------------------------------
3877   12A5             _command_special:
3878   12A5             ;-----------------------------------------------------------------------
3879   12A5 68 10       	cmp	a, #10h
3880   12A7 F0 29       	beq	ResetAll
3881   12A9 68 50       	cmp	a, #50h
3882   12AB 90 19       	bcc	_set_wt_time
3883   12AD 68 58       	cmp	a, #58h
3884   12AF 90 0B       	bcc	_set_wt_min
3885   12B1 68 60       	cmp	a, #60h
3886   12B3 90 01       	bcc	_set_wt_max
3887   12B5             
3888   12B5 6F          	ret
3889   12B6             
3890   12B6             _set_wt_max:
3891   12B6 80          	setc
3892   12B7 A8 57       	sbc	a, #57h
3893   12B9 C4 E2       	mov	wt_max, a
3894   12BB 6F          	ret
3895   12BC             
3896   12BC             _set_wt_min:
3897   12BC 80          	setc
3898   12BD A8 50       	sbc	a, #50h
3899   12BF 64 E2       	cmp	a, wt_max
3900   12C1 B0 1E       	bcs	cmd_exit5
3901   12C3 C4 E3       	mov	wt_min, a
3902   12C5 6F          	ret
3903   12C6             
3904   12C6             _set_wt_time:
3905   12C6 80          	setc
3906   12C7 A8 10       	sbc	a, #10h
3907   12C9 3F 60 13    	call	Amult4_M0
3908   12CC C4 E6       	mov	wt_time, a
3909   12CE 8F 00 CC    	mov	current_wt_time, #0
3910   12D1 6F          	ret
3911   12D2             
3912   12D2             ;=======================================================================
3913   12D2             ResetAll:					; restore all to header defaults
3914   12D2             ;=======================================================================
3915   12D2 3F 67 11    	call	ResetEchoDelay
3916   12D5 3F 70 11    	call	ResetMasterVolume
3917   12D8             ResetFbFirVol:
3918   12D8 3F F3 10    	call	ResetEchoFeedback
3919   12DB 3F 51 11    	call	ResetEFIR
3920   12DE 3F D4 10    	call	ResetEchoVolume
3921   12E1             cmd_exit5:
3922   12E1 6F          	ret
3923   12E2             
3924   12E2             ;=======================================================================
3925   12E2             ZCommand_SetFilterTime:				; S9F Zxx
3926   12E2             ;=======================================================================
3927   12E2 68 00       	cmp	a, #0
3928   12E4 F0 FB       	beq	cmd_exit5
3929   12E6             
3930   12E6             _set_filter_time:
3931   12E6 C4 D2       	mov	filter_time, a
3932   12E8 6F          	ret
3933   12E9             
3934   12E9             ;-----------------------------------------------------------------------
3935   12E9             ; a = param
3936   12E9             ; y = tick
3937   12E9             ; m0 = value
3938   12E9             ; m0+1 = upper bound
3939   12E9             ;
3940   12E9             ; return: a = result
3941   12E9             ;-----------------------------------------------------------------------
3942   12E9             DoVolumeSlide:
3943   12E9             ;-----------------------------------------------------------------------
3944   12E9 C4 02       	mov	m1, a			; test param for slide behavior
3945   12EB             					;-------------------------------
3946   12EB 28 0F       	and	a, #0Fh			; Dx0 : slide up
3947   12ED F0 4D       	beq	_dvs_up			;-------------------------------
3948   12EF E4 02       	mov	a, m1			; D0y : slide down
3949   12F1 28 F0       	and	a, #0F0h		;
3950   12F3 F0 34       	beq	_dvs_down		;-------------------------------
3951   12F5 E4 02       	mov	a, m1			; DxF : slide up fine
3952   12F7 28 0F       	and	a, #0Fh			;
3953   12F9 68 0F       	cmp	a, #0Fh			;
3954   12FB F0 19       	beq	_dvs_fineup		;-------------------------------
3955   12FD E4 02       	mov	a, m1			; DFy : slide down fine
3956   12FF 68 F0       	cmp	a, #0F0h		;
3957   1301 B0 03       	bcs	_dvs_finedown		;
3958   1303             _dvs_quit:				;-------------------------------
3959   1303 E4 00       	mov	a, m0			; (invalid)
3960   1305             _dvs_exit:				;
3961   1305 6F          	ret				;
3962   1306             ;-----------------------------------------------------------------------
3963   1306             _dvs_finedown:				; DFy
3964   1306             ;-----------------------------------------------------------------------
3965   1306 AD 00       	cmp	y, #0			;on tick0:
3966   1308 D0 F9       	bne	_dvs_quit		;
3967   130A E4 00       	mov	a, m0			; a = volume - y
3968   130C 38 0F 02    	and	m1, #0Fh		;
3969   130F A4 02       	sbc	a, m1			;
3970   1311 B0 F2       	bcs	_dvs_exit		; saturate lower bound to 0
3971   1313 E8 00       	mov	a, #0			;
3972   1315 6F          	ret				;
3973   1316             ;-----------------------------------------------------------------------
3974   1316             _dvs_fineup:				; DxF
3975   1316             ;-----------------------------------------------------------------------
3976   1316 AD 00       	cmp	y, #0			;on tick0:
3977   1318 D0 E9       	bne	_dvs_quit		;
3978   131A E4 02       	mov	a, m1			; a = x + volume
3979   131C 9F          	xcn	a			;
3980   131D 28 0F       	and	a, #0Fh			;
3981   131F 60          	clrc				;
3982   1320 84 00       	adc	a, m0			;
3983   1322 64 01       	cmp	a, m0+1			; saturate upper to [m0.h]
3984   1324 90 DF       	bcc	_dvs_exit		;
3985   1326 E4 01       	mov	a, m0+1			;
3986   1328 6F          	ret				;
3987   1329             ;-----------------------------------------------------------------------
3988   1329             _dvs_down:				; D0y
3989   1329             ;-----------------------------------------------------------------------
3990   1329 78 0F 02    	cmp	m1,#0Fh			;on tick0 OR y == 15
3991   132C F0 04       	beq	_dvsd_15		;
3992   132E AD 00       	cmp	y, #0			;
3993   1330 F0 D1       	beq	_dvs_quit		;
3994   1332             _dvsd_15:				;
3995   1332 E4 00       	mov	a, m0			; a = volume - param
3996   1334 80          	setc				;
3997   1335 A4 02       	sbc	a, m1			;
3998   1337 B0 CC       	bcs	_dvs_exit		; saturate lower to 0
3999   1339 E8 00       	mov	a, #0			;
4000   133B 6F          	ret				;
4001   133C             ;-----------------------------------------------------------------------
4002   133C             _dvs_up:				;
4003   133C             ;-----------------------------------------------------------------------
4004   133C 78 F0 02    	cmp	m1, #0F0h		;on tick0 OR x == 15
4005   133F F0 04       	beq	_dvsu_15		;
4006   1341 AD 00       	cmp	y, #0			;
4007   1343 F0 BE       	beq	_dvs_quit		;
4008   1345             _dvsu_15:				;
4009   1345 E4 02       	mov	a, m1			; a = x + volume
4010   1347 9F          	xcn	a			;
4011   1348 28 0F       	and	a, #0Fh			;
4012   134A 60          	clrc				;
4013   134B 84 00       	adc	a, m0			;
4014   134D 64 01       	cmp	a, m0+1			; saturate upper to [m0.h]
4015   134F 90 B4       	bcc	_dvs_exit		;
4016   1351 E4 01       	mov	a, m0+1			;
4017   1353 6F          	ret				;
4018   1354             ;-----------------------------------------------------------------------
4019   1354             
4020   1354             ;=======================================================================
4021   1354             ; a = param
4022   1354             ; y = tick
4023   1354             ; return m0:word = slide amount
4024   1354             ;=======================================================================
4025   1354             PitchSlide_Load:
4026   1354             ;=======================================================================
4027   1354 68 F0       	cmp	a, #0F0h			; Fx: fine slide
4028   1356 B0 14       	bcs	_psl_fine			;
4029   1358 68 E0       	cmp	a, #0E0h			; Ex: extra fine slide
4030   135A B0 1E       	bcs	_psl_exfine			;
4031   135C             ;-----------------------------------------------------------------------
4032   135C             _psl_normal:
4033   135C             ;-----------------------------------------------------------------------
4034   135C AD 00       	cmp	y, #0				; no slide on tick0
4035   135E F0 26       	beq	_psl_zero			;
4036   1360             ;=======================================================================
4037   1360             Amult4_M0:
4038   1360             ;=======================================================================
4039   1360 8F 00 01    	mov	m0+1, #0			; m0 = a*4
4040   1363 1C          	asl	a				;	
4041   1364 2B 01       	rol	m0+1				;
4042   1366 1C          	asl	a				;
4043   1367 2B 01       	rol	m0+1				;
4044   1369 C4 00       	mov	m0, a				;
4045   136B 6F          	ret					;
4046   136C             ;-----------------------------------------------------------------------
4047   136C             _psl_fine:
4048   136C             ;-----------------------------------------------------------------------
4049   136C AD 00       	cmp	y, #0				; no slide on not tick0
4050   136E D0 16       	bne	_psl_zero			;
4051   1370 8F 00 01    	mov	m0+1, #0			; m0 = y*4
4052   1373 28 0F       	and	a, #0Fh				;	
4053   1375 1C          	asl	a				;
4054   1376 1C          	asl	a				;
4055   1377 C4 00       	mov	m0, a				;
4056   1379 6F          	ret					;
4057   137A             ;-----------------------------------------------------------------------
4058   137A             _psl_exfine:
4059   137A             ;-----------------------------------------------------------------------
4060   137A AD 00       	cmp	y, #0				; no slide on not tick0
4061   137C D0 08       	bne	_psl_zero			;
4062   137E 8F 00 01    	mov	m0+1, #0			; m0 = y
4063   1381 28 0F       	and	a, #0Fh				;	
4064   1383 C4 00       	mov	m0, a				;
4065   1385 6F          	ret					;
4066   1386             ;-----------------------------------------------------------------------
4067   1386             _psl_zero:
4068   1386             ;-----------------------------------------------------------------------
4069   1386 8F 00 00    	mov	m0, #0
4070   1389 8F 00 01    	mov	m0+1, #0
4071   138C 6F          	ret
4072   138D             
4073   138D             ;***********************************************************************
4074   138D             
4075   138D             
4076   138D             __BRK_ROUTINE__:
4077   138D 0B F4       	asl	SPC_PORT0
4078   138F             	;bcs	_brk_pass
4079   138F             	;ret
4080   138F             ;_brk_pass:
4081   138F             	;jmp	somewhere
4082   138F 6F          	ret
4083   1390             
4084   1390             	
4085   1390             LUT_FTAB:
4086   1390 74217B218321        .word 02174h, 0217Bh, 02183h, 0218Bh, 02193h, 0219Ah, 021A2h, 021AAh, 021B2h, 021BAh, 021C1h, 021C9h, 021D1h, 021D9h, 021E1h, 021E8h
4086   1396 8B2193219A21A221AA21B221BA21C121C921D121D921E121E821
4087   13B0 F021F8210022        .word 021F0h, 021F8h, 02200h, 02208h, 02210h, 02218h, 0221Fh, 02227h, 0222Fh, 02237h, 0223Fh, 02247h, 0224Fh, 02257h, 0225Fh, 02267h
4087   13B6 0822102218221F2227222F2237223F2247224F2257225F226722
4088   13D0 6F2277227F22        .word 0226Fh, 02277h, 0227Fh, 02287h, 0228Fh, 02297h, 0229Fh, 022A7h, 022AFh, 022B7h, 022BFh, 022C7h, 022CFh, 022D7h, 022DFh, 022E7h
4088   13D6 87228F2297229F22A722AF22B722BF22C722CF22D722DF22E722
4089   13F0 EF22F722FF22        .word 022EFh, 022F7h, 022FFh, 02307h, 0230Fh, 02317h, 0231Fh, 02328h, 02330h, 02338h, 02340h, 02348h, 02350h, 02358h, 02361h, 02369h
4089   13F6 07230F2317231F23282330233823402348235023582361236923
4090   1410 712379238123        .word 02371h, 02379h, 02381h, 0238Ah, 02392h, 0239Ah, 023A2h, 023AAh, 023B3h, 023BBh, 023C3h, 023CBh, 023D4h, 023DCh, 023E4h, 023EDh
4090   1416 8A2392239A23A223AA23B323BB23C323CB23D423DC23E423ED23
4091   1430 F523FD230624        .word 023F5h, 023FDh, 02406h, 0240Eh, 02416h, 0241Fh, 02427h, 0242Fh, 02438h, 02440h, 02448h, 02451h, 02459h, 02462h, 0246Ah, 02472h
4091   1436 0E2416241F2427242F243824402448245124592462246A247224
4092   1450 7B2483248C24        .word 0247Bh, 02483h, 0248Ch, 02494h, 0249Dh, 024A5h, 024AEh, 024B6h, 024BEh, 024C7h, 024CFh, 024D8h, 024E0h, 024E9h, 024F2h, 024FAh
4092   1456 94249D24A524AE24B624BE24C724CF24D824E024E924F224FA24
4093   1470 03250B251425        .word 02503h, 0250Bh, 02514h, 0251Ch, 02525h, 0252Dh, 02536h, 0253Fh, 02547h, 02550h, 02559h, 02561h, 0256Ah, 02572h, 0257Bh, 02584h
4093   1476 1C2525252D2536253F2547255025592561256A2572257B258425
4094   1490 8C2595259E25        .word 0258Ch, 02595h, 0259Eh, 025A7h, 025AFh, 025B8h, 025C1h, 025C9h, 025D2h, 025DBh, 025E4h, 025ECh, 025F5h, 025FEh, 02607h, 0260Fh
4094   1496 A725AF25B825C125C925D225DB25E425EC25F525FE2507260F26
4095   14B0 182621262A26        .word 02618h, 02621h, 0262Ah, 02633h, 0263Ch, 02644h, 0264Dh, 02656h, 0265Fh, 02668h, 02671h, 0267Ah, 02682h, 0268Bh, 02694h, 0269Dh
4095   14B6 33263C2644264D2656265F26682671267A2682268B2694269D26
4096   14D0 A626AF26B826        .word 026A6h, 026AFh, 026B8h, 026C1h, 026CAh, 026D3h, 026DCh, 026E5h, 026EEh, 026F7h, 02700h, 02709h, 02712h, 0271Bh, 02724h, 0272Dh
4096   14D6 C126CA26D326DC26E526EE26F7260027092712271B2724272D27
4097   14F0 36273F274827        .word 02736h, 0273Fh, 02748h, 02751h, 0275Ah, 02763h, 0276Dh, 02776h, 0277Fh, 02788h, 02791h, 0279Ah, 027A3h, 027ACh, 027B6h, 027BFh
4097   14F6 51275A2763276D2776277F27882791279A27A327AC27B627BF27
4098   1510 C827D127DA27        .word 027C8h, 027D1h, 027DAh, 027E4h, 027EDh, 027F6h, 027FFh, 02809h, 02812h, 0281Bh, 02824h, 0282Eh, 02837h, 02840h, 0284Ah, 02853h
4098   1516 E427ED27F627FF27092812281B2824282E28372840284A285328
4099   1530 5C2865286F28        .word 0285Ch, 02865h, 0286Fh, 02878h, 02882h, 0288Bh, 02894h, 0289Eh, 028A7h, 028B0h, 028BAh, 028C3h, 028CDh, 028D6h, 028E0h, 028E9h
4099   1536 782882288B2894289E28A728B028BA28C328CD28D628E028E928
4100   1550 F228FC280529        .word 028F2h, 028FCh, 02905h, 0290Fh, 02918h, 02922h, 0292Bh, 02935h, 0293Eh, 02948h, 02951h, 0295Bh, 02965h, 0296Eh, 02978h, 02981h
4100   1556 0F29182922292B2935293E29482951295B2965296E2978298129
4101   1570 8B2995299E29        .word 0298Bh, 02995h, 0299Eh, 029A8h, 029B1h, 029BBh, 029C5h, 029CEh, 029D8h, 029E2h, 029EBh, 029F5h, 029FFh, 02A08h, 02A12h, 02A1Ch
4101   1576 A829B129BB29C529CE29D829E229EB29F529FF29082A122A1C2A
4102   1590 262A2F2A392A        .word 02A26h, 02A2Fh, 02A39h, 02A43h, 02A4Dh, 02A56h, 02A60h, 02A6Ah, 02A74h, 02A7Eh, 02A87h, 02A91h, 02A9Bh, 02AA5h, 02AAFh, 02AB9h
4102   1596 432A4D2A562A602A6A2A742A7E2A872A912A9B2AA52AAF2AB92A
4103   15B0 C32ACC2AD62A        .word 02AC3h, 02ACCh, 02AD6h, 02AE0h, 02AEAh, 02AF4h, 02AFEh, 02B08h, 02B12h, 02B1Ch, 02B26h, 02B30h, 02B3Ah, 02B44h, 02B4Eh, 02B58h
4103   15B6 E02AEA2AF42AFE2A082B122B1C2B262B302B3A2B442B4E2B582B
4104   15D0 622B6C2B762B        .word 02B62h, 02B6Ch, 02B76h, 02B80h, 02B8Ah, 02B94h, 02B9Eh, 02BA8h, 02BB2h, 02BBCh, 02BC6h, 02BD1h, 02BDBh, 02BE5h, 02BEFh, 02BF9h
4104   15D6 802B8A2B942B9E2BA82BB22BBC2BC62BD12BDB2BE52BEF2BF92B
4105   15F0 032C0D2C182C        .word 02C03h, 02C0Dh, 02C18h, 02C22h, 02C2Ch, 02C36h, 02C40h, 02C4Bh, 02C55h, 02C5Fh, 02C69h, 02C74h, 02C7Eh, 02C88h, 02C93h, 02C9Dh
4105   15F6 222C2C2C362C402C4B2C552C5F2C692C742C7E2C882C932C9D2C
4106   1610 A72CB22CBC2C        .word 02CA7h, 02CB2h, 02CBCh, 02CC6h, 02CD1h, 02CDBh, 02CE5h, 02CF0h, 02CFAh, 02D04h, 02D0Fh, 02D19h, 02D24h, 02D2Eh, 02D39h, 02D43h
4106   1616 C62CD12CDB2CE52CF02CFA2C042D0F2D192D242D2E2D392D432D
4107   1630 4D2D582D622D        .word 02D4Dh, 02D58h, 02D62h, 02D6Dh, 02D77h, 02D82h, 02D8Ch, 02D97h, 02DA1h, 02DACh, 02DB7h, 02DC1h, 02DCCh, 02DD6h, 02DE1h, 02DECh
4107   1636 6D2D772D822D8C2D972DA12DAC2DB72DC12DCC2DD62DE12DEC2D
4108   1650 F62D012E0B2E        .word 02DF6h, 02E01h, 02E0Bh, 02E16h, 02E21h, 02E2Bh, 02E36h, 02E41h, 02E4Bh, 02E56h, 02E61h, 02E6Ch, 02E76h, 02E81h, 02E8Ch, 02E97h
4108   1656 162E212E2B2E362E412E4B2E562E612E6C2E762E812E8C2E972E
4109   1670 A12EAC2EB72E        .word 02EA1h, 02EACh, 02EB7h, 02EC2h, 02ECCh, 02ED7h, 02EE2h, 02EEDh, 02EF8h, 02F03h, 02F0Eh, 02F18h, 02F23h, 02F2Eh, 02F39h, 02F44h
4109   1676 C22ECC2ED72EE22EED2EF82E032F0E2F182F232F2E2F392F442F
4110   1690 4F2F5A2F652F        .word 02F4Fh, 02F5Ah, 02F65h, 02F70h, 02F7Bh, 02F86h, 02F91h, 02F9Ch, 02FA7h, 02FB2h, 02FBDh, 02FC8h, 02FD3h, 02FDEh, 02FE9h, 02FF4h
4110   1696 702F7B2F862F912F9C2FA72FB22FBD2FC82FD32FDE2FE92FF42F
4111   16B0 FF2F0A301530        .word 02FFFh, 0300Ah, 03015h, 03020h, 0302Ch, 03037h, 03042h, 0304Dh, 03058h, 03063h, 0306Eh, 0307Ah, 03085h, 03090h, 0309Bh, 030A7h
4111   16B6 20302C30373042304D30583063306E307A30853090309B30A730
4112   16D0 B230BD30C830        .word 030B2h, 030BDh, 030C8h, 030D4h, 030DFh, 030EAh, 030F5h, 03101h, 0310Ch, 03117h, 03123h, 0312Eh, 0313Ah, 03145h, 03150h, 0315Ch
4112   16D6 D430DF30EA30F53001310C31173123312E313A31453150315C31
4113   16F0 673173317E31        .word 03167h, 03173h, 0317Eh, 03189h, 03195h, 031A0h, 031ACh, 031B7h, 031C3h, 031CEh, 031DAh, 031E5h, 031F1h, 031FCh, 03208h, 03213h
4113   16F6 89319531A031AC31B731C331CE31DA31E531F131FC3108321332
4114   1710 1F322B323632        .word 0321Fh, 0322Bh, 03236h, 03242h, 0324Dh, 03259h, 03265h, 03270h, 0327Ch, 03288h, 03293h, 0329Fh, 032ABh, 032B7h, 032C2h, 032CEh
4114   1716 42324D325932653270327C32883293329F32AB32B732C232CE32
4115   1730 DA32E532F132        .word 032DAh, 032E5h, 032F1h, 032FDh, 03309h, 03315h, 03320h, 0332Ch, 03338h, 03344h, 03350h, 0335Ch, 03367h, 03373h, 0337Fh, 0338Bh
4115   1736 FD320933153320332C333833443350335C33673373337F338B33
4116   1750 9733A333AF33        .word 03397h, 033A3h, 033AFh, 033BBh, 033C7h, 033D3h, 033DFh, 033EBh, 033F7h, 03403h, 0340Fh, 0341Bh, 03427h, 03433h, 0343Fh, 0344Bh
4116   1756 BB33C733D333DF33EB33F73303340F341B34273433343F344B34
4117   1770 573463346F34        .word 03457h, 03463h, 0346Fh, 0347Bh, 03488h, 03494h, 034A0h, 034ACh, 034B8h, 034C4h, 034D1h, 034DDh, 034E9h, 034F5h, 03502h, 0350Eh
4117   1776 7B3488349434A034AC34B834C434D134DD34E934F53402350E35
4118   1790 1A3526353335        .word 0351Ah, 03526h, 03533h, 0353Fh, 0354Bh, 03558h, 03564h, 03570h, 0357Dh, 03589h, 03595h, 035A2h, 035AEh, 035BAh, 035C7h, 035D3h
4118   1796 3F354B355835643570357D3589359535A235AE35BA35C735D335
4119   17B0 E035EC35F935        .word 035E0h, 035ECh, 035F9h, 03605h, 03612h, 0361Eh, 0362Bh, 03637h, 03644h, 03650h, 0365Dh, 03669h, 03676h, 03683h, 0368Fh, 0369Ch
4119   17B6 053612361E362B363736443650365D366936763683368F369C36
4120   17D0 A836B536C236        .word 036A8h, 036B5h, 036C2h, 036CEh, 036DBh, 036E8h, 036F4h, 03701h, 0370Eh, 0371Bh, 03727h, 03734h, 03741h, 0374Eh, 0375Ah, 03767h
4120   17D6 CE36DB36E836F43601370E371B372737343741374E375A376737
4121   17F0 743781378E37        .word 03774h, 03781h, 0378Eh, 0379Ah, 037A7h, 037B4h, 037C1h, 037CEh, 037DBh, 037E8h, 037F5h, 03802h, 0380Eh, 0381Bh, 03828h, 03835h
4121   17F6 9A37A737B437C137CE37DB37E837F53702380E381B3828383538
4122   1810 42384F385C38        .word 03842h, 0384Fh, 0385Ch, 03869h, 03876h, 03884h, 03891h, 0389Eh, 038ABh, 038B8h, 038C5h, 038D2h, 038DFh, 038ECh, 038FAh, 03907h
4122   1816 69387638843891389E38AB38B838C538D238DF38EC38FA380739
4123   1830 143921392E39        .word 03914h, 03921h, 0392Eh, 0393Bh, 03949h, 03956h, 03963h, 03970h, 0397Eh, 0398Bh, 03998h, 039A6h, 039B3h, 039C0h, 039CEh, 039DBh
4123   1836 3B3949395639633970397E398B399839A639B339C039CE39DB39
4124   1850 E839F639033A        .word 039E8h, 039F6h, 03A03h, 03A11h, 03A1Eh, 03A2Bh, 03A39h, 03A46h, 03A54h, 03A61h, 03A6Fh, 03A7Ch, 03A8Ah, 03A97h, 03AA5h, 03AB2h
4124   1856 113A1E3A2B3A393A463A543A613A6F3A7C3A8A3A973AA53AB23A
4125   1870 C03ACE3ADB3A        .word 03AC0h, 03ACEh, 03ADBh, 03AE9h, 03AF6h, 03B04h, 03B12h, 03B1Fh, 03B2Dh, 03B3Bh, 03B48h, 03B56h, 03B64h, 03B72h, 03B7Fh, 03B8Dh
4125   1876 E93AF63A043B123B1F3B2D3B3B3B483B563B643B723B7F3B8D3B
4126   1890 9B3BA93BB63B        .word 03B9Bh, 03BA9h, 03BB6h, 03BC4h, 03BD2h, 03BE0h, 03BEEh, 03BFCh, 03C09h, 03C17h, 03C25h, 03C33h, 03C41h, 03C4Fh, 03C5Dh, 03C6Bh
4126   1896 C43BD23BE03BEE3BFC3B093C173C253C333C413C4F3C5D3C6B3C
4127   18B0 793C873C953C        .word 03C79h, 03C87h, 03C95h, 03CA3h, 03CB1h, 03CBFh, 03CCDh, 03CDBh, 03CE9h, 03CF7h, 03D05h, 03D13h, 03D21h, 03D2Fh, 03D3Eh, 03D4Ch
4127   18B6 A33CB13CBF3CCD3CDB3CE93CF73C053D133D213D2F3D3E3D4C3D
4128   18D0 5A3D683D763D        .word 03D5Ah, 03D68h, 03D76h, 03D85h, 03D93h, 03DA1h, 03DAFh, 03DBDh, 03DCCh, 03DDAh, 03DE8h, 03DF7h, 03E05h, 03E13h, 03E22h, 03E30h
4128   18D6 853D933DA13DAF3DBD3DCC3DDA3DE83DF73D053E133E223E303E
4129   18F0 3E3E4D3E5B3E        .word 03E3Eh, 03E4Dh, 03E5Bh, 03E6Ah, 03E78h, 03E86h, 03E95h, 03EA3h, 03EB2h, 03EC0h, 03ECFh, 03EDDh, 03EECh, 03EFAh, 03F09h, 03F18h
4129   18F6 6A3E783E863E953EA33EB23EC03ECF3EDD3EEC3EFA3E093F183F
4130   1910 263F353F433F        .word 03F26h, 03F35h, 03F43h, 03F52h, 03F61h, 03F6Fh, 03F7Eh, 03F8Dh, 03F9Bh, 03FAAh, 03FB9h, 03FC7h, 03FD6h, 03FE5h, 03FF4h, 04002h
4130   1916 523F613F6F3F7E3F8D3F9B3FAA3FB93FC73FD63FE53FF43F0240
4131   1930 114020402F40        .word 04011h, 04020h, 0402Fh, 0403Eh, 0404Dh, 0405Bh, 0406Ah, 04079h, 04088h, 04097h, 040A6h, 040B5h, 040C4h, 040D3h, 040E2h, 040F1h
4131   1936 3E404D405B406A40794088409740A640B540C440D340E240F140
4132   1950 00410F411E41        .word 04100h, 0410Fh, 0411Eh, 0412Dh, 0413Ch, 0414Bh, 0415Ah, 04169h, 04178h, 04188h, 04197h, 041A6h, 041B5h, 041C4h, 041D3h, 041E3h
4132   1956 2D413C414B415A416941784188419741A641B541C441D341E341
4133   1970 F24101421042        .word 041F2h, 04201h, 04210h, 04220h, 0422Fh, 0423Eh, 0424Eh, 0425Dh, 0426Ch, 0427Ch, 0428Bh, 0429Ah, 042AAh, 042B9h, 042C9h, 042D8h
4133   1976 20422F423E424E425D426C427C428B429A42AA42B942C942D842
4134   1990             
4135   1990             IT_FineSineData:
4136   1990 000203050608	.byte   0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23
4136   1996 090B0C0E101113141617
4137   19A0 181A1B1D1E20	.byte  24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44
4137   19A6 212224252627292A2B2C
4138   19B0 2D2E2F303132	.byte  45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59
4138   19B6 33343536373838393A3B
4139   19C0 3B3C3C3D3D3E	.byte  59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64
4139   19C6 3E3E3F3F3F4040404040
4140   19D0 404040404040	.byte  64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60
4140   19D6 3F3F3F3E3E3E3D3D3C3C
4141   19E0 3B3B3A393838	.byte  59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46
4141   19E6 37363534333231302F2E
4142   19F0 2D2C2B2A2927	.byte  45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26
4142   19F6 2625242221201E1D1B1A
4143   1A00 181716141311	.byte  24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2
4143   1A06 100E0C0B090806050302
4144   1A10             
4145   1A10             ;-----------------------------------------------------------------------------
4146   1A10             ; C64 waveform: $41	          When S48 is used the first sample is
4147   1A10             ;  pulse width: $81-$88           replaced by the following samples
4148   1A10             ;-----------------------------------------------------------------------------
4149   1A10             
4150   1A10             ;-----------------------------------------------------------------------------
4151   1A10             ; C64 waveform: $41	[16744 Hz]
4152   1A10             ;  pulse width: $81-$88
4153   1A10             ;-----------------------------------------------------------------------------
4154   1A10             WTLoop1:
4155   1A10 B00881111111	.byte	$b0,$08,$81,$11,$11,$11,$11,$11,$11
4155   1A16 111111
4156   1A19 671F5E5F4F31	.byte	$67,$1f,$5e,$5f,$4f,$31,$23,$e7,$a7
4156   1A1F 23E7A7
4157   1A22             
4158   1A22             WTLoop2:
4159   1A22 C00BBAD11111	.byte	$c0,$0b,$ba,$d1,$11,$11,$11,$11,$11
4159   1A28 111111
4160   1A2B A33333333333	.byte	$a3,$33,$33,$33,$33,$33,$42,$42,$5b
4160   1A31 42425B
4161   1A34             
4162   1A34             WTLoop3:
4163   1A34 C00BBBBBC111	.byte	$c0,$0b,$bb,$bb,$c1,$11,$11,$11,$11
4163   1A3A 111111
4164   1A3D A35554545454	.byte	$a3,$55,$54,$54,$54,$54,$54,$53,$6b
4164   1A43 54536B
4165   1A46             
4166   1A46             WTLoop4:
4167   1A46 C00BCBCBCBF2	.byte	$c0,$0b,$cb,$cb,$cb,$f2,$12,$12,$12
4167   1A4C 121212
4168   1A4F B33333333333	.byte	$b3,$33,$33,$33,$33,$33,$33,$32,$4d
4168   1A55 33324D
4169   1A58             
4170   1A58             WTLoop5:
4171   1A58 B0089999999A	.byte	$b0,$08,$99,$99,$99,$9a,$46,$56,$56
4171   1A5E 465656
4172   1A61 B35555555555	.byte	$b3,$55,$55,$55,$55,$55,$55,$54,$6d
4172   1A67 55546D
4173   1A6A             
4174   1A6A             WTLoop6:
4175   1A6A B00898999999	.byte	$b0,$08,$98,$99,$99,$99,$98,$06,$45
4175   1A70 980645
4176   1A73 B701F1010000	.byte	$b7,$01,$f1,$01,$00,$00,$10,$1f,$28
4176   1A79 101F28
4177   1A7C             
4178   1A7C             WTLoop7:
4179   1A7C B008A999999A	.byte	$b0,$08,$a9,$99,$99,$9a,$9a,$a9,$27
4179   1A82 9AA927
4180   1A85 B35656565555	.byte	$b3,$56,$56,$56,$55,$55,$55,$55,$6d
4180   1A8B 55556D
4181   1A8E             
4182   1A8E             WTLoop8:
4183   1A8E B009AAAAAAAA	.byte	$b0,$09,$aa,$aa,$aa,$aa,$aa,$ab,$ab
4183   1A94 AAABAB
4184   1A97 B35767676666	.byte	$b3,$57,$67,$67,$66,$66,$66,$66,$6d
4184   1A9D 66666D
4185   1AA0             ;--------------------------------------------------------
4186   1AA0             
4187   1AA0             
4188   1AA0             ;--------------------------------------------------------
4189   1AA0             MODULE .END
4190   1AA0             ;--------------------------------------------------------
4191   1AA0             
4192   1AA0             
4193   1AA0             ;--------------------------------------------------------
4194   1AA0             ;FFC0 - FFFF    Memory (read / write)
4195   1AA0             ;FFC0 - FFFF    Memory (write only)*
4196   1AA0             ;FFC0 - FFFF    64 byte IPL ROM (read only)*
4197   1AA0             ;--------------------------------------------------------
tasm: Number of errors = 0
