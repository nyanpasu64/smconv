0001   0000             ;========================================================
0002   0000             ; "SM-SPC"
0003   0000             ;
0004   0000             ; snesmod spc driver
0005   0000             ;
0006   0000             ; (c) 2009 Mukunda Johnson
0007   0000             ; (c) 2013 Additional code added by KungFuFurby for pitch modulation and noise generation
0008   0000             ; (c) 2014-2017 Additional code added by Augustus Blackheart and KungFuFurby
0009   0000             ;========================================================
0010   0000             ;#define DEBUGINC inc debug \ mov SPC_PORT0, debug
0011   0000             
0012   0000             .define LBYTE(z) (z & 0FFh)
0013   0000             .define HBYTE(z) (z >> 8)
0014   0000             
0015   0000             .define SPROC TCALL 0
0016   0000             .define SPROC2 SPROC
0017   0000             
0018   0000             ;********************************************************
0019   0000             ; PROTOCOL
0020   0000             ;
0021   0000             ; mm = mimic data
0022   0000             ; id = message id
0023   0000             ; vv = validation data (not previous value)
0024   0000             ; v1 = nonzero validation data (not previous value)
0025   0000             ;
0026   0000             ; SPC PORTS:
0027   0000             ; PORT0 = RESERVED
0028   0000             ; PORT1 = COMMUNICATION
0029   0000             ; PORT2 = STATUS:
0030   0000             ;   MSB fep-cccc LSB
0031   0000             ;   f = module volume fade[out/in] in progress
0032   0000             ;   e = end of module reached (restarted from beginning)
0033   0000             ;   p = module is playing (0 means not playing or preparing...)
0034   0000             ;   cccc = cue, incremented on SF1 pattern effect
0035   0000             ; PORT3 = MODULE POSITION
0036   0000             ; 
0037   0000             ; NAME	ID	DESC
0038   0000             ;--------------------------------------------------------
0039   0000             ; LOAD	00	Upload Module
0040   0000             ; 
0041   0000             ; >> id vv -- --	send message
0042   0000             ; << -- mm -- --	message confirmed
0043   0000             ;
0044   0000             ; >> -- v1 DD DD	transfer module
0045   0000             ; << -- mm -- --	DDDD = data, loop until all words xferred
0046   0000             ;
0047   0000             ; >> -- 00 DD DD	final word
0048   0000             ; << -- mm -- --	okay proceed to transfer sources...
0049   0000             ;
0050   0000             ; for each entry in SOURCE_LIST:
0051   0000             ;
0052   0000             ; >> 01 vv LL LL	send loop point
0053   0000             ; << -- mm -- --	loop point saved
0054   0000             ; >> -- v1 DD DD	transfer source data
0055   0000             ; << -- mm -- --	DDDD = data, loop unti all words xferred
0056   0000             ;
0057   0000             ; >> -- 00 DD DD	transfer last word
0058   0000             ; << -- mm -- --	
0059   0000             ;
0060   0000             ; [loop until all needed sources are transferred]
0061   0000             ;
0062   0000             ; >> 00 vv -- --	terminate transfer
0063   0000             ; << -- mm -- --
0064   0000             ;
0065   0000             ; notes:
0066   0000             ;   this function resets the memory system
0067   0000             ;   all sound effects will become invalid
0068   0000             ; 
0069   0000             ;   after final sample transferred the system may
0070   0000             ;   be halted for some time to setup the echo delay.
0071   0000             ;--------------------------------------------------------
0072   0000             ; VOL	02	Set Master Volume
0073   0000             ;
0074   0000             ; >> id vv VV --
0075   0000             ; << -- mm -- --
0076   0000             ;
0077   0000             ; VV = master volume level (0..127)
0078   0000             ;--------------------------------------------------------
0079   0000             ; PLAY	03	Play Module
0080   0000             ;
0081   0000             ; >> id vv -- pp
0082   0000             ; << -- mm -- --
0083   0000             ;
0084   0000             ; pp = start position
0085   0000             ;--------------------------------------------------------
0086   0000             ; STOP	04	Stop Playback
0087   0000             ;
0088   0000             ; >> id vv -- --
0089   0000             ; << -- mm -- --
0090   0000             ;--------------------------------------------------------
0091   0000             ; MVOL	05	Set Module Volume
0092   0000             ;
0093   0000             ; >> id vv -- VV
0094   0000             ; << -- mm -- --
0095   0000             ;
0096   0000             ; VV = 0..255 new module volume scale
0097   0000             ;--------------------------------------------------------
0098   0000             ; FADE	06	Fade Module Volume
0099   0000             ;
0100   0000             ; >> id vv tt VV
0101   0000             ; << -- mm -- --
0102   0000             ;
0103   0000             ; VV = 0..255 target volume level
0104   0000             ; tt = fade speed (added every m tick)
0105   0000             ;--------------------------------------------------------
0106   0000             ; RES	07	Reset
0107   0000             ;
0108   0000             ; >> id vv -- --
0109   0000             ; 
0110   0000             ; <driver unloaded>
0111   0000             ;--------------------------------------------------------
0112   0000             ; TEST	09	Test function
0113   0000             ;
0114   0000             ; >> id vv -- --
0115   0000             ; << -- mm -- --
0116   0000             ;********************************************************
0117   0000             
0118   0000             
0119   0000             ;*****************************************************************************************
0120   0000             ; dsp registers		; Nocash SNES Specs
0121   0000             ;*****************************************************************************************
0122   0000             DSPV_VOL	=00h	; Left volume for Voice 0..7 (R/W)
0123   0000             DSPV_VOLR	=01h	; Right volume for Voice 0..7 (R/W)
0124   0000             DSPV_PL		=02h	; Pitch scaler for Voice 0..7, lower 8bit (R/W)
0125   0000             DSPV_PH		=03h	; Pitch scaler for Voice 0..7, upper 6bit (R/W)
0126   0000             DSPV_SRCN	=04h	; Source number for Voice 0..7 (R/W)
0127   0000             DSPV_ADSR1	=05h	; ADSR settings for Voice 0..7, lower 8bit (R/W)
0128   0000             DSPV_ADSR2	=06h	; ADSR settings for Voice 0..7, upper 8bit (R/W
0129   0000             DSPV_GAIN	=07h	; Gain settings for Voice 0..7 (R/W)
0130   0000             DSPV_ENVX	=08h	; Current envelope value for Voice 0..7 (R)
0131   0000             DSPV_OUTX	=09h	; Current sample value for Voice 0..7 (R) 
0132   0000             
0133   0000             ;		=0Ah	; Unused (8 bytes of general-purpose RAM) (R/W)
0134   0000             ;		=1Ah	; These registers seem to have no function at all.
0135   0000             ;		=2Ah	; Data written to them seems to have no effect on
0136   0000             ;		=3Ah	; sound output, the written values seem to be left
0137   0000             ;		=4Ah	; intact (ie. they aren't overwritten by voice or
0138   0000             ;		=5Ah	; or echo status information).
0139   0000             ;		=6Ah	;
0140   0000             ;		=7Ah	;
0141   0000             
0142   0000             ;		=0Bh	; Unused (8 bytes of general-purpose RAM) (R/W)
0143   0000             ;		=1Bh	;
0144   0000             ;		=2Bh	;
0145   0000             ;		=3Bh	;
0146   0000             ;		=4Bh	;
0147   0000             ;		=5Bh	;
0148   0000             ;		=6Bh	;
0149   0000             ;		=7Bh	;
0150   0000             
0151   0000             			; volume: (negative = phase inverted)
0152   0000             DSP_MVOL	=0Ch	; Left channel master volume (R/W)  :: (-127..+127) -128 causes
0153   0000             DSP_MVOLR	=1Ch	; Right channel master volume (R/W) :: multiply overflows
0154   0000             DSP_EVOL	=2Ch	; Left channel echo volume  :: (-128..+127) -128 can be safely
0155   0000             DSP_EVOLR	=3Ch	; Right channel echo volume :: used
0156   0000             DSP_KON		=4Ch	; Flags for Voice 0..7 (0=No change, 1=Key On) (W)
0157   0000             DSP_KOF		=5Ch	; Flags for Voice 0..7 (0=No change, 1=Key Off) (R/W)
0158   0000             DSP_FLG		=6Ch	; Reset, Mute, Echo-Write flags and Noise Clock (R/W)
0159   0000             			; 0-4 Noise frequency (0=Stop, 1=16Hz, 2=21Hz, ..., 1Eh=16kHz, 1Fh=32kHz)
0160   0000             			; 5   Echo Buffer Writes (0=Enable, 1=Disable) (doesn't disable echo-reads)
0161   0000             			; 6   Mute Amplifier     (0=Normal, 1=Mute) (doesn't stop internal processing)
0162   0000             			; 7   Soft Reset         (0=Normal, 1=KeyOff all voices, and set Envelopes=0)
0163   0000             DSP_ENDX	=7Ch	; Voice End Flags for Voice 0..7 (R) (W=Ack)
0164   0000             
0165   0000             DSP_EFB		=0Dh	; Echo feedback volume (R/W)
0166   0000             ;		=1Dh	; Unused (1 byte of general-purpose RAM) (R/W)
0167   0000             DSP_PMON	=2Dh	; Pitch Modulation Enable Flags for Voice 1..7 (R/W) (see notes below)
0168   0000             DSP_NON		=3Dh	; Noise Enable Flags for Voice 0..7 (R/W)
0169   0000             DSP_EON		=4Dh	; Echo Enable Flags for Voice 0..7 (R/W)
0170   0000             DSP_DIR		=5Dh	; Sample table address (R/W)
0171   0000             			; 0-7   Sample Table Address (in 256-byte steps) (indexed via DSPV_SRCN)
0172   0000             			; The table can contain up to 256 four-byte entries (max 1Kbyte). Each
0173   0000             			; entry is: 
0174   0000             			; Byte 0-1  BRR Start Address (used when voice is Keyed-ON)
0175   0000             			; Byte 2-3  BRR Restart/Loop Address (used when end of BRR data reached)
0176   0000             			; Changing DIR or VxSRCN has no immediate effect (until/unless voices
0177   0000             			; are newly Looped or Keyed-ON).
0178   0000             
0179   0000             DSP_ESA		=6Dh	; Echo ring buffer address (R/W)
0180   0000             DSP_EDL		=7Dh	; Echo delay (ring buffer size) (R/W)
0181   0000             
0182   0000             ;		=0Eh	; Unused (8 bytes of general-purpose RAM) (R/W)
0183   0000             ;		=1Eh	;
0184   0000             ;		=2Eh	;
0185   0000             ;		=3Eh	;
0186   0000             ;		=4Eh	;
0187   0000             ;		=5Eh	;
0188   0000             ;		=6Eh	;
0189   0000             ;		=7Eh	;
0190   0000             
0191   0000             DSP_C0		=0Fh	; Echo FIR filter coefficient 0..7 (R/W)
0192   0000             DSP_C1		=1Fh	; Value -128 should not be used for any of the FIRx
0193   0000             DSP_C2		=2Fh	; registers (to avoid multiply overflows). To avoid
0194   0000             DSP_C3		=3Fh	; additional overflows: The sum of POSITIVE values
0195   0000             DSP_C4		=4Fh	; in the first seven registers (FIR0..FIR6) should
0196   0000             DSP_C5		=5Fh	; not exceed +7Fh, and the sum of NEGATIVE values
0197   0000             DSP_C6		=6Fh	; should not exceed -7Fh. The sum of all eight
0198   0000             DSP_C7		=7Fh	; registers (FIR0..FIR7) should be usually around +80h
0199   0000             
0200   0000             ;-----------------------;
0201   0000             
0202   0000             ; 2Dh - PMON - Pitch Modulation Enable Flags for Voice 1..7 (R/W)
0203   0000             ; Pitch modulation allows to generate "Frequency Sweep" effects by mis-using the
0204   0000             ; amplitude from channel (x-1) as pitch factor for channel (x).
0205   0000             ;  0    Not used
0206   0000             ;  1-7  Flags for Voice 1..7 (0=Normal, 1=Modulate by Voice 0..6)
0207   0000             ; For example, output a very loud 1Hz sine-wave on channel 4 (with Direct
0208   0000             ; Gain=40h, and with Left/Right volume=0; unless you actually want to output it
0209   0000             ; to the speaker). Then additionally output a 2kHz sine wave on channel 5 with
0210   0000             ; PMON.Bit5 set. The "2kHz" sound should then repeatedly sweep within 1kHz..3kHz
0211   0000             ; range (or, for a more decent sweep in 1.8kHz..2.2kHz range, drop the Gain
0212   0000             ; level of channel 4)
0213   0000             
0214   0000             ; x5h/x6h - ADSR 1/2
0215   0000             ;  0-3   4bit Attack rate   ;Rate=N*2+1, Step=+32 (or Step=+1024 when Rate=31)
0216   0000             ;  4-6   3bit Decay rate    ;Rate=N*2+16, Step=-(((Level-1) SAR 8)+1)
0217   0000             ;  7     ADSR/Gain Select   ;0=Use VxGAIN, 1=Use VxADSR (Attack/Decay/Sustain)
0218   0000             ;  8-12  5bit Sustain rate  ;Rate=N, Step=-(((Level-1) SAR 8)+1)
0219   0000             ;  13-15 3bit Sustain level ;Boundary=(N+1)*100h
0220   0000             ;  N/A   0bit Release rate  ;Rate=31, Step=-8 (or Step=-800h when BRR-end)
0221   0000             
0222   0000             ; Echo Overflows
0223   0000             ; Setting FIRx, EFB, or EVOLx to -128 does probably cause multiply overflows?
0224   0000             
0225   0000             FLG_NOISE	=0E0h
0226   0000             FLG_RESET	=80h
0227   0000             FLG_MUTE	=40h
0228   0000             FLG_ECEN	=20h
0229   0000             
0230   0000             #define SETDSP(xx,yy) mov SPC_DSPA, #xx\ mov SPC_DSPD, #yy
0231   0000             
0232   0000             ;*****************************************************************************************
0233   0000             ; module defs
0234   0000             ;*****************************************************************************************
0235   0000             
0236   0000             MOD_IV		=00H	; INITIAL VOLUME
0237   0000             MOD_IT		=01H	; INITIAL TEMPO
0238   0000             MOD_IS		=02H	; INITIAL SPEED
0239   0000             MOD_CV		=03H	; INITIAL CHANNEL VOLUME
0240   0000             MOD_CP		=0BH	; INITIAL CHANNEL PANNING
0241   0000             MOD_EVOL	=13H	; ECHO VOLUME (LEFT)
0242   0000             MOD_EVOLR	=14H	; ECHO VOLUME (RIGHT)
0243   0000             MOD_EDL		=15H	; ECHO DELAY
0244   0000             MOD_EFB		=16H	; ECHO FEEDBACK
0245   0000             MOD_EFIR	=17H	; ECHO FIR COEFS
0246   0000             MOD_EON		=1FH	; ECHO ENABLE BITS
0247   0000             MOD_SEQU	=20H	; SEQUENCE
0248   0000             MOD_PTABLE_L	=0E8H	; PATTERN TABLE
0249   0000             MOD_PTABLE_H	=128H	; 
0250   0000             MOD_ITABLE_L	=168H	; INSTRUMENT TABLE
0251   0000             MOD_ITABLE_H	=1A8H	; 
0252   0000             MOD_STABLE_L	=1E8H	; SAMPLE TABLE
0253   0000             MOD_STABLE_H	=228H	;
0254   0000             
0255   0000             INS_FADEOUT	=00H
0256   0000             INS_SAMPLE	=01H
0257   0000             INS_GVOL	=02H
0258   0000             INS_SETPAN	=03H
0259   0000             INS_ENVLEN	=04H
0260   0000             INS_ENVSUS	=05H
0261   0000             INS_ENVLOOPST	=06H
0262   0000             INS_ENVLOOPEND	=07H
0263   0000             INS_ENVDATA	=08H
0264   0000             
0265   0000             SAMP_DVOL	=00H
0266   0000             SAMP_GVOL	=01H
0267   0000             SAMP_PITCHBASE	=02H
0268   0000             SAMP_DINDEX	=04H
0269   0000             SAMP_SETPAN	=05H
0270   0000             
0271   0000             
0272   0000             ;*****************************************************************************
0273   0000             ; 0000 - 00EF   zero-page memory
0274   0000             ;*****************************************************************************
0275   0000             
0276   0000             
0277   0000             xfer_address:	.block 2
0278   0002             m0:		.block 2
0279   0004             m1:		.block 2
0280   0006             m2:		.block 2
0281   0008             m3:		.block 2
0282   000A             m4:		.block 2
0283   000C             m5:		.block 2
0284   000E             m6:		.block 2
0285   0010             ;next_sample:	.block 1
0286   0010             comms_v:	.block 1 ; communication variable
0287   0011             
0288   0011             ;stream_size:	.block 1
0289   0011             ;stream_region:	.block 1
0290   0011             
0291   0011             STREAM_REGION = 0FFh
0292   0011             
0293   0011             ;mod_active:	.block 1
0294   0011             mod_position:	.block 1
0295   0012             mod_tick:	.block 1
0296   0013             mod_row:	.block 1
0297   0014             mod_bpm:	.block 1
0298   0015             mod_speed:	.block 1
0299   0016             mod_speed_bk:	.block 1
0300   0017             mod_gvol:	.block 1
0301   0018             
0302   0018             module_vol:	.block 1 ; module volume
0303   0019             module_fadeT:	.block 1 ; module volume fade target
0304   001A             module_fadeR:	.block 1 ; module volume fade rate
0305   001B             module_fadeC:	.block 1 ; timer counter
0306   001C             
0307   001C             evol_l:		.block 1
0308   001D             evol_r:		.block 1
0309   001E             
0310   001E             patt_addr:	.block 2
0311   0020             patt_rows:	.block 1
0312   0021             ;pattjump_enable: .block 1
0313   0021             pattjump_index:	.block 1 ; 0 = no pattern jump
0314   0022             patt_update:	.block 1 ; PATTERN UPDATE FLAGS
0315   0023             
0316   0023             ch_start:
0317   0023             ch_pitch_l:	.block 8
0318   002B             ch_pitch_h:	.block 8
0319   0033             ch_volume:	.block 8 ; 0..64
0320   003B             ch_cvolume:	.block 8 ; 0..128 (IT = 0..64)
0321   0043             ch_panning:	.block 8 ; 0..64
0322   004B             ch_cmem:	.block 8
0323   0053             ch_note:	.block 8
0324   005B             ch_instr:	.block 8
0325   0063             ch_vcmd:	.block 8
0326   006B             ch_command:	.block 8
0327   0073             ch_param:	.block 8
0328   007B             ch_sample:	.block 8
0329   0083             ch_flags:	.block 8
0330   008B             ch_env_y_l:	.block 8
0331   0093             ch_env_y_h:	.block 8
0332   009B             ch_env_node:	.block 8
0333   00A3             ch_env_tick:	.block 8
0334   00AB             ch_env_vib:	.block 8
0335   00B3             ch_vib_wav:	.block 8 ; for negative sine values and triangle
0336   00BB             ch_fadeout:	.block 8
0337   00C3             ;ch_ad:		.block 4
0338   00C3             ;ch_sr:		.block 4
0339   00C3             ch_end:
0340   00C3             
0341   00C3             MAX_ADSR_CHANNELS:	=4
0342   00C3             
0343   00C3             ; channel processing variables:
0344   00C3             t_hasdata:	.block 1
0345   00C4             ;t_sampoff:	.block 1 ; sample offset not yet implemented
0346   00C4             t_volume:	.block 1
0347   00C5             t_panning:	.block 1
0348   00C6             t_pitch:
0349   00C6             t_pitch_l:	.block 1
0350   00C7             t_pitch_h:	.block 1
0351   00C8             t_flags:	.block 1
0352   00C9             t_env:		.block 1 ; 0..255
0353   00CA             
0354   00CA             p_instr:	.block 2
0355   00CC             
0356   00CC             STATUS:		.block 1
0357   00CD             STATUS_P	=32
0358   00CD             STATUS_E	=64
0359   00CD             STATUS_F	=128
0360   00CD             
0361   00CD             ;debug:		.block 1
0362   00CD             
0363   00CD             CF_NOTE		=1
0364   00CD             CF_INSTR	=2
0365   00CD             CF_VCMD		=4
0366   00CD             CF_CMD		=8
0367   00CD             CF_KEYON	=16
0368   00CD             CF_FADE		=32
0369   00CD             CF_SURROUND	=64
0370   00CD             
0371   00CD             TF_START	=80H
0372   00CD             TF_DELAY	=2
0373   00CD             
0374   00CD             ;---------------------------
0375   00CD             ; extras
0376   00CD             ;---------------------------
0377   00CD             STANDARD        = 7
0378   00CD             BANDPASS        = 15
0379   00CD             HIGHPASS        = 23
0380   00CD             LOWPASS         = 31
0381   00CD             CUSTOM1		= 39
0382   00CD             CUSTOM2		= 47
0383   00CD             
0384   00CD             current_evol:		.block 1
0385   00CE             current_evol_time:	.block 1
0386   00CF             current_filter_time:	.block 1
0387   00D0             current_noise_time:	.block 1
0388   00D1             current_wt_time:	.block 1
0389   00D2             evol_fb:		.block 1
0390   00D3             evol_max:		.block 1
0391   00D4             evol_min:		.block 1
0392   00D5             evol_time:		.block 1
0393   00D6             filter_cmp:		.block 1
0394   00D7             filter_time:		.block 1
0395   00D8             ;filter_delay1:		.block 1
0396   00D8             ;filter_delay2:		.block 1
0397   00D8             ;filter_delay3:		.block 1
0398   00D8             filter_values:		.block 8
0399   00E0             ;min_bp_filter:		.block 1
0400   00E0             noise_sweep_endmax:	.block 1
0401   00E1             noise_sweep_endmin:	.block 1
0402   00E2             noise_sweep_start:	.block 1
0403   00E3             noise_time:		.block 1
0404   00E4             noise_value:		.block 1
0405   00E5             parameter_mode:		.block 1
0406   00E6             wt_cur:			.block 1
0407   00E7             ;wt_max:		.block 1
0408   00E7             ;wt_min:		.block 1
0409   00E7             wt_sample_high:		.block 1
0410   00E8             wt_sample_low:		.block 1
0411   00E9             wt_time:		.block 1
0412   00EA             special:		.block 1
0413   00EB             
0414   00EB             SF_MODACTIVE		=1	; mod_active
0415   00EB             SF_EVOLINC		=2	; filter sweep evol (inc/dec)
0416   00EB             SF_WTDIR		=4	; (inc/dec)
0417   00EB             SF_NOISESWEEP		=8	; noise frequency cylce (off/on)
0418   00EB             SF_NOISEINC		=16	; noise frequency (dec/inc)
0419   00EB             SF_SWINGTEMPO		=32	; swing tempo (off/on)
0420   00EB             SF_SWINGODD		=64	; swing tempo (odd/even)
0421   00EB             SF_PATTERNJUMP		=128	; pattern jump (off/on)
0422   00EB             
0423   00EB             special_mode:		.block 1
0424   00EC             
0425   00EC             SM_FILTERSWEEP		=1	; filter sweep (off/on)
0426   00EC             SM_3AFRESET		=2	; reset all before S3[A-F]
0427   00EC             SM_WAVETABLE		=4	; (enable/disable)
0428   00EC             SM_MVOLEVOLDIR		=8	; (inc evol dec mvol/dec evol inc mvol)
0429   00EC             SM_NOISEREPEAT		=16	; (once/repeat)
0430   00EC             SM_NOISEMODE		=32	; (normal/ping pong)
0431   00EC             SM_PANBRELLO		=64	; (off/on)
0432   00EC             SM_TREMOLO		=128	; (off/on)
0433   00EC             
0434   00EC             swing_tempo_mod:	.block 1
0435   00ED             
0436   00ED             DEFAULT_EVOL_MAX:	=64
0437   00ED             DEFAULT_EVOL_MIN:	=32
0438   00ED             DEFAULT_FILTER_DELAY1:	=10
0439   00ED             DEFAULT_FILTER_DELAY2:	=12
0440   00ED             DEFAULT_FILTER_DELAY3:	=14
0441   00ED             DEFAULT_FILTER_TIME:	=80h	; {3-255}
0442   00ED             DEFAULT_MAX_NOISE:	=1Fh
0443   00ED             DEFAULT_MODVOL:		=8Fh
0444   00ED             DEFAULT_MVOL:		=50h	; xmsnes 32h
0445   00ED             DEFAULT_NOISE_TIME:	=80h
0446   00ED             DEFAULT_RAMP_POS:	=40h
0447   00ED             DEFAULT_RAMP_NEG:	=0bfh
0448   00ED             DEFAULT_SQ_POS:		=40h
0449   00ED             DEFAULT_SQ_NEG:		=00h
0450   00ED             DEFAULT_SWING:		=1
0451   00ED             DEFAULT_TEMPO:		=4eh	; original in snesmod was 50h
0452   00ED             DEFAULT_VOL_SAT:	=64
0453   00ED             DEFAULT_WT_MAX:		=8
0454   00ED             DEFAULT_WT_MIN:		=0
0455   00ED             
0456   00ED             Z_SURROUND	=1
0457   00ED             Z_MUTE		=2
0458   00ED             Z_UNMUTE	=3
0459   00ED             Z_DIRECTGAIN	=5
0460   00ED             Z_CHFS_W_RES	=6
0461   00ED             Z_CHFS		=7
0462   00ED             Z_EFIR		=8
0463   00ED             Z_MVOL		=9
0464   00ED             Z_EVOL		=10
0465   00ED             Z_EFB		=11
0466   00ED             Z_EDL		=12
0467   00ED             Z_ETIMENOISE	=13
0468   00ED             Z_MINMAX	=14
0469   00ED             Z_FILTERTIME	=15
0470   00ED             
0471   00ED             ;-----------------------------------------------------------------------------
0472   00ED             
0473   00ED             
0474   00ED             ;*****************************************************************************
0475   00ED             ; 00F0 - 00FF	Registers
0476   00ED             ;*****************************************************************************
0477   00ED             
0478   00ED             
0479   00ED             SPC_TEST	=0F0h ; Testing functions (W)                                  0Ah
0480   00ED             SPC_CONTROL	=0F1h ; Timer, I/O and ROM Control (W)                         80h
0481   00ED             		      ; bits 0-2 timer enables (1=on), bits 4-5 are I/O port clear bits (11=clear all)
0482   00ED             SPC_DSP		=0F2h ; DSP Register Index (R/W)
0483   00ED             SPC_DSPA	=0F2h ; 
0484   00ED             SPC_DSPD	=0F3h ; DSP Register Data (R/W)
0485   00ED             SPC_PORT0	=0F4h ; CPU Input and Output Register 0 (R and W)      R=00h,W=00h
0486   00ED             SPC_PORT1	=0F5h ; CPU Input and Output Register 1 (R and W)      R=00h,W=00h
0487   00ED             SPC_PORT2	=0F6h ; CPU Input and Output Register 2 (R and W)      R=00h,W=00h
0488   00ED             SPC_PORT3	=0F7h ; CPU Input and Output Register 3 (R and W)      R=00h,W=00h
0489   00ED             SPC_AUXPORT4	=0F8h ; External I/O Port P4 (S-SMP Pins 34-27) (R/W) (unused) FFh
0490   00ED             SPC_AUXPORT5	=0F9h ; External I/O Port P5 (S-SMP Pins 25-18) (R/W) (unused) FFh
0491   00ED             SPC_TIMER0	=0FAh ; Timer 0 Divider (for 8000Hz clock source) (W)
0492   00ED             SPC_TIMER1	=0FBh ; Timer 1 Divider (for 8000Hz clock source) (W)
0493   00ED             SPC_TIMER2	=0FCh ; Timer 2 Divider (for 64000Hz clock source) (W)
0494   00ED             SPC_COUNTER0	=0FDh ; Timer 0 Output (R)
0495   00ED             SPC_COUNTER1	=0FEh ; Timer 1 Output (R)
0496   00ED             SPC_COUNTER2	=0FFh ; Timer 2 Output (R)
0497   00ED             
0498   00ED             DEBUG_P0 = SPC_PORT0
0499   00ED             DEBUG_P2 = SPC_PORT2
0500   00ED             ;-----------------------------------------------------------------------------
0501   00ED             
0502   00ED             
0503   00ED             ;*****************************************************************************
0504   00ED             ; 0100 - 01FF	Page 1, mainly used for stack space
0505   00ED             ;*****************************************************************************
0506   00ED             ;-----------------------------------------------------------------------------
0507   00ED             
0508   00ED             
0509   00ED             ;*****************************************************************************
0510   00ED             ; 0200 - 02FF	Sample Directory
0511   00ED             ;*****************************************************************************
0512   00ED             SampleDirectory		=0200h	; 256 bytes	(64-sample directory)
0513   00ED             ;-----------------------------------------------------------------------------
0514   00ED             
0515   00ED             
0516   00ED             ;*****************************************************************************
0517   00ED             ; 0300 - 037F   Pattern Memory
0518   00ED             ;-----------------------------------------------------------------------------
0519   00ED             PatternMemory		=0300h	; 16*8 bytes
0520   00ED             ;-----------------------------------------------------------------------------
0521   00ED             
0522   00ED             
0523   00ED             ;*****************************************************************************
0524   0380             .org 380h	; program
0525   0380             ;*****************************************************************************
0526   0380             
0527   0380             
0528   0380             ;-------------------------------------------------------;---------------------
0529   0380             main:							;
0530   0380             ;-------------------------------------------------------;---------------------
0531   0380 3F 1E 05    	call	ClearMemory				;
0532   0383             							;
0533   0383 8F 00 F5    	mov	SPC_PORT1, #0				; reset some ports
0534   0386 8F 00 F6    	mov	SPC_PORT2, #0				;
0535   0389 8F 00 F7    	mov	SPC_PORT3, #0				;
0536   038C 8F 00 F1    	mov	SPC_CONTROL, #0				; reset control
0537   038F 8F FF FB    	mov	SPC_TIMER1, #255			; reset fade timer
0538   0392             							;----------------
0539   0392 8F 5D F2    	mov	SPC_DSPA, #DSP_DIR			; set source dir
0540   0395 8F 02 F3    	mov	SPC_DSPD, #HBYTE(SampleDirectory)	;
0541   0398             							;
0542   0398 3F 17 05    	call	ResetMemory				;
0543   039B             
0544   039B             ;**************************************************************************************
0545   039B             ;* setup streaming system
0546   039B             ;**************************************************************************************
0547   039B             	;mov	stream_size, #0			;
0548   039B             	;mov	a, #0FFh			; calc streaming region address H
0549   039B             	;setc					;
0550   039B             	;sbc	a, stream_size			;
0551   039B             	;mov	stream_region, a		;
0552   039B             ;--------------------------------------------------------------------------------------
0553   039B E8 96       	mov	a, #LBYTE(__BRK_ROUTINE__)	; set BRK/TCALL0 vector
0554   039D C5 DE FF    	mov	!0FFDEH, a			;
0555   03A0 E8 13       	mov	a, #HBYTE(__BRK_ROUTINE__)	;
0556   03A2 C5 DF FF    	mov	!0FFDFH, a			;
0557   03A5             ;--------------------------------------------------------------------------------------
0558   03A5 3F 90 11    	call	ResetMasterVolume
0559   03A8 8F 06 F1    	mov	SPC_CONTROL, #%110
0560   03AB             ;----------------------------------------------------------------------
0561   03AB 2F 08       	bra	patch1			; patch for it->spc conversion ; 043eh, 043fh
0562   03AD             					;
0563   03AD 3F B9 06    	call	Module_Stop		;
0564   03B0 E8 00       	mov	a, #0			;
0565   03B2 3F C3 06    	call	Module_Start		;
0566   03B5             patch1:					;
0567   03B5             ;----------------------------------------------------------------------
0568   03B5             
0569   03B5             ;--------------------------------------------------------
0570   03B5             main_loop:
0571   03B5             ;--------------------------------------------------------
0572   03B5             
0573   03B5 01          	SPROC2
0574   03B6 3F 6A 05    	call	ProcessComms
0575   03B9 01          	SPROC
0576   03BA 3F 54 07    	call	ProcessFade
0577   03BD 01          	SPROC
0578   03BE 3F 8A 07    	call	Module_Update
0579   03C1 01          	SPROC
0580   03C2 3F 10 05    	call	UpdatePorts
0581   03C5             
0582   03C5 53 EB 10    	bbc2	special_mode, skip_wavetable	; test SM_WAVETABLE
0583   03C8             
0584   03C8 AB D1       	inc	current_wt_time
0585   03CA 69 E9 D1    	cmp	current_wt_time, wt_time
0586   03CD D0 09       	bne	skip_wavetable
0587   03CF             
0588   03CF 8F 00 D1    	mov	current_wt_time, #0
0589   03D2 EB E6       	mov	y, wt_cur
0590   03D4             
0591   03D4 01          	SPROC
0592   03D5 3F E1 04    	call	WaveTable
0593   03D8             
0594   03D8             skip_wavetable:
0595   03D8 13 EB 0E    	bbc0	special_mode, skip_filter_sweep	; test SM_FILTERSWEEP
0596   03DB             
0597   03DB AB CF       	inc	current_filter_time
0598   03DD 69 CF D7    	cmp	filter_time, current_filter_time
0599   03E0 D0 07       	bne	skip_filter_sweep
0600   03E2             
0601   03E2 8F 00 CF    	mov	current_filter_time, #0
0602   03E5 01          	SPROC
0603   03E6 3F FC 03    	call	FilterSweep
0604   03E9             
0605   03E9             skip_filter_sweep:
0606   03E9 73 EA 0E    	bbc3	special, skip_noise_freq		; test SF_NOISESWEEP
0607   03EC             
0608   03EC AB D0       	inc	current_noise_time
0609   03EE 69 D0 E3    	cmp	noise_time, current_noise_time
0610   03F1 D0 C2       	bne	main_loop
0611   03F3             
0612   03F3 8F 00 D0    	mov	current_noise_time, #0
0613   03F6 01          	SPROC
0614   03F7 3F A7 04    	call	NoiseFreqSweep
0615   03FA             
0616   03FA             skip_noise_freq:
0617   03FA 2F B9       	bra	main_loop
0618   03FC             
0619   03FC             ;--------------------------------------------------------
0620   03FC             FilterSweep:
0621   03FC             ;--------------------------------------------------------
0622   03FC 3F 79 04    	call	EVOLSweep		; m0 = current channel target value
0623   03FF 8F 00 06    	mov	m2, #0			; m1 = current value
0624   0402 8F 00 08    	mov	m3, #0			; m2 = total pos filter values
0625   0405 CD 07       	mov	x, #7			; m3 = total neg filter values
0626   0407             					; m4 = tmp for converting neg to pos
0627   0407             _filter_sweep:				;
0628   0407 4D          	push	x			;
0629   0408             _overflow_check:			;
0630   0408 F5 37 08    	mov	a, !CBITS+x		;
0631   040B C4 F2       	mov	SPC_DSPA, a		;
0632   040D E4 F3       	mov	a, SPC_DSPD		;
0633   040F C4 04       	mov	m1, a			;
0634   0411 30 05       	bmi	_check_neg		;
0635   0413             					;
0636   0413 89 04 06    	adc	m2, m1			; adding positive values together
0637   0416 2F 08       	bra	_dex			;
0638   0418             					;
0639   0418             _check_neg:				;
0640   0418 48 FF       	eor	a, #0FFh		;
0641   041A BC          	inc	a			;
0642   041B C4 0A       	mov	m4, a			;
0643   041D 89 0A 08    	adc	m3, m4			; adding negative values together
0644   0420             					;
0645   0420 1D          _dex:	dec	x			;
0646   0421 10 E5       	bpl	_overflow_check		;
0647   0423             ;---------------------------------------;
0648   0423 CE          	pop	x			;
0649   0424 2F 01       	bra	_channel_mode		;
0650   0426             ;---------------------------------------;
0651   0426 1D          _cm_dx:	dec	x			;
0652   0427             ;---------------------------------------;
0653   0427             _channel_mode:				;
0654   0427             ;---------------------------------------;
0655   0427 F4 D8       	mov	a, filter_values+x	; get target filter value for current channel
0656   0429 68 80       	cmp	a, #80h			; if value is +128, move to next channel
0657   042B F0 F9       	beq	_cm_dx			; skipping the overflow check
0658   042D             					;
0659   042D C4 02       	mov	m0, a			; m0 = current channel target value
0660   042F             ;---------------------------------------;
0661   042F             _select_channel:			;
0662   042F             ;---------------------------------------;
0663   042F F5 37 08    	mov	a, !CBITS+x		;
0664   0432 C4 F2       	mov	SPC_DSPA, a		;
0665   0434 E4 F3       	mov	a, SPC_DSPD		;  a = current filter value
0666   0436 C4 04       	mov	m1, a			; m1 = current filter value
0667   0438 30 12       	bmi	_from_neg		;
0668   043A F0 20       	beq	_from_z			;
0669   043C             					;
0670   043C             _from_pos:				;
0671   043C E4 02       	mov	a, m0			;
0672   043E 30 23       	bmi	_filter_dec		;
0673   0440             					;
0674   0440             _pos_to_pos:				;
0675   0440 69 04 02    	cmp	m0, m1			;
0676   0443 90 1E       	bcc	_filter_dec		;
0677   0445 78 7F 06    	cmp	m2, #7Fh		; do the total positive values exceed 126?
0678   0448 90 1D       	bcc	_filter_inc		; if not decrease is ok (inc is negative dec)
0679   044A 2F 29       	bra	_skip_channel		; total of positive values are too high
0680   044C             					;
0681   044C             _from_neg:				;
0682   044C E4 02       	mov	a, m0			;
0683   044E 10 17       	bpl	_filter_inc		; target is a positive value
0684   0450             					;
0685   0450             _neg_to_neg:				;
0686   0450 69 04 02    	cmp	m0, m1			;
0687   0453 B0 12       	bcs	_filter_inc		;
0688   0455 78 7F 08    	cmp	m3, #7Fh		; do the total negative values exceed 126?
0689   0458 90 09       	bcc	_filter_dec		; if not increase is ok (dec is negative inc)
0690   045A 2F 19       	bra	_skip_channel		; total of positive values are too high
0691   045C             					;
0692   045C             _from_z:				;
0693   045C E4 02       	mov	a, m0			;
0694   045E 69 04 02    	cmp	m0, m1			; target, current value
0695   0461 10 04       	bpl	_filter_inc		;
0696   0463             					;
0697   0463             _filter_dec:				;
0698   0463 8B 04       	dec	m1			; decrease current filter value
0699   0465 2F 02       	bra	_store_new_value	;
0700   0467             					;
0701   0467             _filter_inc:				;
0702   0467 AB 04       	inc	m1			; increase current filter value
0703   0469             					;
0704   0469             _store_new_value:			;
0705   0469 FA 04 F3    	mov	SPC_DSPD, m1		; store current filter value
0706   046C 69 04 02    	cmp	m0, m1			; does current filter value equal target value?
0707   046F D0 04       	bne	_skip_channel		; if not, keep filter sweep enable for current channel
0708   0471             _reset_fv:				;
0709   0471 E8 80       	mov	a, #80h			; disable filter sweep
0710   0473 D4 D8       	mov	filter_values+x, a	; for current channel
0711   0475             ;---------------------------------------;
0712   0475             _skip_channel:				;
0713   0475             ;---------------------------------------;
0714   0475 1D          	dec	x			;
0715   0476 10 8F       	bpl	_filter_sweep		;
0716   0478 6F          	ret				;
0717   0479             
0718   0479             ;--------------------------------------------------------
0719   0479             EVOLSweep:
0720   0479             ;--------------------------------------------------------
0721   0479 78 00 D5    	cmp	evol_time, #0
0722   047C F0 28       	beq	_end_evol
0723   047E AB CE       	inc	current_evol_time
0724   0480 69 D5 CE    	cmp	current_evol_time, evol_time
0725   0483 D0 21       	bne	_end_evol
0726   0485 8F 00 CE    	mov	current_evol_time, #0
0727   0488             _det_dir:
0728   0488 23 EA 09    	bbs1	special, _dec_evol		; test SF_EVOLINC
0729   048B 69 D3 CD    	cmp	current_evol, evol_max
0730   048E F0 16       	beq	_end_evol
0731   0490 AB CD       	inc	current_evol
0732   0492 2F 07       	bra	_set_evol
0733   0494             _dec_evol:
0734   0494 69 D4 CD    	cmp	current_evol, evol_min
0735   0497 F0 0D       	beq	_end_evol
0736   0499 8B CD       	dec	current_evol
0737   049B             _set_evol:
0738   049B E4 CD       	mov	a, current_evol
0739   049D 33 EA 03    	bbc1	special, _skip_neg		; test SF_EVOLINC
0740   04A0 48 FF       	eor	a, #255
0741   04A2 BC          	inc	a
0742   04A3             _skip_neg:
0743   04A3 3F E3 10    	call	Command_EchoVolume2
0744   04A6             _end_evol:
0745   04A6 6F          	ret
0746   04A7             
0747   04A7             ;--------------------------------------------------------
0748   04A7             NoiseFreqSweep:
0749   04A7             ;--------------------------------------------------------
0750   04A7 83 EA 11    	bbs4	special, _do_inc		; test SF_NOISEINC
0751   04AA             _do_dec:
0752   04AA 8B E4       	dec	noise_value
0753   04AC 78 20 E4    	cmp	noise_value, #20h
0754   04AF 90 03       	bcc	_check_min
0755   04B1 FA E2 E4    	mov	noise_value, noise_sweep_start
0756   04B4             _check_min:
0757   04B4 69 E1 E4    	cmp	noise_value, noise_sweep_endmin
0758   04B7 D0 24       	bne	_do_noise
0759   04B9 2F 0F       	bra	_check_pingpong
0760   04BB             
0761   04BB             _do_inc:
0762   04BB AB E4       	inc	noise_value
0763   04BD 78 20 E4    	cmp	noise_value, #20h
0764   04C0 90 03       	bcc	_check_max
0765   04C2 FA E2 E4    	mov	noise_value, noise_sweep_start
0766   04C5             _check_max:
0767   04C5 69 E0 E4    	cmp	noise_value, noise_sweep_endmax
0768   04C8 D0 13       	bne	_do_noise
0769   04CA             
0770   04CA             _check_pingpong:
0771   04CA B3 EB 05    	bbc5	special_mode, _check_repeat		; test SM_NOISEMODE
0772   04CD 58 10 EA    	eor	special, #SF_NOISEINC
0773   04D0 2F 0B       	bra	_do_noise
0774   04D2             _check_repeat:
0775   04D2 93 EB 05    	bbc4	special_mode, _turn_nfc_off		; test SM_NOISEREPEAT
0776   04D5 FA E2 E4    	mov	noise_value, noise_sweep_start
0777   04D8 2F 03       	bra	_do_noise
0778   04DA             
0779   04DA             _turn_nfc_off:
0780   04DA 38 F7 EA    	and	special, #~SF_NOISESWEEP
0781   04DD             
0782   04DD             _do_noise:
0783   04DD 3F EC 0F    	call	SCommand_NoiseFreq1b
0784   04E0             
0785   04E0             check_back_later:
0786   04E0 6F          	ret
0787   04E1             
0788   04E1             ;--------------------------------------------------------
0789   04E1             WaveTable:
0790   04E1             ;--------------------------------------------------------
0791   04E1 53 EA 0A    	bbc2	special, _wt_inc	; test SF_WTDIR
0792   04E4             					;
0793   04E4             _wt_dec:				;
0794   04E4 3F FE 04    	call	_wt_swap_sample		;
0795   04E7 DC          	dec	y			;
0796   04E8 AD 00       	cmp	y, #DEFAULT_WT_MIN	; if minimum is reached switch direction
0797   04EA F0 0D       	beq	_wt_swap_dir		;
0798   04EC 2F 08       	bra	_wt_exit		;
0799   04EE             					;
0800   04EE             _wt_inc:				;
0801   04EE 3F FE 04    	call	_wt_swap_sample		;
0802   04F1 FC          	inc	y			;
0803   04F2 AD 08       	cmp	y, #DEFAULT_WT_MAX	; if maximum is reached switch direction
0804   04F4 F0 03       	beq	_wt_swap_dir		;
0805   04F6             					;
0806   04F6             _wt_exit:				;
0807   04F6 CB E6       	mov	wt_cur, y		;
0808   04F8             _wt_exit2:				;
0809   04F8 6F          	ret				;
0810   04F9             					;
0811   04F9             _wt_swap_dir:				;
0812   04F9 58 04 EA    	eor	special, #SF_WTDIR	;
0813   04FC 2F FA       	bra	_wt_exit2		;
0814   04FE             					;
0815   04FE             _wt_swap_sample:			;
0816   04FE F6 D9 1A    	mov	a, !WaveTable_L+y	;
0817   0501 C5 00 02    	mov	!SampleDirectory, a	; sample start
0818   0504 C5 02 02    	mov	!SampleDirectory+2, a	; loop start
0819   0507 E8 1A       	mov	a, #HBYTE(WTLoop1)	; it's all in 1axxh
0820   0509 C5 01 02    	mov	!SampleDirectory+1, a	; sample start
0821   050C C5 03 02    	mov	!SampleDirectory+3, a	; loop start
0822   050F 6F          	ret				;
0823   0510             
0824   0510             ;--------------------------------------------------------
0825   0510             UpdatePorts:
0826   0510             ;--------------------------------------------------------
0827   0510 FA CC F6    	mov	SPC_PORT2, STATUS
0828   0513 FA 11 F7    	mov	SPC_PORT3, mod_position
0829   0516 6F          	ret
0830   0517             
0831   0517             ;--------------------------------------------------------
0832   0517             ResetMemory:
0833   0517             ;--------------------------------------------------------
0834   0517 8F E1 00    	mov	xfer_address, #LBYTE(MODULE)	; reset transfer address
0835   051A 8F 1A 01    	mov	xfer_address+1, #HBYTE(MODULE)	;
0836   051D             	;mov	next_sample, #0		; reset sample target
0837   051D 6F          	ret
0838   051E             
0839   051E             ;--------------------------------------------------------
0840   051E             ClearMemory:
0841   051E             ;--------------------------------------------------------
0842   051E CD 00               mov     x, #0
0843   0520             ;--------------------------------------------------------
0844   0520             ClearMemoryX:
0845   0520             ;--------------------------------------------------------
0846   0520 E8 00               mov     a, #0
0847   0522             _clrmem:
0848   0522 AF                  mov     (X)+, a
0849   0523 C8 F0               cmp     x, #0F0h
0850   0525 D0 FB               bne     _clrmem
0851   0527             
0852   0527 6F          	ret
0853   0528             
0854   0528             ;--------------------------------------------------------
0855   0528             ResetSound:
0856   0528             ;--------------------------------------------------------
0857   0528 8F 5C F2    	SETDSP( DSP_KOF, 0FFh );
0857   052B 8F FF F3    
0858   052E 8F 6C F2    	SETDSP( DSP_FLG, FLG_ECEN );
0858   0531 8F 20 F3    
0859   0534 8F 2D F2    	SETDSP( DSP_PMON, 0 );
0859   0537 8F 00 F3    
0860   053A 8F 2C F2    	SETDSP( DSP_EVOL, 0 );
0860   053D 8F 00 F3    
0861   0540 8F 3C F2    	SETDSP( DSP_EVOLR, 0 );
0861   0543 8F 00 F3    
0862   0546 8F 3D F2    	SETDSP( DSP_NON, 00h );
0862   0549 8F 00 F3    
0863   054C 8F 5C F2    	SETDSP( DSP_KOF, 000h ); this is weird
0863   054F 8F 00 F3    
0864   0552             
0865   0552 CD 16       	mov	x, #16h
0866   0554 3F 20 05    	call	ClearMemoryX
0867   0557 8F 40 D3    	mov	evol_max, #DEFAULT_EVOL_MAX
0868   055A 8F 20 D4    	mov	evol_min, #DEFAULT_EVOL_MIN
0869   055D 8F 80 D7    	mov	filter_time, #DEFAULT_FILTER_TIME
0870   0560 8F 8F 18    	mov	module_vol, #DEFAULT_MODVOL
0871   0563 8F FF 19    	mov	module_fadeT, #255
0872   0566 8F 1F E0    	mov	noise_sweep_endmax, #DEFAULT_MAX_NOISE
0873   0569             	;mov	wt_max, #DEFAULT_WT_MAX
0874   0569             	;mov	wt_min, #DEFAULT_WT_MIN
0875   0569 6F          	ret
0876   056A             
0877   056A             ;--------------------------------------------------------
0878   056A             ProcessComms:
0879   056A             ;--------------------------------------------------------
0880   056A 69 F5 10    	cmp	comms_v, SPC_PORT1	; test for command
0881   056D D0 01       	bne	_new_message		;
0882   056F 6F          	ret				; <no message>
0883   0570             					;
0884   0570             _new_message:				;
0885   0570 FA F5 10    	mov	comms_v, SPC_PORT1	; copy V
0886   0573 E4 F4       	mov	a, SPC_PORT0		; jump to message
0887   0575 00          	nop				; verify data
0888   0576 64 F4       	cmp	a, SPC_PORT0		;
0889   0578 D0 F6       	bne	_new_message		;
0890   057A 28 7F       	and	a, #127			; mask 7 bits
0891   057C 1C          	asl	a			;
0892   057D 5D          	mov	x, a			;
0893   057E 1F 81 05    	jmp	[CommandTable+x]	;'
0894   0581             ;--------------------------------------------------------
0895   0581             CommandTable:
0896   0581             ;--------------------------------------------------------
0897   0581 B7 05       	.word	CMD_LOAD		; 00h - load module
0898   0583 00 06       	.word	CMD_LOADE		; 01h - CMD_LOADE load sound DISABLED
0899   0585 AD 05       	.word	CMD_NULL		; 02h - CMD_VOL set volume DISABLED
0900   0587             ;--------------------------------------------------------
0901   0587 39 06       	.word	CMD_PLAY		; 03h - play
0902   0589 AA 05       	.word	CMD_STOP		; 04h - stop
0903   058B AF 05       	.word	CMD_MVOL		; 05h - set module volume
0904   058D 9C 05       	.word	CMD_FADE		; 06h - fade module volume
0905   058F             ;--------------------------------------------------------
0906   058F             	;.word	CMD_NULL		; 07h - CMD_RES reset DISABLED
0907   058F             	;.word	CMD_NULL		; 08h - CMD_FX sound effect DISABLED
0908   058F             ;--------------------------------------------------------
0909   058F             CommandRet:
0910   058F             ;--------------------------------------------------------
0911   058F FA 10 F5    	mov	SPC_PORT1, comms_v	; 07h,08h
0912   0592 6F          	ret				; 08h
0913   0593             ;--------------------------------------------------------
0914   0593 95 05       	.word	CMD_POS			; 09h - CMD_TEST DISABLED
0915   0595             	;.word	CMD_NULL		; 0ah - CMD_SSIZE set stream size DISABLED
0916   0595             
0917   0595             ;********************************************************
0918   0595             CMD_POS:
0919   0595             ;********************************************************
0920   0595 E4 F7       	mov	a, SPC_PORT3
0921   0597 3F 5B 0C    	call	Command_SetPosition2
0922   059A 2F F3       	bra	CommandRet
0923   059C             
0924   059C             ;********************************************************
0925   059C             CMD_FADE:
0926   059C             ;********************************************************
0927   059C 18 80 CC    	or	STATUS, #STATUS_F
0928   059F FA CC F6    	mov	SPC_PORT2, STATUS
0929   05A2 FA F7 19    	mov	module_fadeT, SPC_PORT3
0930   05A5 FA F6 1A    	mov	module_fadeR, SPC_PORT2
0931   05A8 2F E5       	bra	CommandRet
0932   05AA             
0933   05AA             ;********************************************************
0934   05AA             CMD_STOP:
0935   05AA             ;********************************************************
0936   05AA 3F B9 06    	call	Module_Stop
0937   05AD             CMD_NULL:	;*
0938   05AD 2F E0       	bra	CommandRet
0939   05AF             
0940   05AF             ;********************************************************
0941   05AF             CMD_MVOL:
0942   05AF             ;********************************************************
0943   05AF FA F7 18    	mov	module_vol, SPC_PORT3
0944   05B2 FA F7 19    	mov	module_fadeT, SPC_PORT3
0945   05B5 2F D8       	bra	CommandRet
0946   05B7             
0947   05B7             ;********************************************************
0948   05B7             CMD_LOAD:
0949   05B7             ;********************************************************
0950   05B7 3F B9 06    	call	Module_Stop
0951   05BA 3F 17 05    	call	ResetMemory		; reset memory system
0952   05BD 3F 0B 06    	call	StartTransfer
0953   05C0             
0954   05C0 8F 00 04    	mov	m1, #0
0955   05C3             _wait_for_sourcen:			;
0956   05C3 69 F5 10    	cmp	comms_v, SPC_PORT1	;
0957   05C6 F0 FB       	beq	_wait_for_sourcen	;
0958   05C8 FA F5 10    	mov	comms_v, SPC_PORT1	;
0959   05CB 78 00 F4    	cmp	SPC_PORT0, #0		; if p0 != 0:
0960   05CE F0 0E       	beq	_end_of_sources		; load source
0961   05D0             					;
0962   05D0 EB 04       	mov	y, m1			;
0963   05D2 60          	clrc				;
0964   05D3 98 04 04    	adc	m1, #4			;
0965   05D6 3F EA 05    	call	RegisterSource		;
0966   05D9 3F 0B 06    	call	StartTransfer		;
0967   05DC             					;
0968   05DC 2F E5       	bra	_wait_for_sourcen	; load next source
0969   05DE             
0970   05DE             _end_of_sources:			; if p0 == 0:
0971   05DE E5 00 02    	mov	a, !SampleDirectory	; store backup of this info
0972   05E1 C4 E8       	mov	wt_sample_low, a	; in case wavetable cycle is used
0973   05E3 E5 01 02    	mov	a, !SampleDirectory+1	;
0974   05E6 C4 E7       	mov	wt_sample_high, a	;
0975   05E8 2F A5       	bra	CommandRet		;
0976   05EA             
0977   05EA             ;-------------------------------------------------------------------
0978   05EA             RegisterSource:
0979   05EA             ;-------------------------------------------------------------------
0980   05EA E4 00       	mov	a, xfer_address
0981   05EC D6 00 02    	mov	!SampleDirectory+y, a	; sample start
0982   05EF 60          	clrc
0983   05F0 84 F6       	adc	a, SPC_PORT2
0984   05F2 D6 02 02    	mov	!SampleDirectory+2+y, a	; loop start
0985   05F5             
0986   05F5 E4 01       	mov	a, xfer_address+1
0987   05F7 D6 01 02    	mov	!SampleDirectory+1+y, a	; sample start
0988   05FA             
0989   05FA 84 F7       	adc	a, SPC_PORT3
0990   05FC D6 03 02    	mov	!SampleDirectory+3+y, a	; loop start
0991   05FF             
0992   05FF 6F          	ret
0993   0600             
0994   0600             ;********************************************************
0995   0600             CMD_LOADE:
0996   0600             ;********************************************************
0997   0600 8F 49 00    	mov	xfer_address, #LBYTE(WTLoop1)
0998   0603 8F 1A 01    	mov	xfer_address+1, #HBYTE(WTLoop1)
0999   0606 3F 0B 06    	call	StartTransfer
1000   0609 2F 84       	bra	CommandRet
1001   060B             
1002   060B             ;===================================================================
1003   060B             StartTransfer:
1004   060B             ;===================================================================
1005   060B F8 10       	mov	x, comms_v		; start transfer
1006   060D 8D 00       	mov	y, #0			;
1007   060F D8 F5       	mov	SPC_PORT1, x		;
1008   0611             
1009   0611             ;-------------------------------------------------------------------
1010   0611             DoTransfer:
1011   0611             ;-------------------------------------------------------------------
1012   0611 3E F5       	cmp	x, SPC_PORT1		; wait for data
1013   0613 F0 FC       	beq	DoTransfer		;
1014   0615 F8 F5       	mov	x, SPC_PORT1		;
1015   0617             					;---------------------------
1016   0617 E4 F6       	mov	a, SPC_PORT2		; copy data
1017   0619 D7 00       	mov	[xfer_address]+y, a	;
1018   061B E4 F7       	mov	a, SPC_PORT3		;
1019   061D D8 F5       	mov	SPC_PORT1, x		;<- reply to snes
1020   061F FC          	inc	y			;
1021   0620 D7 00       	mov	[xfer_address]+y, a	;
1022   0622 FC          	inc	y			;
1023   0623 F0 10       	beq	_inc_address		; catch index overflow
1024   0625 C8 00       _cont1:	cmp	x, #0			; loop until x=0
1025   0627 D0 E8       	bne	DoTransfer		;
1026   0629             
1027   0629 CB 02       	mov	m0, y
1028   062B 60          	clrc
1029   062C 89 02 00    	adc	xfer_address, m0
1030   062F 98 00 01    	adc	xfer_address+1, #0
1031   0632 D8 10       	mov	comms_v, x
1032   0634 6F          	ret
1033   0635             
1034   0635             _inc_address:
1035   0635 AB 01       	inc	xfer_address+1
1036   0637 2F EC       	bra	_cont1
1037   0639             
1038   0639             ;********************************************************
1039   0639             CMD_PLAY:
1040   0639             ;********************************************************
1041   0639 3F B9 06    	call	Module_Stop
1042   063C E4 F7       	mov	a, SPC_PORT3
1043   063E 38 DF CC    	and	STATUS, #~STATUS_P
1044   0641 FA CC F6    	mov	SPC_PORT2, STATUS
1045   0644 FA 10 F5    	mov	SPC_PORT1, comms_v
1046   0647 5F C3 06    	jmp	Module_Start
1047   064A             
1048   064A             ;********************************************************
1049   064A             ;CMD_RES:	; 13 bytes
1050   064A             ;********************************************************
1051   064A             	;mov	SPC_DSPA, #DSP_FLG
1052   064A             	;mov	SPC_DSPD, #11100000b
1053   064A             	;clrp
1054   064A             	;mov	SPC_CONTROL, #10000000b ;
1055   064A             	;jmp	0FFC0h
1056   064A             
1057   064A             ;********************************************************
1058   064A             ; Setup echo...
1059   064A             ;********************************************************
1060   064A             SetupEcho:				; STREAM_REGION = 0FFh
1061   064A E5 F6 1A    	mov	a, !MODULE+MOD_EDL	; ESA = stream_region - EDL*8
1062   064D F0 59       	beq	_skip_enable_echo	; skip all of this if echo isn't enabled
1063   064F 9F          	xcn	a			; max = stream_region -1
1064   0650 5C          	lsr	a			;
1065   0651 C4 02       	mov	m0, a			;
1066   0653 E8 FF       	mov	a, #STREAM_REGION	;
1067   0655 80          	setc				;
1068   0656 A4 02       	sbc	a, m0			;
1069   0658 68 FF       	cmp	a, #STREAM_REGION	;
1070   065A D0 01       	bne	_edl_not_ss		;
1071   065C 9C          	dec	a			;
1072   065D             _edl_not_ss:				;
1073   065D 8F 6D F2    	mov	SPC_DSPA, #DSP_ESA	;
1074   0660 C4 F3       	mov	SPC_DSPD, a		;
1075   0662             
1076   0662 C4 03       	mov	m0+1, a			; clear memory region used by echo
1077   0664 8F 00 02    	mov	m0, #0			;
1078   0667 E8 00       	mov	a, #0			;
1079   0669 8D 00       	mov	y, #0			;
1080   066B             _clearmem:				;
1081   066B D7 02       	mov	[m0]+y, a		;
1082   066D FC          	inc	y			;
1083   066E D0 FB       	bne	_clearmem		;
1084   0670 AB 03       	inc	m0+1			;
1085   0672 78 FF 03    	cmp	m0+1, #STREAM_REGION	;
1086   0675 D0 F4       	bne	_clearmem		;
1087   0677             
1088   0677 3F 71 11    	call	ResetEFIR		;
1089   067A 3F 17 11    	call	ResetEchoFeedback	;
1090   067D             
1091   067D 8F 4D F2    	mov	SPC_DSPA, #DSP_EON	; copy EON
1092   0680 E5 00 1B    	mov	a, !MODULE+MOD_EON	;
1093   0683 C4 F3       	mov	SPC_DSPD, a		;
1094   0685             
1095   0685 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL	; read old EDL, set new EDL
1096   0688 EB F3       	mov	y, SPC_DSPD		;
1097   068A E5 F6 1A    	mov	a, !MODULE+MOD_EDL	;
1098   068D C4 F3       	mov	SPC_DSPD, a		;
1099   068F             
1100   068F             	;-----------------------------------------
1101   068F             	; delay EDL*16ms before enabling echo
1102   068F             	; 16384 clks * EDL
1103   068F             	; EDL<<14 clks
1104   068F             	;
1105   068F             	; run loop EDL<<10 times
1106   068F             	;-----------------------------------------
1107   068F DD          	mov	a, y			;
1108   0690 1C          	asl	a			;
1109   0691 1C          	asl	a			;
1110   0692 BC          	inc	a			;
1111   0693 C4 03       	mov	m0+1, a			;
1112   0695 8F 00 02    	mov	m0, #0			;
1113   0698             _delay_16clks:				;
1114   0698 77 00       	cmp	a, [0]+y		;
1115   069A 1A 02       	decw	m0			;
1116   069C D0 FA       	bne	_delay_16clks		;
1117   069E             
1118   069E 3F F4 10    	call	ResetEchoVolume
1119   06A1 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG	; clear ECEN
1120   06A4 8F 00 F3    	mov	SPC_DSPD, #0
1121   06A7 6F          	ret
1122   06A8             
1123   06A8             _skip_enable_echo:
1124   06A8 8F 00 1C    	mov	evol_l, #0
1125   06AB 8F 00 1D    	mov	evol_r, #0
1126   06AE 6F          	ret
1127   06AF             
1128   06AF             ;********************************************************
1129   06AF             ; zerofill channel data
1130   06AF             ;********************************************************
1131   06AF             Module_ResetChannels:
1132   06AF CD 23       	mov	x, #ch_start
1133   06B1 E8 00       	mov	a, #0
1134   06B3             _zerofill_ch:
1135   06B3 AF          	mov	(x)+, a
1136   06B4 C8 C3       	cmp	x, #ch_end
1137   06B6 D0 FB       	bne	_zerofill_ch
1138   06B8 6F          	ret
1139   06B9             
1140   06B9             Module_Stop:
1141   06B9 3F 28 05    	call	ResetSound
1142   06BC 8F 06 F1    	mov	SPC_CONTROL, #%110
1143   06BF 38 FE EA    	and	special, #~SF_MODACTIVE
1144   06C2 6F          	ret
1145   06C3             
1146   06C3             ;********************************************************
1147   06C3             ; play module...
1148   06C3             ;
1149   06C3             ; a = initial position
1150   06C3             ;********************************************************
1151   06C3             Module_Start:
1152   06C3 C4 11       	mov	mod_position, a
1153   06C5 3F 28 05    	call	ResetSound
1154   06C8 3F AF 06    	call	Module_ResetChannels
1155   06CB 18 01 EA    	or	special, #SF_MODACTIVE
1156   06CE E5 E3 1A    	mov	a, !MODULE+MOD_IS
1157   06D1 C4 15       	mov	mod_speed, a
1158   06D3 E5 E2 1A    	mov	a, !MODULE+MOD_IT
1159   06D6 3F 44 07    	call	Module_ChangeTempo
1160   06D9 E5 E1 1A    	mov	a, !MODULE+MOD_IV
1161   06DC C4 17       	mov	mod_gvol, a
1162   06DE             
1163   06DE CD 07       	mov	x, #7				;
1164   06E0             _copy_cvolume:					; copy volume levels
1165   06E0 F5 E4 1A    	mov	a, !MODULE+MOD_CV+x		;
1166   06E3 D4 3B       	mov	ch_cvolume+x, a			;
1167   06E5 1D          	dec	x				;
1168   06E6 10 F8       	bpl	_copy_cvolume			;
1169   06E8             
1170   06E8 CD 07       	mov	x, #7
1171   06EA             _copy_cpan:
1172   06EA F5 EC 1A    	mov	a, !MODULE+MOD_CP+x
1173   06ED 68 41       	cmp	a, #65
1174   06EF B0 04       	bcs	_cpan_surround
1175   06F1 D4 43       	mov	ch_panning+x, a
1176   06F3 2F 08       	bra	_cpan_normal
1177   06F5             
1178   06F5             _cpan_surround:
1179   06F5 E8 20       	mov	a, #32
1180   06F7 D4 43       	mov	ch_panning+x, a
1181   06F9 E8 40       	mov	a, #CF_SURROUND
1182   06FB D4 83       	mov	ch_flags+x, a
1183   06FD             _cpan_normal:
1184   06FD 1D          	dec	x
1185   06FE 10 EA       	bpl	_copy_cpan
1186   0700             
1187   0700 3F 4A 06    	call	SetupEcho
1188   0703             
1189   0703 E4 11       	mov	a, mod_position
1190   0705 3F 12 07    	call	Module_ChangePosition
1191   0708             
1192   0708             	; start timer
1193   0708 8F 07 F1    	mov	SPC_CONTROL, #%111
1194   070B             
1195   070B 18 20 CC    	or	STATUS, #STATUS_P
1196   070E FA CC F6    	mov	SPC_PORT2, STATUS
1197   0711             
1198   0711             	;SETDSP( DSP_KOF, 0 );	// ?????? already done in reset sound
1199   0711 6F          	ret
1200   0712             
1201   0712             ;********************************************************
1202   0712             ; set sequence position
1203   0712             ;
1204   0712             ; a=position
1205   0712             ;********************************************************
1206   0712             Module_ChangePosition:
1207   0712 FD          	mov	y, a
1208   0713             _skip_pattern:
1209   0713 F6 01 1B    	mov	a, !MODULE+MOD_SEQU+y
1210   0716 68 FE       	cmp	a, #254			; skip +++
1211   0718 D0 03       	bne	_not_plusplusplus	;
1212   071A FC          	inc	y			;
1213   071B 2F F6       	bra	_skip_pattern		;
1214   071D             
1215   071D             _not_plusplusplus:
1216   071D 68 FF       	cmp	a, #255			; restart on ---
1217   071F D0 04       	bne	_not_end		;
1218   0721 8D 00       	mov	y, #0			;
1219   0723 2F EE       	bra	_skip_pattern		;
1220   0725             
1221   0725             _not_end:
1222   0725 CB 11       	mov	mod_position, y
1223   0727 FD          	mov	y, a
1224   0728 F6 C9 1B    	mov	a, !MODULE+MOD_PTABLE_L+y
1225   072B C4 1E       	mov	patt_addr, a
1226   072D F6 09 1C    	mov	a, !MODULE+MOD_PTABLE_H+y
1227   0730 C4 1F       	mov	patt_addr+1, a
1228   0732 8D 00       	mov	y, #0
1229   0734 F7 1E       	mov	a, [patt_addr]+y
1230   0736 C4 20       	mov	patt_rows, a
1231   0738             
1232   0738 3A 1E       	incw	patt_addr
1233   073A             
1234   073A 38 7F EA    	and	special, #~SF_PATTERNJUMP
1235   073D 8F 00 12    	mov	mod_tick, #0
1236   0740 8F 00 13    	mov	mod_row, #0
1237   0743 6F          	ret
1238   0744             
1239   0744             ;********************************************************
1240   0744             ; a = new BPM value
1241   0744             ;********************************************************
1242   0744             Module_ChangeTempo:
1243   0744 4D          	push	x
1244   0745 C4 14       	mov	mod_bpm, a
1245   0747 8F 06 F1    	mov	SPC_CONTROL, #%110
1246   074A 5D          	mov	x, a
1247   074B 8D 4E       	mov	y, #DEFAULT_TEMPO
1248   074D E8 00       	mov	a, #00h
1249   074F 9E          	div	ya, x
1250   0750 C4 FA       	mov	SPC_TIMER0, a
1251   0752 CE          	pop	x
1252   0753 6F          	ret
1253   0754             
1254   0754             ;********************************************************
1255   0754             ; process module fading
1256   0754             ;********************************************************
1257   0754             ProcessFade:
1258   0754 E4 FE       	mov	a, SPC_COUNTER1
1259   0756 F0 31       	beq	_skipfade
1260   0758 18 80 CC    	or	STATUS, #STATUS_F
1261   075B E4 18       	mov	a, module_vol
1262   075D 64 19       	cmp	a, module_fadeT
1263   075F F0 25       	beq	_nofade
1264   0761 90 10       	bcc	_fadein
1265   0763             ;--------------------------------------------
1266   0763             _fadeout:
1267   0763             ;--------------------------------------------
1268   0763 A4 1A       	sbc	a, module_fadeR
1269   0765 B0 04       	bcs	_fade_satL
1270   0767 FA 19 18    	mov	module_vol, module_fadeT
1271   076A 6F          	ret
1272   076B             
1273   076B             _fade_satL:
1274   076B 64 19       	cmp	a, module_fadeT
1275   076D B0 14       	bcs	_fadeset
1276   076F FA 19 18    	mov	module_vol, module_fadeT
1277   0772 6F          	ret
1278   0773             ;--------------------------------------------
1279   0773             _fadein:
1280   0773             ;--------------------------------------------
1281   0773 84 1A       	adc	a, module_fadeR
1282   0775 90 04       	bcc	_fade_satH
1283   0777 FA 19 18    	mov	module_vol, module_fadeT
1284   077A 6F          	ret
1285   077B             
1286   077B             _fade_satH:
1287   077B 64 19       	cmp	a, module_fadeT
1288   077D 90 04       	bcc	_fadeset
1289   077F FA 19 18    	mov	module_vol, module_fadeT
1290   0782 6F          	ret
1291   0783             
1292   0783             _fadeset:
1293   0783 C4 18       	mov	module_vol, a
1294   0785 6F          	ret
1295   0786             
1296   0786             _nofade:
1297   0786 38 7F CC    	and	STATUS, #~STATUS_F
1298   0789             _skipfade:
1299   0789 6F          	ret
1300   078A             
1301   078A             ;********************************************************
1302   078A             ; Update module playback
1303   078A             ;********************************************************
1304   078A             Module_Update:
1305   078A 13 EA 07    	bbc0	special, _no_tick	; test SF_MODACTCIVE
1306   078D E4 FD       	mov	a, SPC_COUNTER0		; check for a tick
1307   078F F0 03       	beq	_no_tick		;
1308   0791             
1309   0791 3F 95 07    	call	Module_OnTick		;
1310   0794             _no_tick:				;
1311   0794 6F          	ret				;
1312   0795             
1313   0795             ;********************************************************
1314   0795             ; module tick!!!
1315   0795             ;********************************************************
1316   0795             Module_OnTick:
1317   0795 78 00 12    	cmp	mod_tick, #0
1318   0798 D0 03       	bne	_skip_read_pattern
1319   079A 3F C4 07    	call	Module_ReadPattern
1320   079D             
1321   079D             _skip_read_pattern:
1322   079D 3F 3F 08    	call	Module_UpdateChannels
1323   07A0             
1324   07A0 AB 12       	inc	mod_tick		; increment tick until >= SPEED
1325   07A2 69 15 12    	cmp	mod_tick, mod_speed	;
1326   07A5 90 1C       	bcc	_exit_tick		;
1327   07A7 8F 00 12    	mov	mod_tick, #0		;
1328   07AA             					;
1329   07AA F3 EA 05    	bbc7	special, _no_pattjump	; test SF_PATTERNJUMP
1330   07AD E4 21       	mov	a, pattjump_index	;
1331   07AF 5F 12 07    	jmp	Module_ChangePosition	;
1332   07B2             					;
1333   07B2             _no_pattjump:				;
1334   07B2 AB 13       	inc	mod_row			; increment row until > PATTERN_ROWS
1335   07B4 F0 07       	beq	_adv_pos		;
1336   07B6 69 20 13    	cmp	mod_row, patt_rows	;
1337   07B9 F0 08       	beq	_exit_tick		;
1338   07BB 90 06       	bcc	_exit_tick		;
1339   07BD             					;
1340   07BD             _adv_pos:				;
1341   07BD E4 11       	mov	a, mod_position		; advance position
1342   07BF BC          	inc	a			;
1343   07C0 5F 12 07    	jmp	Module_ChangePosition	;
1344   07C3             
1345   07C3             _exit_tick:
1346   07C3 6F          	ret
1347   07C4             
1348   07C4             ;********************************************************
1349   07C4             ; read pattern data
1350   07C4             ;********************************************************
1351   07C4             Module_ReadPattern:
1352   07C4 8D 01       	mov	y, #1			; skip hints
1353   07C6 F7 1E       	mov	a, [patt_addr]+y	; copy update flags
1354   07C8 FC          	inc	y			;
1355   07C9 C4 22       	mov	patt_update, a		;
1356   07CB C4 04       	mov	m1, a			;
1357   07CD CD 00       	mov	x, #0			;
1358   07CF 4B 04       	lsr	m1			; test first bit
1359   07D1 90 36       	bcc	_no_channel_data	;
1360   07D3             					;
1361   07D3             _read_pattern_data:			;
1362   07D3 01          	SPROC				;
1363   07D4 F7 1E       	mov	a, [patt_addr]+y	; read maskvar
1364   07D6 FC          	inc	y			;
1365   07D7 C4 02       	mov	m0, a			;
1366   07D9 93 02 05    	bbc4	m0, _skip_read_note	; test/read new note
1367   07DC F7 1E       	mov	a, [patt_addr]+y	;
1368   07DE FC          	inc	y			;
1369   07DF D4 53       	mov	ch_note+x, a		;
1370   07E1             					;
1371   07E1             _skip_read_note:			;
1372   07E1 B3 02 05    	bbc5	m0, _skip_read_instr	; test/read new instrument
1373   07E4 F7 1E       	mov	a, [patt_addr]+y	;
1374   07E6 FC          	inc	y			;
1375   07E7 D4 5B       	mov	ch_instr+x, a		;
1376   07E9             					;
1377   07E9             _skip_read_instr:			;
1378   07E9 D3 02 05    	bbc6	m0, _skip_read_vcmd	; test/read new vcmd
1379   07EC F7 1E       	mov	a, [patt_addr]+y	;
1380   07EE FC          	inc	y			;
1381   07EF D4 63       	mov	ch_vcmd+x, a		;
1382   07F1             					;
1383   07F1             _skip_read_vcmd:			;
1384   07F1 F3 02 0A    	bbc7	m0, _skip_read_cmd	; test/read new cmd+param
1385   07F4 F7 1E       	mov	a, [patt_addr]+y	;
1386   07F6 FC          	inc	y			;
1387   07F7 D4 6B       	mov	ch_command+x, a		;
1388   07F9 F7 1E       	mov	a, [patt_addr]+y	;
1389   07FB FC          	inc	y			;
1390   07FC D4 73       	mov	ch_param+x, a		;
1391   07FE             					;
1392   07FE             _skip_read_cmd:				;
1393   07FE 38 0F 02    	and	m0, #0Fh		; set flags (lower nibble)
1394   0801 F4 83       	mov	a, ch_flags+x		;
1395   0803 28 F0       	and	a, #0F0h		;
1396   0805 04 02       	or	a, m0			;
1397   0807 D4 83       	mov	ch_flags+x, a		;
1398   0809             					;
1399   0809             _no_channel_data:			;
1400   0809             _rp_nextchannel:			;
1401   0809 3D          	inc	x			; increment index
1402   080A 4B 04       	lsr	m1			; shift out next bit
1403   080C B0 C5       	bcs	_read_pattern_data	; process if set
1404   080E D0 F9       	bne	_no_channel_data	; loop if bits remain (upto 8 iterations)
1405   0810             	;-------------------------------;
1406   0810 CB 02       	mov	m0, y			; add offset to pattern address
1407   0812 60          	clrc				;
1408   0813 89 02 1E    	adc	patt_addr, m0		;
1409   0816 98 00 1F    	adc	patt_addr+1, #0		;
1410   0819             
1411   0819 A3 EA 01    	bbs5	special, _swing_tempo
1412   081C 6F          	ret
1413   081D             
1414   081D             _swing_tempo:
1415   081D E4 16       	mov	a, mod_speed_bk
1416   081F C3 EA 03    	bbs6	special, _swing_even
1417   0822             _swing_odd:
1418   0822 80          	setc
1419   0823 84 EC       	adc	a, swing_tempo_mod
1420   0825             _swing_even:
1421   0825 58 40 EA    	eor	special, #SF_SWINGODD
1422   0828 68 00       	cmp	a, #0
1423   082A F0 02       	beq	_no_change
1424   082C C4 15       	mov	mod_speed, a
1425   082E             _no_change:
1426   082E 6F          	ret
1427   082F             
1428   082F 010204081020BITS:	.byte   1,  2,  4,  8, 16, 32, 64,128
1428   0835 4080
1429   0837 0F1F2F3F4F5FCBITS:	.byte  15, 31, 47, 63, 79, 95,111,127
1429   083D 6F7F
1430   083F             
1431   083F             ;********************************************************
1432   083F             ; update module channels...
1433   083F             ;********************************************************
1434   083F             Module_UpdateChannels:
1435   083F CD 00       	mov	x, #0
1436   0841 E4 22       	mov	a, patt_update
1437   0843             
1438   0843             _muc_loop:
1439   0843 5C          	lsr	a
1440   0844 2D          	push	a
1441   0845 E8 00       	mov	a, #0
1442   0847 3C          	rol	a
1443   0848 C4 C3       	mov	t_hasdata, a
1444   084A             
1445   084A 3F 54 08    	call	Module_UpdateChannel
1446   084D             
1447   084D AE          	pop	a
1448   084E 3D          	inc	x
1449   084F C8 08       	cmp	x, #8
1450   0851 D0 F0       	bne	_muc_loop
1451   0853             
1452   0853 6F          	ret
1453   0854             
1454   0854             ;********************************************************
1455   0854             ; update module channel
1456   0854             ;********************************************************
1457   0854             Module_UpdateChannel:
1458   0854 01          	SPROC
1459   0855             
1460   0855             	;--------------------------------------
1461   0855             	; get data pointers
1462   0855             	;--------------------------------------
1463   0855 FB 5B       	mov	y, ch_instr+x
1464   0857 DC          	dec	y
1465   0858 F6 49 1C    	mov	a, !MODULE+MOD_ITABLE_L+y
1466   085B C4 CA       	mov	p_instr, a
1467   085D F6 89 1C    	mov	a, !MODULE+MOD_ITABLE_H+y
1468   0860 C4 CB       	mov	p_instr+1, a
1469   0862             
1470   0862 8F 00 C8    	mov	t_flags, #0
1471   0865 78 00 C3    	cmp	t_hasdata, #0
1472   0868 F0 05       	beq	_muc_nopatterndata
1473   086A             
1474   086A 3F 76 08    	call	Channel_ProcessData
1475   086D 2F 03       	bra	_muc_pa
1476   086F             
1477   086F             _muc_nopatterndata:
1478   086F 3F EF 08    	call	Channel_CopyTemps
1479   0872             
1480   0872             _muc_pa:
1481   0872 3F 28 09    	call	Channel_ProcessAudio
1482   0875 6F          	ret
1483   0876             
1484   0876             ;********************************************************	
1485   0876             Channel_ProcessData:
1486   0876             ;********************************************************
1487   0876 78 00 12    	cmp	mod_tick, #0		; skip tick0 processing on other ticks
1488   0879 D0 5C       	bne	_cpd_non0		;
1489   087B             					;
1490   087B F4 83       	mov	a, ch_flags+x		;
1491   087D C4 0E       	mov	m6, a			;
1492   087F 13 0E 4A    	bbc0	m6, _cpd_no_note	; test for note
1493   0882             					;
1494   0882 F4 53       	mov	a, ch_note+x		;
1495   0884 68 FE       	cmp	a, #254			; test notecut/noteoff
1496   0886 F0 10       	beq	_cpd_notecut		;
1497   0888 B0 17       	bcs	_cpd_noteoff		;
1498   088A             					;
1499   088A             _cpd_note:				; don't start note on glissando
1500   088A 73 0E 06    	bbc3	m6, _cpdn_test_for_glis	;
1501   088D F4 6B       	mov	a, ch_command+x		;
1502   088F 68 07       	cmp	a, #7			;
1503   0891 F0 11       	beq	_cpd_note_next		;
1504   0893             					;
1505   0893             _cpdn_test_for_glis:			;
1506   0893 3F FC 08    	call	Channel_StartNewNote	;
1507   0896 2F 0C       	bra	_cpd_note_next		;
1508   0898             					;
1509   0898             _cpd_notecut:				;notecut:
1510   0898 E8 00       	mov	a, #0			; cut volume
1511   089A D4 33       	mov	ch_volume+x, a		;
1512   089C 38 FE 0E    	and	m6, #~CF_NOTE		; clear note flag
1513   089F 2F 03       	bra	_cpd_note_next		;
1514   08A1             					;
1515   08A1             _cpd_noteoff:				;noteoff:
1516   08A1 38 EE 0E    	and	m6, #~(CF_NOTE|CF_KEYON); clear note and keyon flags
1517   08A4             					;
1518   08A4             _cpd_note_next:				;
1519   08A4 33 0E 22    	bbc1	m6, _cpdn_no_instr	; apply instrument SETPAN
1520   08A7 8D 03       	mov	y, #INS_SETPAN		;
1521   08A9 F7 CA       	mov	a, [p_instr]+y		;
1522   08AB 30 02       	bmi	_cpdi_nsetpan		;
1523   08AD D4 43       	mov	ch_panning+x, a		;
1524   08AF             					;
1525   08AF             _cpdi_nsetpan:				;
1526   08AF FB 7B       	mov	y, ch_sample+x		; apply sample SETPAN
1527   08B1             ;	beq	_cpdi_nosample		;
1528   08B1 F6 C9 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1529   08B4 C4 02       	mov	m0, a			;
1530   08B6 F6 09 1D    	mov	a, !MODULE+MOD_STABLE_H+y	;
1531   08B9 C4 03       	mov	m0+1, a			;
1532   08BB 8D 00       	mov	y, #SAMP_DVOL		; copy default volume
1533   08BD F7 02       	mov	a, [m0]+y		;
1534   08BF D4 33       	mov	ch_volume+x, a		;
1535   08C1 8D 05       	mov	y, #SAMP_SETPAN		;
1536   08C3 F7 02       	mov	a, [m0]+y		;
1537   08C5 30 02       	bmi	_cpdi_nsetpan_s		;
1538   08C7 D4 43       	mov	ch_panning+x, a		;
1539   08C9             _cpdi_nsetpan_s:			;
1540   08C9             _cpdi_nosample:				;
1541   08C9             _cpdn_no_instr:				;
1542   08C9 38 FE 0E    	and	m6, #~CF_NOTE		;
1543   08CC             					;
1544   08CC             _cpd_no_note:				;
1545   08CC E4 0E       	mov	a, m6			; save flag mods
1546   08CE D4 83       	mov	ch_flags+x, a		;
1547   08D0             					;
1548   08D0 28 03       	and	a, #(CF_NOTE|CF_INSTR)	; test for note or instrument
1549   08D2 F0 03       	beq	_no_note_or_instr	;
1550   08D4             					;
1551   08D4 3F 13 09    	call	Channel_ResetVolume	; and reset volume things
1552   08D7             					;
1553   08D7             _no_note_or_instr:			;
1554   08D7             _cpd_non0:				; nonzero ticks: just update audio
1555   08D7 01          	SPROC				;
1556   08D8             					;
1557   08D8 F4 83       	mov	a, ch_flags+x		; test and process volume command
1558   08DA 28 04       	and	a, #CF_VCMD		;
1559   08DC F0 03       	beq	_skip_vcmd		;
1560   08DE             
1561   08DE 3F 29 0B    	call	Channel_ProcessVolumeCommand
1562   08E1             
1563   08E1             _skip_vcmd:				;
1564   08E1 01          	SPROC				;
1565   08E2 3F EF 08    	call	Channel_CopyTemps	; copy t values
1566   08E5             					;
1567   08E5 F4 83       	mov	a, ch_flags+x		; test and process command
1568   08E7 28 08       	and	a, #CF_CMD		;
1569   08E9 F0 03       	beq	_skip_cmd		;
1570   08EB             					;
1571   08EB 3F FB 0B    	call	Channel_ProcessCommand	;
1572   08EE             
1573   08EE             _skip_cmd:
1574   08EE 6F          	ret
1575   08EF             
1576   08EF             ;********************************************************
1577   08EF             Channel_CopyTemps:
1578   08EF             ;********************************************************
1579   08EF F4 23       	mov	a, ch_pitch_l+x		; prepare for effects processing.....
1580   08F1 FB 2B       	mov	y, ch_pitch_h+x		;
1581   08F3 DA C6       	movw	t_pitch, ya		;
1582   08F5 F4 33       	mov	a, ch_volume+x		;
1583   08F7 FB 43       	mov	y, ch_panning+x		;
1584   08F9 DA C4       	movw	t_volume, ya		;
1585   08FB             	;mov	t_sampoff, #0		;
1586   08FB             
1587   08FB 6F          	ret
1588   08FC             
1589   08FC             ;********************************************************
1590   08FC             Channel_StartNewNote:
1591   08FC             ;********************************************************
1592   08FC F4 53       	mov	a, ch_note+x		; pitch = note * 64
1593   08FE 8D 40       	mov	y, #64			;
1594   0900 CF          	mul	ya			;
1595   0901 D4 23       	mov	ch_pitch_l+x, a		;
1596   0903 DB 2B       	mov	ch_pitch_h+x, y		;
1597   0905             
1598   0905 F4 5B       	mov	a, ch_instr+x		; test for instrument and copy sample!
1599   0907 F0 06       	beq	_csnn_no_instr		;
1600   0909 8D 01       	mov	y, #INS_SAMPLE		;
1601   090B F7 CA       	mov	a, [p_instr]+y		;
1602   090D D4 7B       	mov	ch_sample+x, a		;
1603   090F             
1604   090F             _csnn_no_instr:
1605   090F 18 80 C8    	or	t_flags, #TF_START	; set start flag
1606   0912 6F          	ret
1607   0913             
1608   0913             ;********************************************************
1609   0913             Channel_ResetVolume:
1610   0913             ;********************************************************
1611   0913 E8 FF       	mov	a, #255			; reset fadeout
1612   0915 D4 BB       	mov	ch_fadeout+x, a		;----------------
1613   0917 E8 00       	mov	a, #0			; reset envelope
1614   0919 D4 9B       	mov	ch_env_node+x, a	;
1615   091B D4 A3       	mov	ch_env_tick+x, a	;----------------
1616   091D D4 4B       	mov	ch_cmem+x, a		; reset CMem
1617   091F             					;----------------
1618   091F F4 83       	mov	a, ch_flags+x		; set KEYON
1619   0921 08 10       	or	a, #CF_KEYON		; clear FADE
1620   0923 28 DF       	and	a, #~CF_FADE		;
1621   0925 D4 83       	mov	ch_flags+x, a		;----------------
1622   0927 6F          	ret
1623   0928             
1624   0928             ;********************************************************
1625   0928             Channel_ProcessAudio:
1626   0928             ;********************************************************
1627   0928 01          	SPROC					;
1628   0929 FB 7B       	mov	y, ch_sample+x			; m5 = sample address
1629   092B             ;	beq	_cpa_nsample			;
1630   092B F6 C9 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1631   092E C4 0C       	mov	m5, a				;
1632   0930 F6 09 1D    	mov	a, !MODULE+MOD_STABLE_H+y	;
1633   0933 C4 0D       	mov	m5+1, a				;
1634   0935             						;
1635   0935             _cpa_nsample:					;
1636   0935 3F 5E 0A    	call	Channel_ProcessEnvelope		;
1637   0938             						;
1638   0938 F4 83       	mov	a, ch_flags+x			; process FADE
1639   093A 28 20       	and	a, #CF_FADE			;
1640   093C F0 0D       	beq	_skip_fade			;
1641   093E F4 BB       	mov	a, ch_fadeout+x			;
1642   0940 80          	setc					;
1643   0941 8D 00       	mov	y, #INS_FADEOUT			;
1644   0943 B7 CA       	sbc	a, [p_instr]+y			;
1645   0945 B0 02       	bcs	_subfade_noverflow		;	
1646   0947 E8 00       	mov	a, #0				;
1647   0949             _subfade_noverflow:				;
1648   0949 D4 BB       	mov	ch_fadeout+x, a			;
1649   094B             _skip_fade:					;
1650   094B F5 2F 08    	mov	a, !BITS+x
1651   094E 28 00       	and	a, #0
1652   0950 D0 06       	bne	_sfx_override
1653   0952             
1654   0952 E4 C8       	mov	a, t_flags			; exit if 'note delay' is set
1655   0954 28 02       	and	a, #TF_DELAY			;
1656   0956 F0 01       	beq	_cpa_ndelay			;
1657   0958             _sfx_override:
1658   0958 6F          	ret					;
1659   0959             _cpa_ndelay:					;
1660   0959             
1661   0959             	;----------------------------------------
1662   0959             	; COMPUTE VOLUME:
1663   0959             	; V*CV*SV*GV*VEV*FADE
1664   0959             	; m0 = result (0..255)
1665   0959             	;----------------------------------------
1666   0959             
1667   0959 8D 02       	mov	y, #INS_GVOL
1668   095B F7 CA       	mov	a, [p_instr]+y
1669   095D 2D          	push	a
1670   095E 8D 01       	mov	y, #SAMP_GVOL
1671   0960 F7 0C       	mov	a, [m5]+y
1672   0962 2D          	push	a
1673   0963             
1674   0963 E4 C4       	mov	a, t_volume			; y = 8-BIT VOLUME
1675   0965 1C          	asl	a				;
1676   0966 1C          	asl	a				;		
1677   0967 90 02       	bcc	_cpa_clamp_vol			;	
1678   0969 E8 FF       	mov	a, #255				;
1679   096B             _cpa_clamp_vol:					;
1680   096B FD          	mov	y, a				;
1681   096C             
1682   096C F4 3B       	mov	a, ch_cvolume+x			; *= CV
1683   096E 1C          	asl	a				;
1684   096F 1C          	asl	a
1685   0970 B0 01       	bcs	_calcvol_skip_cv		;
1686   0972 CF          	mul	ya				;
1687   0973             _calcvol_skip_cv:				;
1688   0973             
1689   0973 AE          	pop	a				; *= SV
1690   0974 1C          	asl	a				;
1691   0975 1C          	asl	a
1692   0976 B0 01       	bcs	_calcvol_skip_sv		;
1693   0978 CF          	mul	ya				;
1694   0979             _calcvol_skip_sv:				;
1695   0979             
1696   0979 AE          	pop	a				;
1697   097A 1C          	asl	a				;
1698   097B B0 01       	bcs	_calcvol_skip_iv		;
1699   097D CF          	mul	ya				;
1700   097E             _calcvol_skip_iv:
1701   097E             
1702   097E E4 17       	mov	a, mod_gvol			; *= GV
1703   0980 1C          	asl	a				;
1704   0981 B0 01       	bcs	_calcvol_skip_gvol		;
1705   0983 CF          	mul	ya				;
1706   0984             _calcvol_skip_gvol:				;
1707   0984             
1708   0984 E4 C9       	mov	a, t_env			; *= VEV
1709   0986 CF          	mul	ya				;
1710   0987             
1711   0987 F4 BB       	mov	a, ch_fadeout+x			; *= FADE
1712   0989 CF          	mul	ya				;
1713   098A             
1714   098A E4 18       	mov	a, module_vol
1715   098C CF          	mul	ya
1716   098D             
1717   098D DD          	mov	a, y				; store 7bit result
1718   098E 5C          	lsr	a				; 
1719   098F C4 06       	mov	m2, a
1720   0991             
1721   0991 78 80 C8    	cmp	t_flags, #80h
1722   0994 B0 0E       	bcs	_dont_hack_gain
1723   0996 68 00       	cmp	a, #0
1724   0998 D0 02       	bne	_gain_not_zero			; map value 0 to fast linear decrease
1725   099A E8 9C       	mov	a, #%10011100			; (8ms)
1726   099C             _gain_not_zero:					;
1727   099C 68 7E       	cmp	a, #126				; map value 126 to fast linear increase
1728   099E D0 02       	bne	_gain_not_max			; (8ms)
1729   09A0 E8 DC       	mov	a, #%11011100			;
1730   09A2             _gain_not_max:					;
1731   09A2 C4 06       	mov	m2, a				;
1732   09A4             _dont_hack_gain:
1733   09A4 F4 83       	mov	a, ch_flags+x			; [KFF] added in pitchmod
1734   09A6 28 80       	and	a, #128				;
1735   09A8 F0 08       	beq	panning				;
1736   09AA 8F 00 04    	mov	m1, #0				;
1737   09AD 8F 00 05    	mov	m1+1, #0			;
1738   09B0 2F 17       	bra	_cpa_nsurround			;
1739   09B2             
1740   09B2             panning:
1741   09B2             	;---------------------------------------
1742   09B2             	; compute PANNING
1743   09B2             	;---------------------------------------
1744   09B2 E4 C5       	mov	a, t_panning			; a = panning 0..127	
1745   09B4 1C          	asl	a				;	
1746   09B5 10 01       	bpl	_clamppan			;
1747   09B7 9C          	dec	a				;
1748   09B8             _clamppan:					;	
1749   09B8 C4 05       	mov	m1+1, a				; store panning (volume) levels
1750   09BA 48 7F       	eor	a, #127				;
1751   09BC C4 04       	mov	m1, a				;
1752   09BE             
1753   09BE F4 83       	mov	a, ch_flags+x			; apply surround (R = -R)
1754   09C0 28 40       	and	a, #CF_SURROUND			;
1755   09C2 F0 05       	beq	_cpa_nsurround			;
1756   09C4 58 FF 05    	eor	m1+1, #255			;
1757   09C7 AB 05       	inc	m1+1				;
1758   09C9             _cpa_nsurround:					;
1759   09C9             
1760   09C9             	;---------------------------------------
1761   09C9             	; compute PITCH
1762   09C9             	;---------------------------------------
1763   09C9 C8 01       	cmp	x, #1
1764   09CB             
1765   09CB 8D 02       	mov	y, #SAMP_PITCHBASE		; m3 = t_pitch PITCHBASE
1766   09CD F7 0C       	mov	a, [m5]+y			;
1767   09CF 60          	clrc					;
1768   09D0 84 C6       	adc	a, t_pitch_l			;
1769   09D2 C4 08       	mov	m3, a				;
1770   09D4 FC          	inc	y				;
1771   09D5 F7 0C       	mov	a, [m5]+y			;
1772   09D7 84 C7       	adc	a, t_pitch_h			;
1773   09D9 C4 09       	mov	m3+1, a				;
1774   09DB 10 0C       	bpl	_positive_oct			;
1775   09DD             
1776   09DD             	; Negative octave handling by KungFuFurby 12/16/15 - 12/17/15
1777   09DD             	; Negative octave detected!
1778   09DD             	; This code ensures that the SPC700 can handle lower pitches than
1779   09DD             	; what SNESMod normally supports.
1780   09DD             
1781   09DD 48 FF       	eor	a, #0FFh			; Prevent glitched
1782   09DF FD          	mov	y, a				; division read.
1783   09E0 F6 76 13    	mov	a, !LUT_DIV3+y			; m0 = octave
1784   09E3 48 FF       	eor	a, #0FFh			;
1785   09E5 C4 02       	mov	m0, a				;
1786   09E7 2F 06       	bra	_oct_cont
1787   09E9             
1788   09E9             _positive_oct:
1789   09E9 FD          	mov	y, a				; m0 = octave
1790   09EA F6 76 13    	mov	a, !LUT_DIV3+y			;
1791   09ED C4 02       	mov	m0, a				;
1792   09EF             _oct_cont:
1793   09EF 1C          	asl	a				; m3 -= (oct*3) << 8
1794   09F0 60          	clrc					; Safety clear for negative
1795   09F1 84 02       	adc	a, m0				; octaves
1796   09F3 C4 03       	mov	m0+1, a				;
1797   09F5 E4 09       	mov	a, m3+1				;
1798   09F7 80          	setc					;
1799   09F8 A4 03       	sbc	a, m0+1				;
1800   09FA             
1801   09FA 0B 08       	asl	m3				; m3 = m3*2 + LUT_FTAB base
1802   09FC 3C          	rol	a				;
1803   09FD 98 99 08    	adc	m3, #LBYTE(LUT_FTAB)		;
1804   0A00 88 13       	adc	a, #HBYTE(LUT_FTAB)		; 
1805   0A02 C4 09       	mov	m3+1, a				;
1806   0A04             
1807   0A04 8D 00       	mov	y, #0				; read ftab[f]
1808   0A06 F7 08       	mov	a, [m3]+y			;
1809   0A08 C4 0A       	mov	m4, a				;
1810   0A0A FC          	inc	y				;
1811   0A0B F7 08       	mov	a, [m3]+y			;
1812   0A0D 2D          	push	a				;
1813   0A0E             
1814   0A0E E8 08       	mov	a, #8				; y = 8-oct
1815   0A10 80          	setc					;
1816   0A11 A4 02       	sbc	a, m0				;
1817   0A13 FD          	mov	y, a				;
1818   0A14             
1819   0A14 AE          	pop	a				; a,m4 = ftab value
1820   0A15 F0 05       	beq	_no_pitch_shift			; skip shift if 0
1821   0A17             						;
1822   0A17             _cont_pitch_shift:
1823   0A17 5C          	lsr	a				; shift by (8-oct)
1824   0A18 6B 0A       	ror	m4				;
1825   0A1A FE FB       	dbnz	y, _cont_pitch_shift		; (thanks KungFuFurby)
1826   0A1C             
1827   0A1C             	; WARNING: More than eight pitch shifts are possible,
1828   0A1C             	; so the code has been compressed to a mere three lines
1829   0A1C             	; Only problem will be with glitched values out of range.
1830   0A1C             
1831   0A1C             _no_pitch_shift:
1832   0A1C C4 0B       	mov	m4+1, a
1833   0A1E             
1834   0A1E             	;----------------------------------------
1835   0A1E             	; m1 = VOL/VOLR
1836   0A1E             	; m2 = GAIN
1837   0A1E             	; m4 = PITCH
1838   0A1E             	;----------------------------------------
1839   0A1E 7D          	mov	a, x				; DSPA = voices[x]
1840   0A1F 9F          	xcn	a				;
1841   0A20 C4 F2       	mov	SPC_DSPA, a			;
1842   0A22             						;------------------------------
1843   0A22 E4 C8       	mov	a, t_flags			; test for KEYON
1844   0A24 28 80       	and	a, #TF_START			;
1845   0A26 F0 15       	beq	_cpa_nstart			;------------------------------
1846   0A28             						;keyon:
1847   0A28 8D 04       	mov	y, #SAMP_DINDEX			; set SRCN
1848   0A2A F7 0C       	mov	a, [m5]+y			;
1849   0A2C 18 04 F2    	or	SPC_DSPA, #DSPV_SRCN		;
1850   0A2F C4 F3       	mov	SPC_DSPD, a			;------------------------------
1851   0A31             	;----------------------------------------
1852   0A31             	; **TODO: SAMPLE OFFSET
1853   0A31             	;----------------------------------------
1854   0A31 8F 4C F2    	mov	SPC_DSPA, #DSP_KON		; set KON bit
1855   0A34 F5 2F 08    	mov	a, !BITS+x			;
1856   0A37 C4 F3       	mov	SPC_DSPD, a			;------------------------------
1857   0A39 7D          	mov	a, x				; restore DSPA = voices[x]
1858   0A3A 9F          	xcn	a				;
1859   0A3B C4 F2       	mov	SPC_DSPA, a			;
1860   0A3D             ;------------------------------------------------
1861   0A3D             _cpa_nstart:
1862   0A3D             ;------------------------------------------------
1863   0A3D FA 04 F3    	mov	SPC_DSPD, m1			; set VOLUME
1864   0A40 AB F2       	inc	SPC_DSPA			;
1865   0A42 FA 05 F3    	mov	SPC_DSPD, m1+1			;
1866   0A45 AB F2       	inc	SPC_DSPA			;------------------------------
1867   0A47 FA 0A F3    	mov	SPC_DSPD, m4			; set PITCH
1868   0A4A AB F2       	inc	SPC_DSPA			;
1869   0A4C FA 0B F3    	mov	SPC_DSPD, m4+1			;
1870   0A4F AB F2       	inc	SPC_DSPA			;
1871   0A51 AB F2       	inc	SPC_DSPA			;------------------------------
1872   0A53             						;
1873   0A53             	;cmp	x, #MAX_ADSR_CHANNELS		; only channels 0-3 may use ADSR
1874   0A53             	;bcs	_ch_direct_gain			;
1875   0A53             	;mov	a, ch_ad+x			; test to see if ADSR has been
1876   0A53             	;cmp	a, #ADSR			; set for channel
1877   0A53             	;bcs	_ch_adsr			;
1878   0A53             						;
1879   0A53             _ch_direct_gain:				;
1880   0A53 8F 00 F3    	mov	SPC_DSPD, #00h			; disable ADSR
1881   0A56 18 07 F2    	or	SPC_DSPA, #07h			; set GAIN [default]
1882   0A59 FA 06 F3    	mov	SPC_DSPD, m2			;------------------------------
1883   0A5C             						;
1884   0A5C             	;----------------------------------------
1885   0A5C             	; **TODO: RESTORE SAMPLE OFFSET
1886   0A5C             	;----------------------------------------
1887   0A5C             						;
1888   0A5C             _end_ch_process_audio:				;
1889   0A5C 01          	SPROC					;
1890   0A5D             _env_quit:					;
1891   0A5D 6F          	ret					;
1892   0A5E             						;
1893   0A5E             _ch_adsr:					;
1894   0A5E             	;mov	SPC_DSPD, a			; store attack and decay rate
1895   0A5E             	;inc	SPC_DSPA			;
1896   0A5E             	;mov	a, ch_sr+x			;
1897   0A5E             	;mov	SPC_DSPD, a			; store sustain rate and level
1898   0A5E             	;bra	_end_ch_process_audio		;
1899   0A5E             
1900   0A5E             ;********************************************************
1901   0A5E             Channel_ProcessEnvelope:
1902   0A5E             ;********************************************************
1903   0A5E E4 C8       	mov	a, t_flags			; exit if 'note delay' is set
1904   0A60 28 02       	and	a, #TF_DELAY			;
1905   0A62 D0 F9       	bne	_env_quit			;
1906   0A64             
1907   0A64 8D 04       	mov	y, #INS_ENVLEN			; test for envelope
1908   0A66 F7 CA       	mov	a, [p_instr]+y			;
1909   0A68 C4 02       	mov	m0, a				;
1910   0A6A D0 0B       	bne	_envelope_valid			;if no envelope:
1911   0A6C 8F FF C9    	mov	t_env, #255			; set to max
1912   0A6F             
1913   0A6F F4 83       	mov	a, ch_flags+x			; start fade on KEYOFF
1914   0A71 28 10       	and	a, #CF_KEYON			;
1915   0A73 F0 E8       	beq	_env_quit			;
1916   0A75 2F 6E       	bra	_env_setfade			;
1917   0A77             						;
1918   0A77             _envelope_valid:
1919   0A77 F4 9B       	mov	a, ch_env_node+x		; read envelope node data
1920   0A79             
1921   0A79 60          	clrc					; m1/m2
1922   0A7A 88 08       	adc	a, #INS_ENVDATA			;
1923   0A7C FD          	mov	y, a				;
1924   0A7D F7 CA       	mov	a, [p_instr]+y			;
1925   0A7F C4 04       	mov	m1, a				;
1926   0A81 FC          	inc	y				;
1927   0A82 F7 CA       	mov	a, [p_instr]+y			;
1928   0A84 C4 05       	mov	m1+1, a				;
1929   0A86 FC          	inc	y				;
1930   0A87 F7 CA       	mov	a, [p_instr]+y			;
1931   0A89 C4 06       	mov	m2, a				;
1932   0A8B FC          	inc	y				;
1933   0A8C F7 CA       	mov	a, [p_instr]+y			;
1934   0A8E C4 07       	mov	m2+1, a				;
1935   0A90             
1936   0A90 01          	SPROC
1937   0A91 F4 A3       	mov	a, ch_env_tick+x		; test zero/nonzero tick
1938   0A93 D0 0A       	bne	_env_nonzero_tick		;
1939   0A95             						;ZEROTICK:
1940   0A95 E4 04       	mov	a, m1				; copy Y level
1941   0A97 D4 93       	mov	ch_env_y_h+x, a			;
1942   0A99 E8 00       	mov	a, #0				;
1943   0A9B D4 8B       	mov	ch_env_y_l+x, a			;
1944   0A9D 2F 25       	bra	_env_zerotick			;
1945   0A9F             
1946   0A9F             _env_nonzero_tick:				;NONZERO:
1947   0A9F F4 8B       	mov	a, ch_env_y_l+x
1948   0AA1 60          	clrc
1949   0AA2 84 06       	adc	a, m2
1950   0AA4 D4 8B       	mov	ch_env_y_l+x, a
1951   0AA6 F4 93       	mov	a, ch_env_y_h+x
1952   0AA8 84 07       	adc	a, m2+1
1953   0AAA             
1954   0AAA 10 08       	bpl	_catch_negative			; clamp result 0.0->64.0
1955   0AAC E8 00       	mov	a, #0				;
1956   0AAE D4 93       	mov	ch_env_y_h+x, a			;
1957   0AB0 D4 8B       	mov	ch_env_y_l+x, a			;
1958   0AB2 2F 10       	bra	_env_zerotick			;
1959   0AB4             						;
1960   0AB4             _catch_negative:				;
1961   0AB4 68 40       	cmp	a, #64				;
1962   0AB6 90 0A       	bcc	_catch_plus			;
1963   0AB8 E8 40       	mov	a, #64				;
1964   0ABA D4 93       	mov	ch_env_y_h+x, a			;
1965   0ABC E8 00       	mov	a, #0				;
1966   0ABE D4 8B       	mov	ch_env_y_l+x, a			;
1967   0AC0 2F 02       	bra	_env_zerotick			;
1968   0AC2             						;
1969   0AC2             _catch_plus:					;
1970   0AC2 D4 93       	mov	ch_env_y_h+x, a			;
1971   0AC4             
1972   0AC4             _env_zerotick:
1973   0AC4 F4 8B       	mov	a, ch_env_y_l+x			; t_env = env << 2
1974   0AC6 C4 04       	mov	m1, a				;
1975   0AC8 F4 93       	mov	a, ch_env_y_h+x			;
1976   0ACA 0B 04       	asl	m1				;
1977   0ACC 3C          	rol	a				;
1978   0ACD 0B 04       	asl	m1				;
1979   0ACF 3C          	rol	a				;
1980   0AD0             
1981   0AD0 90 02       	bcc	_env_shift_clamp		; clamp to 255
1982   0AD2 E8 FF       	mov	a, #255				;
1983   0AD4             _env_shift_clamp:				;
1984   0AD4 C4 C9       	mov	t_env, a			;
1985   0AD6             
1986   0AD6 F4 83       	mov	a, ch_flags+x			; don't advance if "keyon" and node=sustain
1987   0AD8 28 10       	and	a, #CF_KEYON			;
1988   0ADA F0 10       	beq	_env_nsustain			;
1989   0ADC 8D 05       	mov	y, #INS_ENVSUS			;
1990   0ADE F7 CA       	mov	a, [p_instr]+y			;
1991   0AE0 74 9B       	cmp	a, ch_env_node+x		;
1992   0AE2 D0 08       	bne	_env_nsustain			;
1993   0AE4 6F          	ret					;
1994   0AE5             
1995   0AE5             _env_setfade:					;
1996   0AE5 F4 83       	mov	a, ch_flags+x			;
1997   0AE7 08 20       	or	a, #CF_FADE			;
1998   0AE9 D4 83       	mov	ch_flags+x, a			;
1999   0AEB 6F          	ret
2000   0AEC             						;
2001   0AEC             _env_nsustain:					;
2002   0AEC BB A3       	inc	ch_env_tick+x			; increment tick
2003   0AEE F4 A3       	mov	a, ch_env_tick+x		;
2004   0AF0 64 05       	cmp	a, m1+1				; exit if < duration
2005   0AF2 90 24       	bcc	_env_exit			;
2006   0AF4             
2007   0AF4 E8 00       	mov	a, #0				; reset tick
2008   0AF6 D4 A3       	mov	ch_env_tick+x, a		;
2009   0AF8             
2010   0AF8 8D 07       	mov	y, #INS_ENVLOOPEND		; turn on FADE if keyoff and loop
2011   0AFA F7 CA       	mov	a, [p_instr]+y			;
2012   0AFC 68 FF       	cmp	a, #255				;
2013   0AFE F0 19       	beq	_env_no_loop			;
2014   0B00 F4 83       	mov	a, ch_flags+x			;	
2015   0B02 28 10       	and	a, #CF_KEYON			;	
2016   0B04 D0 06       	bne	_env_no_fade			;	
2017   0B06 F4 83       	mov	a, ch_flags+x			;
2018   0B08 08 20       	or	a, #CF_FADE			;
2019   0B0A D4 83       	mov	ch_flags+x, a			;
2020   0B0C             
2021   0B0C             _env_no_fade:					;
2022   0B0C F4 9B       	mov	a, ch_env_node+x		; test for loop point
2023   0B0E             ;	mov	y, #INS_ENVLOOPEND		;
2024   0B0E 77 CA       	cmp	a, [p_instr]+y			;
2025   0B10 D0 07       	bne	_env_loop_test			;
2026   0B12 8D 06       	mov	y, #INS_ENVLOOPST		;
2027   0B14 F7 CA       	mov	a, [p_instr]+y			;
2028   0B16 D4 9B       	mov	ch_env_node+x, a		;
2029   0B18             _env_exit:
2030   0B18 6F          	ret
2031   0B19             
2032   0B19             _env_loop_test:
2033   0B19             _env_no_loop:
2034   0B19 F4 9B       	mov	a, ch_env_node+x		;
2035   0B1B 80          	setc					; suspicious...
2036   0B1C B8 04 02    	sbc	m0, #4				;
2037   0B1F 64 02       	cmp	a, m0				; test for envelope end
2038   0B21 F0 C2       	beq	_env_setfade			;
2039   0B23 60          	clrc					; increment node
2040   0B24 88 04       	adc	a, #4				;
2041   0B26 D4 9B       	mov	ch_env_node+x, a		;
2042   0B28 6F          	ret
2043   0B29             
2044   0B29             ;********************************************************
2045   0B29             Channel_ProcessVolumeCommand:
2046   0B29             ;********************************************************
2047   0B29 F4 33       	mov	a, ch_volume+x
2048   0B2B FB 63       	mov	y, ch_vcmd+x
2049   0B2D CB 02       	mov	m0, y
2050   0B2F 3F 35 0B    	call	do_vcmd
2051   0B32 D4 33       	mov	ch_volume+x, a
2052   0B34 6F          	ret
2053   0B35             
2054   0B35             do_vcmd:
2055   0B35 AD 41       	cmp	y, #65
2056   0B37 90 19       	bcc	vcmd_setvol
2057   0B39 AD 4B       	cmp	y, #75
2058   0B3B 90 1C       	bcc	vcmd_finevolup
2059   0B3D AD 55       	cmp	y, #85
2060   0B3F 90 29       	bcc	vcmd_finevoldown
2061   0B41 AD 5F       	cmp	y, #95
2062   0B43 90 34       	bcc	vcmd_volup
2063   0B45 AD 69       	cmp	y, #105
2064   0B47 90 3A       	bcc	vcmd_voldown
2065   0B49 AD C1       	cmp	y, #193
2066   0B4B B0 04       	bcs	vcmd_invalid
2067   0B4D AD 80       	cmp	y, #128
2068   0B4F B0 3C       	bcs	vcmd_pan
2069   0B51             vcmd_invalid:
2070   0B51 6F          	ret
2071   0B52             
2072   0B52             ;--------------------------------------------------------
2073   0B52             ; 00-64 set volume
2074   0B52             ;--------------------------------------------------------
2075   0B52             vcmd_setvol:
2076   0B52 78 00 12    	cmp	mod_tick, #0		; a = volume
2077   0B55 D0 01       	bne	exit_vcmd		;
2078   0B57 DD          	mov	a, y			;
2079   0B58             exit_vcmd:				;
2080   0B58 6F          	ret				;
2081   0B59             
2082   0B59             ;--------------------------------------------------------
2083   0B59             ; 65-74 fine vol up
2084   0B59             ;--------------------------------------------------------
2085   0B59             vcmd_finevolup:
2086   0B59 B8 41 02    	sbc	m0, #65			; m0 = rate (-1)
2087   0B5C 78 00 12    	cmp	mod_tick, #0
2088   0B5F D0 F7       	bne	exit_vcmd
2089   0B61             
2090   0B61             _vcmd_add_sat64:
2091   0B61 84 02       	adc	a, m0			; a += rate (+1)
2092   0B63 68 41       	cmp	a, #DEFAULT_VOL_SAT+1	; saturate to DEFAULT_VOL_SAT
2093   0B65 90 F1       	bcc	exit_vcmd		;
2094   0B67 E8 40       	mov	a, #DEFAULT_VOL_SAT	;
2095   0B69 6F          	ret				;
2096   0B6A             
2097   0B6A             ;--------------------------------------------------------
2098   0B6A             ; 75-84 fine vol down
2099   0B6A             ;--------------------------------------------------------
2100   0B6A             vcmd_finevoldown:
2101   0B6A B8 4A 02    	sbc	m0, #75-1		; m0 = rate [carry is cleared]
2102   0B6D 78 00 12    	cmp	mod_tick, #0
2103   0B70 D0 E6       	bne	exit_vcmd
2104   0B72             
2105   0B72             _vcmd_sub_sat0:	
2106   0B72 A4 02       	sbc	a, m0			; a -= rate
2107   0B74 B0 E2       	bcs	exit_vcmd		; saturate lower bound to 0
2108   0B76 E8 00       	mov	a, #0			;
2109   0B78 6F          	ret				;
2110   0B79             
2111   0B79             ;--------------------------------------------------------
2112   0B79             ; 85-94 vol up
2113   0B79             ;--------------------------------------------------------
2114   0B79             vcmd_volup:
2115   0B79 B8 55 02    	sbc	m0, #85			; m0 = rate (-1)
2116   0B7C 78 00 12    	cmp	mod_tick, #0
2117   0B7F F0 D7       	beq	exit_vcmd
2118   0B81 2F DE       	bra	_vcmd_add_sat64
2119   0B83             
2120   0B83             ;--------------------------------------------------------
2121   0B83             ; 95-104 vol down
2122   0B83             ;--------------------------------------------------------
2123   0B83             vcmd_voldown:
2124   0B83 B8 5E 02    	sbc	m0, #95-1
2125   0B86 78 00 12    	cmp	mod_tick, #0
2126   0B89 F0 CD       	beq	exit_vcmd
2127   0B8B 2F E5       	bra	_vcmd_sub_sat0
2128   0B8D             
2129   0B8D             ;--------------------------------------------------------
2130   0B8D             ; 128-192 set pan
2131   0B8D             ;--------------------------------------------------------
2132   0B8D             vcmd_pan:
2133   0B8D 78 00 12    	cmp	mod_tick, #0		; set panning
2134   0B90 D0 C6       	bne	exit_vcmd		;
2135   0B92 2D          	push	a			;
2136   0B93 DD          	mov	a, y			;
2137   0B94 A8 80       	sbc	a, #128			;
2138   0B96 3F D4 10    	call	Command_SetPanningb	; Bugfix by KungFuFurby 12/20/15
2139   0B99             	;mov	ch_panning+x, a		;@@??
2140   0B99 AE          	pop	a			;
2141   0B9A 6F          	ret				;
2142   0B9B             
2143   0B9B             command_memory_map:	
2144   0B9B 000000102020	.byte 00h, 00h, 00h, 10h, 20h, 20h, 30h, 70h, 00h
2144   0BA1 307000
2145   0BA4             	;       A    B    C    D    E    F    G    H    I
2146   0BA4 401010001050	.byte 40h, 10h, 10h, 00h, 10h, 50h, 10h, 80h, 70h
2146   0BAA 108070
2147   0BAD             	;       J    K    L    M    N    O    P    Q    R
2148   0BAD 600070001000	.byte 60h, 00h, 70h, 00h, 10h, 00h, 70h, 00h
2148   0BB3 7000
2149   0BB5             	;       S    T    U    V    W    X    Y    Z
2150   0BB5             
2151   0BB5             ;********************************************************
2152   0BB5             Channel_ProcessCommandMemory:
2153   0BB5             ;********************************************************
2154   0BB5 FB 6B       	mov	y, ch_command+x
2155   0BB7 F6 9A 0B    	mov	a, !command_memory_map-1+y
2156   0BBA F0 3E       	beq	_cpc_quit		; 0 = no memory!
2157   0BBC D8 02       	mov	m0, x
2158   0BBE 60          	clrc
2159   0BBF 84 02       	adc	a, m0
2160   0BC1 FD          	mov	y, a
2161   0BC2 AD 70       	cmp	y, #70h			; <7 : single param
2162   0BC4 90 27       	bcc	_cpcm_single		;
2163   0BC6             ;--------------------------------------------------------
2164   0BC6             _cpcm_double:				; >=7: double param
2165   0BC6             ;--------------------------------------------------------
2166   0BC6 F6 F0 02    	mov	a, !PatternMemory-10h+y
2167   0BC9 C4 02       	mov	m0, a
2168   0BCB F4 73       	mov	a, ch_param+x
2169   0BCD 68 10       	cmp	a, #10h
2170   0BCF 90 09       	bcc	_cpcmd_h_clr
2171   0BD1 2D          	push	a
2172   0BD2 38 0F 02    	and	m0, #0Fh
2173   0BD5 04 02       	or	a, m0
2174   0BD7 C4 02       	mov	m0, a
2175   0BD9 AE          	pop	a
2176   0BDA             _cpcmd_h_clr:
2177   0BDA 28 0F       	and	a, #0Fh
2178   0BDC F0 07       	beq	_cpcmd_l_clr
2179   0BDE 38 F0 02    	and	m0, #0F0h
2180   0BE1 04 02       	or	a, m0
2181   0BE3 C4 02       	mov	m0, a
2182   0BE5             _cpcmd_l_clr:
2183   0BE5 E4 02       	mov	a, m0
2184   0BE7 D4 73       	mov	ch_param+x, a
2185   0BE9 D6 F0 02    	mov	!PatternMemory-10h+y, a
2186   0BEC 6F          	ret
2187   0BED             
2188   0BED             ;--------------------------------------------------------
2189   0BED             _cpcm_single:
2190   0BED             ;--------------------------------------------------------
2191   0BED F4 73       	mov	a, ch_param+x
2192   0BEF F0 04       	beq	_cpcms_clear
2193   0BF1 D6 F0 02    	mov	!PatternMemory-10h+y, a
2194   0BF4 6F          	ret
2195   0BF5             _cpcms_clear:
2196   0BF5 F6 F0 02    	mov	a, !PatternMemory-10h+y
2197   0BF8 D4 73       	mov	ch_param+x, a	
2198   0BFA             _cpc_quit:
2199   0BFA 6F          	ret
2200   0BFB             
2201   0BFB             ;********************************************************
2202   0BFB             Channel_ProcessCommand:
2203   0BFB             ;********************************************************
2204   0BFB F4 6B       	mov	a, ch_command+x		; exit if cmd = 0 
2205   0BFD F0 FB       	beq	_cpc_quit		;
2206   0BFF             
2207   0BFF 78 00 12    	cmp	mod_tick, #0		; process MEMORY on t0
2208   0C02 D0 03       	bne	_cpc_nott0		;
2209   0C04 3F B5 0B    	call	Channel_ProcessCommandMemory
2210   0C07             
2211   0C07             _cpc_nott0:
2212   0C07 FB 6B       	mov	y, ch_command+x		; setup jump address
2213   0C09 F6 1B 0C    	mov	a, !CMD_JUMPTABLE_L-1+y	;
2214   0C0C C5 1A 0C    	mov	!cpc_jump+1, a		;
2215   0C0F F6 35 0C    	mov	a, !CMD_JUMPTABLE_H-1+y	;
2216   0C12 C5 1B 0C    	mov	!cpc_jump+2, a		;
2217   0C15 F4 73       	mov	a, ch_param+x		; preload data
2218   0C17 EB 12       	mov	y, mod_tick		;
2219   0C19             
2220   0C19             	;-------------------------------
2221   0C19             	; a = param
2222   0C19             	; y = tick
2223   0C19             	; Z = tick=0
2224   0C19             	;-------------------------------
2225   0C19             	
2226   0C19             cpc_jump:
2227   0C19 5F 11 00    	jmp	$0011
2228   0C1C             	
2229   0C1C             ; note: tasm has some kind of bug that removes the 16th character
2230   0C1C             ; in macro args (...?)
2231   0C1C             ;-----------------------------------------------------------------------
2232   0C1C             CMD_JUMPTABLE_L:
2233   0C1C             ;-----------------------------------------------------------------------
2234   0C1C 50          	.byte	LBYTE(Command_SetSpeed)			; Axx
2235   0C1D 59          	.byte	LBYTE(Command_SetPositXion)		; Bxx
2236   0C1E 62          	.byte	LBYTE(Command_PatternBXreak)		; Cxx
2237   0C1F 74          	.byte	LBYTE(Command_VolumeSlXide)		; Dxy
2238   0C20 82          	.byte	LBYTE(Command_PitchSliXdeDown)		; Exy
2239   0C21 9D          	.byte	LBYTE(Command_PitchSliXdeUp)		; Fxy
2240   0C22 B5          	.byte	LBYTE(Command_GlissandXo)		; Gxx
2241   0C23 F0          	.byte	LBYTE(Command_Vibrato)			; Hxy
2242   0C24 F7          	.byte	LBYTE(SCommand_Null)			; Ixx Tremor
2243   0C25 EC          	.byte	LBYTE(Command_Arpeggio)			; Jxy
2244   0C26 6D          	.byte	LBYTE(Command_VolumeSlXideVibrato)	; Kxy
2245   0C27 F7          	.byte	LBYTE(SCommand_Null)			; Lxx VolumeSlideGliss
2246   0C28 20          	.byte	LBYTE(Command_SetChannXelVolume)	; Mxx
2247   0C29 2C          	.byte	LBYTE(Command_ChannelVoolumeSlide)	; Nxx
2248   0C2A F7          	.byte	LBYTE(SCommand_Null)			; Oxx SampleOffset
2249   0C2B 3B          	.byte	LBYTE(Command_PanningSXlide)		; Pxy
2250   0C2C 4A          	.byte	LBYTE(Command_RetriggeXrNote)		; Qxy
2251   0C2D ED          	.byte	LBYTE(Command_Tremolo)			; Rxt
2252   0C2E DE          	.byte	LBYTE(Command_Extended)			; Sxy
2253   0C2F 8C          	.byte	LBYTE(Command_Tempo)			; Txy
2254   0C30 F7          	.byte	LBYTE(SCommand_Null)			; Uxx Fine Vibrato
2255   0C31 B7          	.byte	LBYTE(Command_SetGlobaXlVolume)		; Vxx
2256   0C32 C2          	.byte	LBYTE(Command_GlobalVoXlumeSlide)	; Wxy
2257   0C33 CE          	.byte	LBYTE(Command_SetPanniXng)		; Xxx
2258   0C34 E8          	.byte	LBYTE(Command_PanbrellXo)		; Yxx
2259   0C35 3D          	.byte	LBYTE(Command_SetParamXeter)		; Zxx
2260   0C36             ;-----------------------------------------------------------------------
2261   0C36             CMD_JUMPTABLE_H:
2262   0C36             ;-----------------------------------------------------------------------
2263   0C36 0C          	.byte	HBYTE(Command_SetSpeed)			; Axx
2264   0C37 0C          	.byte	HBYTE(Command_SetPositXion)		; Bxx
2265   0C38 0C          	.byte	HBYTE(Command_PatternBXreak)		; Cxx
2266   0C39 0C          	.byte	HBYTE(Command_VolumeSlXide)		; Dxy
2267   0C3A 0C          	.byte	HBYTE(Command_PitchSliXdeDown)		; Exy
2268   0C3B 0C          	.byte	HBYTE(Command_PitchSliXdeUp)		; Fxy
2269   0C3C 0C          	.byte	HBYTE(Command_GlissandXo)		; Gxx
2270   0C3D 0C          	.byte	HBYTE(Command_Vibrato)			; Hxy
2271   0C3E 0E          	.byte	HBYTE(SCommand_Null)			; Ixx Tremor
2272   0C3F 0D          	.byte	HBYTE(Command_Arpeggio)			; Jxy
2273   0C40 0C          	.byte	HBYTE(Command_VolumeSlXideVibrato)	; Kxx
2274   0C41 0E          	.byte	HBYTE(SCommand_Null)			; Lxx VolumeSlideGliss
2275   0C42 0E          	.byte	HBYTE(Command_SetChannXelVolume)	; Mxx
2276   0C43 0E          	.byte	HBYTE(Command_ChannelVoolumeSlide)	; Nxx
2277   0C44 0E          	.byte	HBYTE(SCommand_Null)			; Oxx VolumeSlideGliss
2278   0C45 0E          	.byte	HBYTE(Command_PanningSXlide)		; Pxy
2279   0C46 0E          	.byte	HBYTE(Command_RetriggeXrNote)		; Qxy
2280   0C47 0C          	.byte	HBYTE(Command_Tremolo)			; Rxy
2281   0C48 0E          	.byte	HBYTE(Command_Extended)			; Sxy
2282   0C49 10          	.byte	HBYTE(Command_Tempo)			; Txy
2283   0C4A 0E          	.byte	HBYTE(SCommand_Null)			; Uxx FineVibrato
2284   0C4B 10          	.byte	HBYTE(Command_SetGlobaXlVolume)		; Vxx
2285   0C4C 10          	.byte	HBYTE(Command_GlobalVoXlumeSlide)	; Wxy
2286   0C4D 10          	.byte	HBYTE(Command_SetPanniXng)		; Xxx
2287   0C4E 0C          	.byte	HBYTE(Command_PanbrellXo)		; Yxx
2288   0C4F 11          	.byte	HBYTE(Command_SetParamXeter)		; Zxx
2289   0C50             
2290   0C50             ;=======================================================================
2291   0C50             Command_SetSpeed:
2292   0C50             ;=======================================================================
2293   0C50 D0 06       	bne	cmd_exit1			;on tick0:
2294   0C52 68 00       	cmp	a, #0				; if param != 0
2295   0C54 F0 02       	beq	cmd_exit1			; mod_speed = param
2296   0C56 C4 15       	mov	mod_speed, a			;
2297   0C58             cmd_exit1:					;
2298   0C58 6F          	ret					;
2299   0C59             						;
2300   0C59             ;=======================================================================
2301   0C59             Command_SetPosition:
2302   0C59             ;=======================================================================
2303   0C59 D0 FD       	bne	cmd_exit1			;on tick0:
2304   0C5B             Command_SetPosition2:				;
2305   0C5B C4 21       	mov	pattjump_index, a		; set jump index
2306   0C5D 18 80 EA    	or	special, #SF_PATTERNJUMP	;
2307   0C60 2F 07       	bra	_enable_pattjump		;
2308   0C62             						;
2309   0C62             ;=======================================================================
2310   0C62             Command_PatternBreak:
2311   0C62             ;=======================================================================
2312   0C62             	; nonzero params are not supported	;
2313   0C62 D0 F4       	bne	cmd_exit1			;on tick0:
2314   0C64 FA 11 21    	mov	pattjump_index, mod_position	; index = position+1
2315   0C67 AB 21       	inc	pattjump_index			;
2316   0C69             _enable_pattjump:				;
2317   0C69 09 80 EA    	or	special, SF_PATTERNJUMP		; enable pattern jump(break)
2318   0C6C 6F          	ret					;
2319   0C6D             						;
2320   0C6D             ;=======================================================================
2321   0C6D             Command_VolumeSlideVibrato:
2322   0C6D             ;=======================================================================
2323   0C6D 3F F0 0C    	call	Command_Vibrato
2324   0C70             
2325   0C70 F4 73       	mov	a, ch_param+x
2326   0C72 EB 12       	mov	y, mod_tick
2327   0C74             ;=======================================================================
2328   0C74             Command_VolumeSlide:				; Dxy
2329   0C74             ;=======================================================================
2330   0C74 FA C4 02    	mov	m0, t_volume			; slide volume
2331   0C77 8F 40 03    	mov	m0+1, #DEFAULT_VOL_SAT		;
2332   0C7A 3F D2 12    	call	DoVolumeSlide			;
2333   0C7D C4 C4       	mov	t_volume, a			;
2334   0C7F D4 33       	mov	ch_volume+x, a			;
2335   0C81 6F          	ret					;
2336   0C82             
2337   0C82             ;=======================================================================
2338   0C82             Command_PitchSlideDown:
2339   0C82             ;=======================================================================
2340   0C82 3F 3D 13    	call	PitchSlide_Load			; m0 = slide amount
2341   0C85 BA C6       	movw	ya, t_pitch			; pitch -= m0
2342   0C87 9A 02       	subw	ya, m0				;
2343   0C89 30 07       	bmi	_exx_zero			; saturate lower to 0
2344   0C8B DA C6       _ps:	movw	t_pitch, ya			;
2345   0C8D D4 23       	mov	ch_pitch_l+x, a			;
2346   0C8F DB 2B       	mov	ch_pitch_h+x, y			;
2347   0C91 6F          	ret					;
2348   0C92             ;---------------------------------------------------------------------
2349   0C92             _exx_zero:
2350   0C92             ;---------------------------------------------------------------------
2351   0C92 E8 00       	mov	a, #0				; zero pitch
2352   0C94 8D 00       	mov	y, #0				;
2353   0C96 DA C6       	movw	t_pitch, ya			;
2354   0C98 D4 23       	mov	ch_pitch_l+x, a			;
2355   0C9A D4 2B       	mov	ch_pitch_h+x, a			;
2356   0C9C 6F          	ret					;
2357   0C9D             ;=======================================================================
2358   0C9D             Command_PitchSlideUp:
2359   0C9D             ;=======================================================================
2360   0C9D 3F 3D 13    	call	PitchSlide_Load			; m0 = slide amount
2361   0CA0 BA C6       	movw	ya, t_pitch			;
2362   0CA2 7A 02       	addw	ya, m0				;
2363   0CA4 AD 1A       	cmp	y, #01Ah			;
2364   0CA6 B0 02       	bcs	_fxx_max			; clamp upper bound to 1A00H
2365   0CA8 2F E1       	bra	_ps
2366   0CAA             ;-----------------------------------------------------------------------
2367   0CAA             _fxx_max:
2368   0CAA             ;-----------------------------------------------------------------------
2369   0CAA 8D 1A       	mov	y, #01Ah			; max pitch
2370   0CAC E8 00       	mov	a, #0				;
2371   0CAE DA C6       	movw	t_pitch, ya			;
2372   0CB0 D4 23       	mov	ch_pitch_l+x, a			;
2373   0CB2 DB 2B       	mov	ch_pitch_h+x, y			;
2374   0CB4 6F          	ret					;
2375   0CB5             ;=======================================================================
2376   0CB5             Command_Glissando:
2377   0CB5             ;=======================================================================
2378   0CB5 F0 A1       	beq	cmd_exit1			; on tickn:
2379   0CB7             
2380   0CB7 3F 49 13    	call	Amult4_M0			; m0 = xx*4 (slide amount)
2381   0CBA             
2382   0CBA F4 53       	mov	a, ch_note+x			; m1 = slide target
2383   0CBC 8F 00 04    	mov	m1, #0				;
2384   0CBF 5C          	lsr	a				;
2385   0CC0 6B 04       	ror	m1				;
2386   0CC2 5C          	lsr	a				;
2387   0CC3 6B 04       	ror	m1				;
2388   0CC5 C4 05       	mov	m1+1, a				;
2389   0CC7             
2390   0CC7 BA C6       	movw	ya, t_pitch			; test slide direction
2391   0CC9 5A 04       	cmpw	ya, m1				;
2392   0CCB 90 0F       	bcc	_gxx_slideup
2393   0CCD             ;-----------------------------------------------
2394   0CCD             _gxx_slidedown:
2395   0CCD             ;-----------------------------------------------
2396   0CCD 9A 02       	subw	ya, m0				; subtract xx*4 from pitch
2397   0CCF 30 13       	bmi	_gxx_set			; saturate lower to target pitch
2398   0CD1 5A 04       	cmpw	ya, m1				;
2399   0CD3 90 0F       	bcc	_gxx_set			;
2400   0CD5             _gxx_set2:					;
2401   0CD5 DA C6       	movw	t_pitch, ya			;
2402   0CD7 D4 23       	mov	ch_pitch_l+x, a			;
2403   0CD9 DB 2B       	mov	ch_pitch_h+x, y			;
2404   0CDB 6F          	ret					;
2405   0CDC             ;-----------------------------------------------
2406   0CDC             _gxx_slideup:
2407   0CDC             ;-----------------------------------------------
2408   0CDC 7A 02       	addw	ya, m0				; add xx*4 to pitch
2409   0CDE 5A 04       	cmpw	ya, m1				; saturate upper to target pitch
2410   0CE0 B0 02       	bcs	_gxx_set			;
2411   0CE2 2F F1       	bra	_gxx_set2			;
2412   0CE4             ;-----------------------------------------------
2413   0CE4             _gxx_set:					; pitch = target
2414   0CE4             ;-----------------------------------------------
2415   0CE4 BA 04       	movw	ya, m1				;
2416   0CE6 2F ED       	bra	_gxx_set2			;
2417   0CE8             
2418   0CE8             ;=======================================================================
2419   0CE8             Command_Panbrello:
2420   0CE8             ;=======================================================================
2421   0CE8 18 40 EB    	or	special_mode, #SM_PANBRELLO
2422   0CEB 2F 03       	bra	Command_Vibrato
2423   0CED             
2424   0CED             ;=======================================================================
2425   0CED             Command_Tremolo:
2426   0CED             ;=======================================================================
2427   0CED 18 80 EB    	or	special_mode, #SM_TREMOLO
2428   0CF0             ;=======================================================================
2429   0CF0             Command_Vibrato:
2430   0CF0             ;=======================================================================
2431   0CF0 E8 70       	mov	a, #70h
2432   0CF2 D8 02       	mov	m0, x
2433   0CF4 60          	clrc
2434   0CF5 84 02       	adc	a, m0
2435   0CF7 FD          	mov	y, a
2436   0CF8 F6 F0 02    	mov	a, !PatternMemory-10h+y
2437   0CFB             
2438   0CFB C4 02       	mov	m0, a
2439   0CFD 38 0F 02    	and	m0, #0Fh
2440   0D00             
2441   0D00 5C          	lsr	a				; cmem += x*4
2442   0D01 5C          	lsr	a				;
2443   0D02 28 3C       	and	a, #111100b			;
2444   0D04 60          	clrc					;
2445   0D05 94 4B       	adc	a, ch_cmem+x			;
2446   0D07 D4 4B       	mov	ch_cmem+x, a			;
2447   0D09             
2448   0D09 FD          	mov	y, a				; a = sine[cmem]
2449   0D0A             
2450   0D0A F4 B3       	mov	a, ch_vib_wav+x
2451   0D0C C4 04       	mov	m1, a				; m1 = waveform value
2452   0D0E F4 AB       	mov	a, ch_env_vib+x			; a = vibrato waveform type
2453   0D10             
2454   0D10 68 01       	cmp	a, #1
2455   0D12 F0 26       	beq	_hxx_ramp_down
2456   0D14 68 02       	cmp	a, #2
2457   0D16 F0 30       	beq	_hxx_sq
2458   0D18 68 04       	cmp	a, #4
2459   0D1A F0 32       	beq	_hxx_tri
2460   0D1C 68 05       	cmp	a, #5
2461   0D1E F0 4A       	beq	_hxx_ramp_up
2462   0D20 68 06       	cmp	a, #6
2463   0D22 F0 32       	beq	_hxx_sq2
2464   0D24             ;-----------------------------------------------
2465   0D24             _hxx_sine:					; S30
2466   0D24             ;-----------------------------------------------;
2467   0D24 AD 80       	cmp	y, #80h				;
2468   0D26 B0 05       	bcs	_hxx_sine_neg			;
2469   0D28 F6 99 19    	mov	a, !IT_FineSineData+y		; copy positive values
2470   0D2B 2F 51       	bra	_hxx_bpl			;
2471   0D2D             						;
2472   0D2D             _hxx_sine_neg:					;
2473   0D2D DD          	mov	a, y				; IT_FineSineData is only 128
2474   0D2E 60          	clrc					; bytes long, once the end is
2475   0D2F A8 7F       	sbc	a, #127				; reached reset to the start
2476   0D31 FD          	mov	y, a				;
2477   0D32 F6 99 19    	mov	a, !IT_FineSineData+y		; copy positive values
2478   0D35 48 FF       	eor	a, #0FFh			; ...and make them negative
2479   0D37 BC          	inc	a				;
2480   0D38 2F 44       	bra	_hxx_bpl			;
2481   0D3A             ;----------------------------------------------- 
2482   0D3A             _hxx_ramp_down:					; S31
2483   0D3A             ;-----------------------------------------------
2484   0D3A AD 00       	cmp	y, #0
2485   0D3C D0 03       	bne	_hxx_chk_ramp
2486   0D3E             _hxx_res_ramp:
2487   0D3E 8F 40 04    	mov	m1, #DEFAULT_RAMP_POS
2488   0D41             _hxx_chk_ramp:
2489   0D41 78 BF 04    	cmp	m1, #DEFAULT_RAMP_NEG
2490   0D44 F0 F8       	beq	_hxx_res_ramp
2491   0D46             _hxx_dec_ramp:
2492   0D46 2F 32       	bra	_dec_m1_hxx_bpl
2493   0D48             ;-----------------------------------------------
2494   0D48             _hxx_sq:					; S32
2495   0D48             ;-----------------------------------------------
2496   0D48 AD 80       	cmp	y, #80h
2497   0D4A B0 16       	bcs	_hxx_neg_sq
2498   0D4C 2F 18       	bra	_hxx_pos_sq
2499   0D4E             ;-----------------------------------------------
2500   0D4E             ;_hxx_rand:					; S33 - unimplemented
2501   0D4E             ;-----------------------------------------------
2502   0D4E             _hxx_tri:					; S34
2503   0D4E             ;-----------------------------------------------
2504   0D4E AD C0       	cmp	y, #0C0h
2505   0D50 B0 24       	bcs	_inc_m1_hxx_bpl
2506   0D52 AD 40       	cmp	y, #040h
2507   0D54 B0 24       	bcs	_dec_m1_hxx_bpl
2508   0D56             ;-----------------------------------------------
2509   0D56             _hxx_sq2:					; S36
2510   0D56             ;-----------------------------------------------
2511   0D56 AD C0       	cmp	y, #0C0h
2512   0D58 B0 0C       	bcs	_hxx_pos_sq
2513   0D5A AD 80       	cmp	y, #80h
2514   0D5C B0 04       	bcs	_hxx_neg_sq
2515   0D5E AD 40       	cmp	y, #40h
2516   0D60 B0 04       	bcs	_hxx_pos_sq
2517   0D62             ;-----------------------------------------------
2518   0D62             _hxx_neg_sq:
2519   0D62             ;-----------------------------------------------
2520   0D62 E8 00       	mov	a, #DEFAULT_SQ_NEG
2521   0D64 2F 18       	bra	_hxx_bpl
2522   0D66             ;-----------------------------------------------
2523   0D66             _hxx_pos_sq:
2524   0D66             ;-----------------------------------------------
2525   0D66 E8 40       	mov	a, #DEFAULT_SQ_POS
2526   0D68 2F 14       	bra	_hxx_bpl
2527   0D6A             ;-----------------------------------------------
2528   0D6A             _hxx_ramp_up:					; S35
2529   0D6A             ;-----------------------------------------------
2530   0D6A AD 00       	cmp	y, #0
2531   0D6C D0 03       	bne	_hex_chk_ramp2
2532   0D6E             _hex_res_ramp2:
2533   0D6E 8F BF 04    	mov	m1, #DEFAULT_RAMP_NEG
2534   0D71             _hex_chk_ramp2:
2535   0D71 78 40 04    	cmp	m1, #DEFAULT_RAMP_POS
2536   0D74 F0 F8       	beq	_hex_res_ramp2
2537   0D76             ;-----------------------------------------------
2538   0D76             _inc_m1_hxx_bpl:
2539   0D76             ;-----------------------------------------------
2540   0D76 AB 04       	inc	m1
2541   0D78 2F 02       	bra	_hxx_bpl_movm1a
2542   0D7A             ;-----------------------------------------------
2543   0D7A             _dec_m1_hxx_bpl:
2544   0D7A             ;-----------------------------------------------
2545   0D7A 8B 04       	dec	m1
2546   0D7C             ;-----------------------------------------------
2547   0D7C             _hxx_bpl_movm1a:
2548   0D7C             ;-----------------------------------------------
2549   0D7C E4 04       	mov	a, m1
2550   0D7E             ;-----------------------------------------------
2551   0D7E             _hxx_bpl:
2552   0D7E             ;-----------------------------------------------
2553   0D7E D4 B3       	mov	ch_vib_wav+x, a
2554   0D80 10 2A       	bpl	_hxx_plus
2555   0D82             ;-----------------------------------------------
2556   0D82             _hxx_neg:
2557   0D82             ;-----------------------------------------------
2558   0D82 48 FF       	eor	a, #255
2559   0D84 BC          	inc	a
2560   0D85             
2561   0D85 3F DF 0D    	call	_hxx_mulya
2562   0D88 C4 02       	mov	m0, a
2563   0D8A E3 EB 0B    	bbs7	special_mode, _hxx_subw_volume	; SM_TREMOLO
2564   0D8D C3 EB 12    	bbs6	special_mode, _hxx_subw_panning	; SM_PANBRELLO
2565   0D90             ;-----------------------------------------------
2566   0D90             _hxx_subw:
2567   0D90             ;-----------------------------------------------
2568   0D90 BA C6       	movw	ya, t_pitch
2569   0D92 9A 02       	subw	ya, m0
2570   0D94 30 34       	bmi	_hxx_zero
2571   0D96 2F 21       	bra	_store_pitch
2572   0D98             ;-----------------------------------------------
2573   0D98             _hxx_subw_volume:
2574   0D98             ;-----------------------------------------------
2575   0D98 E4 C4       	mov	a, t_volume
2576   0D9A 8D 00       	mov	y, #0
2577   0D9C 9A 02       	subw	ya, m0
2578   0D9E 30 31       	bmi	_hxx_zvolume
2579   0DA0 2F 1A       	bra	_store_volume
2580   0DA2             ;-----------------------------------------------
2581   0DA2             _hxx_subw_panning:
2582   0DA2             ;-----------------------------------------------
2583   0DA2 E4 C5       	mov	a, t_panning
2584   0DA4 8D 00       	mov	y, #0
2585   0DA6 9A 02       	subw	ya, m0
2586   0DA8 30 2E       	bmi	_hxx_zpanning
2587   0DAA 2F 17       	bra	_store_panning
2588   0DAC             ;-----------------------------------------------
2589   0DAC             _hxx_plus:
2590   0DAC             ;-----------------------------------------------
2591   0DAC 3F DF 0D    	call	_hxx_mulya
2592   0DAF EB 03       	mov	y, m0+1
2593   0DB1 E3 EB 08    	bbs7	special_mode, _store_volume	; SM_TREMOLO
2594   0DB4 C3 EB 0C    	bbs6	special_mode, _store_panning	; SM_PANBRELLO
2595   0DB7             _hxx_addw:
2596   0DB7 7A C6       	addw	ya, t_pitch			; warning: might break something on highest note
2597   0DB9             ;-----------------------------------------------
2598   0DB9             _store_pitch:
2599   0DB9             ;-----------------------------------------------
2600   0DB9 DA C6       	movw	t_pitch, ya
2601   0DBB 6F          	ret
2602   0DBC             ;-----------------------------------------------
2603   0DBC             _store_volume:
2604   0DBC             ;-----------------------------------------------
2605   0DBC 60          	clrc
2606   0DBD 84 C4       	adc	a, t_volume
2607   0DBF C4 C4       	mov	t_volume, a
2608   0DC1 2F 11       	bra	_disable_tremolo
2609   0DC3             ;-----------------------------------------------
2610   0DC3             _store_panning:
2611   0DC3             ;-----------------------------------------------
2612   0DC3 60          	clrc
2613   0DC4 84 C5       	adc	a, t_panning
2614   0DC6 C4 C5       	mov	t_panning, a
2615   0DC8 2F 11       	bra	_disable_panbrello
2616   0DCA             ;-----------------------------------------------
2617   0DCA             _hxx_zero:
2618   0DCA             ;-----------------------------------------------
2619   0DCA 8F 00 C6    	mov	t_pitch, #0
2620   0DCD 8F 00 C7    	mov	t_pitch+1, #0
2621   0DD0 6F          	ret
2622   0DD1             ;-----------------------------------------------
2623   0DD1             _hxx_zvolume:
2624   0DD1             ;-----------------------------------------------
2625   0DD1 8F 00 C4    	mov	t_volume, #0
2626   0DD4             _disable_tremolo:
2627   0DD4 38 7F EA    	and	special, #~SM_TREMOLO
2628   0DD7 6F          	ret
2629   0DD8             ;-----------------------------------------------
2630   0DD8             _hxx_zpanning:
2631   0DD8             ;-----------------------------------------------
2632   0DD8 8F 00 C5    	mov	t_panning, #0
2633   0DDB             _disable_panbrello:
2634   0DDB 38 BF EA    	and	special, #~SM_PANBRELLO
2635   0DDE 6F          	ret
2636   0DDF             ;-----------------------------------------------
2637   0DDF             _hxx_mulya:
2638   0DDF             ;-----------------------------------------------
2639   0DDF EB 02       	mov	y, m0
2640   0DE1 CF          	mul	ya
2641   0DE2 CB 03       	mov	m0+1, y
2642   0DE4 8D 04       	mov	y, #4
2643   0DE6             _hxx_div:
2644   0DE6 4B 03       	lsr	m0+1
2645   0DE8 7C          	ror	a
2646   0DE9 FE FB       	dbnz	y, _hxx_div
2647   0DEB 6F          	ret
2648   0DEC             
2649   0DEC             ;=======================================================================
2650   0DEC             ;Command_Tremor:					; unimplemented
2651   0DEC             ;=======================================================================
2652   0DEC             ;	ret
2653   0DEC             
2654   0DEC             ;=======================================================================
2655   0DEC             Command_Arpeggio:
2656   0DEC             ;=======================================================================
2657   0DEC D0 05       	bne	_jxx_other
2658   0DEE E8 00       	mov	a, #0
2659   0DF0 D4 4B       	mov	ch_cmem+x, a
2660   0DF2 6F          	ret
2661   0DF3             
2662   0DF3             _jxx_other:
2663   0DF3 F4 4B       	mov	a, ch_cmem+x
2664   0DF5 BC          	inc	a
2665   0DF6 68 03       	cmp	a, #3
2666   0DF8 90 02       	bcc	_jxx_less3
2667   0DFA E8 00       	mov	a, #0
2668   0DFC             _jxx_less3:
2669   0DFC D4 4B       	mov	ch_cmem+x, a
2670   0DFE 68 01       	cmp	a, #1
2671   0E00 F0 03       	beq	_jxx_x
2672   0E02 B0 17       	bcs	_jxx_y
2673   0E04 6F          	ret
2674   0E05             
2675   0E05 F4 73       _jxx_x:	mov	a, ch_param+x
2676   0E07             
2677   0E07             _jxx_add:
2678   0E07 28 F0       	and	a, #0F0h
2679   0E09 1C          	asl	a
2680   0E0A 8F 00 03    	mov	m0+1, #0
2681   0E0D 2B 03       	rol	m0+1
2682   0E0F 1C          	asl	a
2683   0E10 2B 03       	rol	m0+1
2684   0E12 C4 02       	mov	m0, a
2685   0E14 BA C6       	movw	ya, t_pitch
2686   0E16 7A 02       	addw	ya, m0
2687   0E18 DA C6       	movw	t_pitch, ya
2688   0E1A 6F          	ret
2689   0E1B             
2690   0E1B F4 73       _jxx_y:	mov	a, ch_param+x
2691   0E1D 9F          	xcn	a
2692   0E1E 2F E7       	bra	_jxx_add
2693   0E20             
2694   0E20             ;=======================================================================
2695   0E20             Command_SetChannelVolume:
2696   0E20             ;=======================================================================
2697   0E20 D0 09       	bne	cmd_exit2			; on tick0:
2698   0E22 68 80       	cmp	a, #80h				;
2699   0E24 D0 03       	bne	_set_cv				;
2700   0E26 F5 E4 1A    	mov	a, !MODULE+MOD_CV+x		;
2701   0E29             _set_cv:
2702   0E29 D4 3B       	mov	ch_cvolume+x, a
2703   0E2B             cmd_exit2:
2704   0E2B 6F          	ret
2705   0E2C             
2706   0E2C             ;=======================================================================
2707   0E2C             Command_ChannelVolumeSlide:
2708   0E2C             ;=======================================================================
2709   0E2C F4 3B       	mov	a, ch_cvolume+x			; slide channel volume
2710   0E2E C4 02       	mov	m0, a				; 
2711   0E30 8F 40 03    	mov	m0+1, #64			;
2712   0E33 F4 73       	mov	a, ch_param+x			;
2713   0E35 3F D2 12    	call	DoVolumeSlide			;
2714   0E38 D4 3B       	mov	ch_cvolume+x, a			;
2715   0E3A 6F          	ret					;
2716   0E3B             
2717   0E3B             ;=======================================================================
2718   0E3B             ;Command_SampleOffset:
2719   0E3B             ;=======================================================================
2720   0E3B             	;bne	cmd_exit2			; on tick0:
2721   0E3B             	;mov	t_sampoff, a			;   set sampoff data
2722   0E3B             	;ret					;
2723   0E3B             
2724   0E3B             ;=======================================================================
2725   0E3B             Command_PanningSlide:
2726   0E3B             ;=======================================================================
2727   0E3B 9F          	xcn	a
2728   0E3C FA C5 02    	mov	m0, t_panning			; slide panning
2729   0E3F 8F 40 03    	mov	m0+1, #64			;
2730   0E42 3F D2 12    	call	DoVolumeSlide			;
2731   0E45 C4 C5       	mov	t_panning, a			;
2732   0E47 D4 43       	mov	ch_panning+x, a			;
2733   0E49 6F          	ret					;
2734   0E4A             
2735   0E4A             ;=======================================================================
2736   0E4A             Command_RetriggerNote:
2737   0E4A             ;=======================================================================
2738   0E4A 28 0F       	and	a, #0Fh				; m0 = y == 0 ? 1 : x
2739   0E4C D0 01       	bne	_crn_x1				;
2740   0E4E BC          	inc	a				;
2741   0E4F             _crn_x1:					;	
2742   0E4F C4 02       	mov	m0, a				;
2743   0E51 F4 4B       	mov	a, ch_cmem+x			;if cmem is 0:
2744   0E53 D0 05       	bne	_crn_cmem_n0			;  cmem = m0
2745   0E55 E4 02       	mov	a, m0				;
2746   0E57             _crn_count_ret:					;
2747   0E57 D4 4B       	mov	ch_cmem+x, a			;
2748   0E59 6F          	ret					;
2749   0E5A             						;	
2750   0E5A             _crn_cmem_n0:					;else:
2751   0E5A 9C          	dec	a				; dec cmem until 0
2752   0E5B D0 FA       	bne	_crn_count_ret			;
2753   0E5D             						;RETRIGGER NOTE:
2754   0E5D E4 02       	mov	a, m0				; cmem = m0
2755   0E5F D4 4B       	mov	ch_cmem+x, a			;
2756   0E61             	;----------------------------------------
2757   0E61             	; affect volume
2758   0E61             	;----------------------------------------
2759   0E61 F4 73       	mov	a, ch_param+x
2760   0E63 9F          	xcn	a
2761   0E64 28 0F       	and	a, #0Fh
2762   0E66 C4 04       	mov	m1, a
2763   0E68 1C          	asl	a
2764   0E69 4D          	push	x
2765   0E6A 5D          	mov	x, a
2766   0E6B E4 C4       	mov	a, t_volume
2767   0E6D 60          	clrc
2768   0E6E 1F 71 0E    	jmp	[rnvtable+x]
2769   0E71             
2770   0E71             rnvtable:
2771   0E71 AB 0E       	.word	rnv_0
2772   0E73 91 0E       	.word	rnv_1
2773   0E75 94 0E       	.word	rnv_2
2774   0E77 98 0E       	.word	rnv_3
2775   0E79 9C 0E       	.word	rnv_4
2776   0E7B A0 0E       	.word	rnv_5
2777   0E7D A4 0E       	.word	rnv_6
2778   0E7F AA 0E       	.word	rnv_7
2779   0E81 AB 0E       	.word	rnv_8
2780   0E83 AD 0E       	.word	rnv_9
2781   0E85 B0 0E       	.word	rnv_A
2782   0E87 B4 0E       	.word	rnv_B
2783   0E89 B8 0E       	.word	rnv_C
2784   0E8B BC 0E       	.word	rnv_D
2785   0E8D C0 0E       	.word	rnv_E
2786   0E8F C6 0E       	.word	rnv_F
2787   0E91             
2788   0E91 9C          rnv_1:	dec	a
2789   0E92 2F 35       	bra	_rnv_sat0
2790   0E94 A8 01       rnv_2:	sbc	a, #2-1
2791   0E96 2F 31       	bra	_rnv_sat0
2792   0E98 A8 03       rnv_3:	sbc	a, #4-1
2793   0E9A 2F 2D       	bra	_rnv_sat0
2794   0E9C A8 07       rnv_4:	sbc	a, #8-1
2795   0E9E 2F 29       	bra	_rnv_sat0
2796   0EA0 A8 0F       rnv_5:	sbc	a, #16-1
2797   0EA2 2F 25       	bra	_rnv_sat0
2798   0EA4 8D AA       rnv_6:	mov	y, #170
2799   0EA6 CF          	mul	ya
2800   0EA7 DD          	mov	a, y
2801   0EA8 2F 2B       	bra	_rnv_set
2802   0EAA 5C          rnv_7:	lsr	a
2803   0EAB             rnv_8:
2804   0EAB 2F 28       rnv_0:	bra	_rnv_set
2805   0EAD BC          rnv_9:	inc	a
2806   0EAE 2F 1F       	bra	_rnv_sat64
2807   0EB0 88 02       rnv_A:	adc	a, #2
2808   0EB2 2F 1B       	bra	_rnv_sat64
2809   0EB4 88 04       rnv_B:	adc	a, #4
2810   0EB6 2F 17       	bra	_rnv_sat64
2811   0EB8 88 08       rnv_C:	adc	a, #8
2812   0EBA 2F 13       	bra	_rnv_sat64
2813   0EBC 88 10       rnv_D:	adc	a, #16
2814   0EBE 2F 0F       	bra	_rnv_sat64
2815   0EC0 8D 03       rnv_E:	mov	y, #3
2816   0EC2 CF          	mul	ya
2817   0EC3 5C          	lsr	a
2818   0EC4 2F 09       	bra	_rnv_sat64
2819   0EC6             
2820   0EC6 1C          rnv_F:	asl	a
2821   0EC7 2F 06       	bra	_rnv_sat64
2822   0EC9             
2823   0EC9             _rnv_sat0:
2824   0EC9 10 0A       	bpl	_rnv_set
2825   0ECB E8 00       	mov	a, #0
2826   0ECD 2F 06       	bra	_rnv_set
2827   0ECF             
2828   0ECF             _rnv_sat64:
2829   0ECF 68 41       	cmp	a, #65
2830   0ED1 90 02       	bcc	_rnv_set
2831   0ED3 E8 40       	mov	a, #64
2832   0ED5             _rnv_set:
2833   0ED5 CE          	pop	x
2834   0ED6 C4 C4       	mov	t_volume, a
2835   0ED8 D4 33       	mov	ch_volume+x, a
2836   0EDA 18 80 C8    	or	t_flags, #TF_START
2837   0EDD             
2838   0EDD 6F          	ret
2839   0EDE             
2840   0EDE             ;=======================================================================
2841   0EDE             Command_Extended:
2842   0EDE             ;=======================================================================
2843   0EDE 9F          	xcn	a				; setup jump to:
2844   0EDF 28 0F       	and	a, #0Fh				; CmdExTab[x]
2845   0EE1 FD          	mov	y, a				;
2846   0EE2 F6 F8 0E    	mov	a, !CmdExTab_L+y		;
2847   0EE5 C5 F5 0E    	mov	!cmdex_jmp+1, a			;
2848   0EE8 F6 08 0F    	mov	a, !CmdExTab_H+y		;
2849   0EEB C5 F6 0E    	mov	!cmdex_jmp+2, a			;
2850   0EEE             
2851   0EEE F4 73       	mov	a, ch_param+x			; a = y
2852   0EF0 28 0F       	and	a, #0Fh				; y = tick
2853   0EF2 EB 12       	mov	y, mod_tick			; z = tick0
2854   0EF4             
2855   0EF4             cmdex_jmp:
2856   0EF4 5F 0B 0A    	jmp	0a0bh
2857   0EF7             
2858   0EF7             ;=======================================================================
2859   0EF7             SCommand_Null:
2860   0EF7             ;=======================================================================
2861   0EF7 6F          	ret
2862   0EF8             
2863   0EF8             CmdExTab_L:
2864   0EF8 1B          	.byte	LBYTE(SCommand_EPN)		; S0x 0-4 Echo; 5-8 Pitch, 9-c Noise
2865   0EF9 E5          	.byte	LBYTE(SCommand_NoiseFrXeq1)	; S1x
2866   0EFA E2          	.byte	LBYTE(SCommand_NoiseFrXeq2)	; S2x
2867   0EFB 7E          	.byte	LBYTE(SCommand_VibWav_XFilter)	; S3x 0-6 Vib. waveform / Filter
2868   0EFC 2D          	.byte	LBYTE(SCommand_TremWavX_Noise)	; S4x 0-3 Trem. waveform / Noise
2869   0EFD D6          	.byte	LBYTE(SCommand_PanWav_XNoise)	; S5x 0-3 Panb. waveform / Noise
2870   0EFE F7           	.byte	LBYTE(SCommand_Null)
2871   0EFF F6          	.byte	LBYTE(SCommand_ResetFiXlterOpt)	; S7[E|F]
2872   0F00 07          	.byte	LBYTE(SCommand_Panning)		; S8x
2873   0F01 2E          	.byte	LBYTE(SCommand_SoundCoXntrol)	; S9x
2874   0F02 F7          	.byte	LBYTE(SCommand_Null)
2875   0F03 F7          	.byte	LBYTE(SCommand_Null)
2876   0F04 67          	.byte	LBYTE(SCommand_NoteCut)		; SCx
2877   0F05 72          	.byte	LBYTE(SCommand_NoteDelXay)	; SDx
2878   0F06 F7          	.byte	LBYTE(SCommand_Null)
2879   0F07 81          	.byte	LBYTE(SCommand_Cue)		; SFx
2880   0F08             CmdExTab_H:
2881   0F08 0F          	.byte	HBYTE(SCommand_EPN)
2882   0F09 0F          	.byte	HBYTE(SCommand_NoiseFrXeq1)
2883   0F0A 0F          	.byte	HBYTE(SCommand_NoiseFrXeq2)
2884   0F0B 0F          	.byte	HBYTE(SCommand_VibWav_XFilter)
2885   0F0C 12          	.byte	HBYTE(SCommand_TremWavX_Noise)
2886   0F0D 0F          	.byte	HBYTE(SCommand_PanWav_XNoise)
2887   0F0E 0E          	.byte	HBYTE(SCommand_Null)
2888   0F0F 0F          	.byte	HBYTE(SCommand_ResetFiXlterOpt)
2889   0F10 10          	.byte	HBYTE(SCommand_Panning)
2890   0F11 10          	.byte	HBYTE(SCommand_SoundCoXntrol)
2891   0F12 0E          	.byte	HBYTE(SCommand_Null)
2892   0F13 0E          	.byte	HBYTE(SCommand_Null)
2893   0F14 10          	.byte	HBYTE(SCommand_NoteCut)
2894   0F15 10          	.byte	HBYTE(SCommand_NoteDelXay)
2895   0F16 0E          	.byte	HBYTE(SCommand_Null)
2896   0F17 10          	.byte	HBYTE(SCommand_Cue)
2897   0F18             
2898   0F18             ;-----------------------------------------------------------------------
2899   0F18             _jmp_resetdelayechofb:
2900   0F18             ;-----------------------------------------------------------------------
2901   0F18 5F 22 11    	jmp	Reset_Delay_Echo_Feedback
2902   0F1B             ;=======================================================================
2903   0F1B             SCommand_EPN:	; Echo / Pitchmod / Noise ; This part added by KFF for noise & pitch modulation
2904   0F1B             ;=======================================================================
2905   0F1B 68 0D       	cmp	a, #0dh
2906   0F1D B0 F9       	bcs	_jmp_resetdelayechofb
2907   0F1F 68 09       	cmp	a, #9			; do we need to do something with noise?
2908   0F21 90 08       	bcc	_pitch_mod
2909   0F23 8F 3D F2    	mov	SPC_DSPA, #DSP_NON
2910   0F26 60          	clrc
2911   0F27 A8 07       	sbc	a, #7
2912   0F29 2F 0F       	bra	skip_dsp_eon		; preserve DSP_NON in SPC_DSPA
2913   0F2B             ;-----------------------------------------------------------------------
2914   0F2B             _pitch_mod:
2915   0F2B             ;-----------------------------------------------------------------------
2916   0F2B 68 05       	cmp	a, #5			; do we need to do something with pitchmod?
2917   0F2D 90 08       	bcc	SCommand_Echo
2918   0F2F 8F 2D F2    	mov	SPC_DSPA, #DSP_PMON
2919   0F32 60          	clrc
2920   0F33 A8 03       	sbc	a, #3
2921   0F35 2F 03       	bra	skip_dsp_eon		; preserve DSP_PMON in SPC_DSPA
2922   0F37             ;=======================================================================
2923   0F37             SCommand_Echo:
2924   0F37             ;=======================================================================
2925   0F37 8F 4D F2    	mov	SPC_DSPA, #DSP_EON
2926   0F3A             skip_dsp_eon:
2927   0F3A 68 01       	cmp	a, #1
2928   0F3C F0 0D       	beq	_sce_enable_one
2929   0F3E 90 0A       	bcc	cmd_exit3
2930   0F40 68 03       	cmp	a, #3
2931   0F42 90 0F       	bcc	_sce_disable_one
2932   0F44 F0 17       	beq	_sce_enable_all
2933   0F46 68 04       	cmp	a, #4
2934   0F48 F0 17       	beq	_sce_disable_all
2935   0F4A             
2936   0F4A             cmd_exit3:
2937   0F4A 6F          	ret
2938   0F4B             ;-----------------------------------------------------------------------
2939   0F4B             _sce_enable_one:
2940   0F4B             ;-----------------------------------------------------------------------
2941   0F4B F5 2F 08    	mov	a, !BITS+x
2942   0F4E 04 F3       	or	a, SPC_DSPD
2943   0F50 C4 F3       	mov	SPC_DSPD, a
2944   0F52 6F          	ret
2945   0F53             ;-----------------------------------------------------------------------
2946   0F53             _sce_disable_one:
2947   0F53             ;-----------------------------------------------------------------------
2948   0F53 F5 2F 08    	mov	a, !BITS+x
2949   0F56 48 FF       	eor	a, #255
2950   0F58 24 F3       	and	a, SPC_DSPD
2951   0F5A C4 F3       	mov	SPC_DSPD, a
2952   0F5C 6F          	ret
2953   0F5D             ;-----------------------------------------------------------------------
2954   0F5D             _sce_enable_all:
2955   0F5D             ;-----------------------------------------------------------------------
2956   0F5D 8F FF F3    	mov	SPC_DSPD, #0FFh
2957   0F60 6F          	ret
2958   0F61             ;-----------------------------------------------------------------------
2959   0F61             _sce_disable_all:
2960   0F61             ;-----------------------------------------------------------------------
2961   0F61 8F 00 F3    	mov	SPC_DSPD, #0
2962   0F64 6F          	ret
2963   0F65             
2964   0F65             ;-----------------------------------------------------------------------
2965   0F65             _jmp_resetall:
2966   0F65             ;-----------------------------------------------------------------------
2967   0F65 5F B7 12    	jmp	ResetAll
2968   0F68             ;-----------------------------------------------------------------------
2969   0F68             _set_echowriteflag:
2970   0F68             ;-----------------------------------------------------------------------
2971   0F68 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
2972   0F6B 68 08       	cmp	a, #08h
2973   0F6D F0 04       	beq	_enable_echo_write
2974   0F6F             ;-----------------------------------------------------------------------
2975   0F6F             _disable_echo_write:
2976   0F6F             ;-----------------------------------------------------------------------
2977   0F6F 18 20 F3    	or	SPC_DSPD, #FLG_ECEN
2978   0F72 6F          	ret
2979   0F73             ;-----------------------------------------------------------------------
2980   0F73             _enable_echo_write:
2981   0F73             ;-----------------------------------------------------------------------
2982   0F73 38 DF F3    	and	SPC_DSPD, #~FLG_ECEN
2983   0F76 6F          	ret
2984   0F77             ;-----------------------------------------------------------------------
2985   0F77             
2986   0F77             ;=======================================================================
2987   0F77             SetWaveform:
2988   0F77             ;=======================================================================
2989   0F77 D4 AB       	mov	ch_env_vib+x, a
2990   0F79 E8 00       	mov	a, #0
2991   0F7B D4 B3       	mov	ch_vib_wav+x, a
2992   0F7D 6F          	ret
2993   0F7E             ;=======================================================================
2994   0F7E             SCommand_VibWav_Filter:				; S3x
2995   0F7E             ;=======================================================================
2996   0F7E 68 07       	cmp	a, #07h
2997   0F80 90 F5       	bcc	SetWaveform
2998   0F82 68 09       	cmp	a, #09h
2999   0F84 90 E2       	bcc	_set_echowriteflag
3000   0F86 F0 DD       	beq	_jmp_resetall
3001   0F88             
3002   0F88 68 0A       	cmp	a, #0Ah
3003   0F8A F0 14       	beq	Command_SetFilterDefault
3004   0F8C 68 0B       	cmp	a, #0Bh
3005   0F8E F0 14       	beq	Command_SetFilterBand
3006   0F90 68 0C       	cmp	a, #0Ch
3007   0F92 F0 14       	beq	Command_SetFilterHigh
3008   0F94 68 0D       	cmp	a, #0Dh
3009   0F96 F0 14       	beq	Command_SetFilterLow
3010   0F98 68 0E       	cmp	a, #0Eh
3011   0F9A F0 14       	beq	Command_SetFilterCust1
3012   0F9C 68 0F       	cmp	a, #0Fh
3013   0F9E F0 14       	beq	Command_SetFilterCust2
3014   0FA0             ;------------------------------------------------------------------------
3015   0FA0             Command_SetFilterDefault:			; 0Ah
3016   0FA0             ;------------------------------------------------------------------------
3017   0FA0 8D 07       	mov	y, #7
3018   0FA2 2F 12       	bra	_set_special_filter
3019   0FA4             ;------------------------------------------------------------------------
3020   0FA4             Command_SetFilterBand:
3021   0FA4             ;------------------------------------------------------------------------
3022   0FA4 8D 0F       	mov	y, #15
3023   0FA6 2F 0E       	bra	_set_special_filter
3024   0FA8             ;------------------------------------------------------------------------
3025   0FA8             Command_SetFilterHigh:
3026   0FA8             ;------------------------------------------------------------------------
3027   0FA8 8D 17       	mov	y, #23
3028   0FAA 2F 0A       	bra	_set_special_filter
3029   0FAC             ;------------------------------------------------------------------------
3030   0FAC             Command_SetFilterLow:
3031   0FAC             ;------------------------------------------------------------------------
3032   0FAC 8D 1F       	mov	y, #31
3033   0FAE 2F 06       	bra	_set_special_filter
3034   0FB0             ;------------------------------------------------------------------------
3035   0FB0             Command_SetFilterCust1:
3036   0FB0             ;------------------------------------------------------------------------
3037   0FB0 8D 27       	mov	y, #39
3038   0FB2 2F 02       	bra	_set_special_filter
3039   0FB4             ;------------------------------------------------------------------------
3040   0FB4             Command_SetFilterCust2:
3041   0FB4             ;------------------------------------------------------------------------
3042   0FB4 8D 2F       	mov	y, #47
3043   0FB6             
3044   0FB6             _set_special_filter:
3045   0FB6             
3046   0FB6 33 EB 03    	bbc1	special_mode, _skip_reset		; test SM_3AFRESET
3047   0FB9             
3048   0FB9 3F BD 12    	call	ResetFbFirVol
3049   0FBC             _skip_reset:
3050   0FBC 80          	setc
3051   0FBD 8F 7F F2    	mov	SPC_DSPA, #DSP_C7
3052   0FC0 4D          	push	x
3053   0FC1 CD 07       	mov	x, #7
3054   0FC3             _copy_special_coef:
3055   0FC3 F6 19 1A    	mov	a, !Filter+y
3056   0FC6 D4 D8       	mov	filter_values+x, a
3057   0FC8 03 EB 05    	bbs0	special_mode, _cscdy			; test SM_FILTERSWEEP
3058   0FCB C4 F3       	mov	SPC_DSPD, a
3059   0FCD B8 10 F2    	sbc	SPC_DSPA, #10h
3060   0FD0 DC          _cscdy:	dec	y
3061   0FD1 1D          	dec	x
3062   0FD2 10 EF       	bpl	_copy_special_coef
3063   0FD4 CE          	pop	x
3064   0FD5 6F          	ret
3065   0FD6             
3066   0FD6             ;=======================================================================
3067   0FD6             SCommand_PanWav_Noise:				; S5x
3068   0FD6             ;=======================================================================
3069   0FD6 68 04       	cmp	a, #4
3070   0FD8 90 A4       	bcc	SCommand_VibWav_Filter
3071   0FDA 18 08 EA    	or	special, #SF_NOISESWEEP
3072   0FDD 60          	clrc
3073   0FDE 88 10       	adc	a, #10h
3074   0FE0 2F 06       	bra	_noise_mov
3075   0FE2             ;=======================================================================
3076   0FE2             SCommand_NoiseFreq2:				; S2x
3077   0FE2             ;=======================================================================
3078   0FE2 60          	clrc
3079   0FE3 88 10       	adc	a, #10h
3080   0FE5             ;=======================================================================
3081   0FE5             SCommand_NoiseFreq1:				; S1x
3082   0FE5             ;=======================================================================
3083   0FE5 38 F7 EA    	and	special, #~SF_NOISESWEEP
3084   0FE8             _noise_mov:
3085   0FE8 C4 E4       	mov	noise_value, a
3086   0FEA C4 E2       	mov	noise_sweep_start, a
3087   0FEC             ;-----------------------------------------------------------------------
3088   0FEC             SCommand_NoiseFreq1b:
3089   0FEC             ;-----------------------------------------------------------------------
3090   0FEC 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
3091   0FEF 38 E0 F3    	and	SPC_DSPD, #FLG_NOISE
3092   0FF2 09 E4 F3    	or	SPC_DSPD, noise_value
3093   0FF5 6F          	ret
3094   0FF6             
3095   0FF6             ;=======================================================================
3096   0FF6             SCommand_ResetFilterOpt:			; S7x
3097   0FF6             ;=======================================================================
3098   0FF6 68 0E       	cmp	a, #0eh
3099   0FF8 F0 05       	beq	_cfs_reset_on
3100   0FFA 68 0F       	cmp	a, #0fh
3101   0FFC F0 05       	beq	_cfs_reset_off
3102   0FFE 6F          	ret
3103   0FFF             
3104   0FFF             _cfs_reset_on:
3105   0FFF 18 02 EB    	or	special_mode, #SM_3AFRESET
3106   1002 6F          	ret
3107   1003             
3108   1003             _cfs_reset_off:
3109   1003 38 FD EB    	and	special_mode, #~SM_3AFRESET
3110   1006 6F          	ret
3111   1007             
3112   1007             ;=======================================================================
3113   1007             SCommand_Panning:				; S8x
3114   1007             ;=======================================================================
3115   1007 D0 68       	bne	cmd_exit4			; on tick0:
3116   1009 C4 02       	mov	m0, a				; panning = (y << 2) + (y >> 2)
3117   100B 1C          	asl	a				;
3118   100C 1C          	asl	a				;
3119   100D 4B 02       	lsr	m0				;
3120   100F 4B 02       	lsr	m0				;
3121   1011 84 02       	adc	a, m0				;
3122   1013 C4 C5       	mov	t_panning, a			;
3123   1015 3F D4 10    	call	Command_SetPanningb		;
3124   1018 6F          	ret					;
3125   1019             
3126   1019             ;-----------------------------------------------------------------------
3127   1019             _command_setzmodechfs_r:			; S96
3128   1019             ;-----------------------------------------------------------------------
3129   1019 3F BD 12    	call	ResetFbFirVol
3130   101C             ;-----------------------------------------------------------------------
3131   101C             _command_setzmodechfs:				; S97
3132   101C             ;-----------------------------------------------------------------------
3133   101C 8F 07 E5    	mov	parameter_mode, #Z_CHFS
3134   101F 4D          	push	x
3135   1020 CD 07       	mov	x, #7
3136   1022 E8 80       	mov	a, #80h
3137   1024 D4 D8       _set80:	mov	filter_values+x, a
3138   1026 1D          	dec	x
3139   1027 10 FB       	bpl	_set80
3140   1029             
3141   1029 CE          	pop 	x
3142   102A 18 01 EB    	or	special_mode, #SM_FILTERSWEEP
3143   102D 6F          	ret
3144   102E             ;-----------------------------------------------------------------------
3145   102E             
3146   102E             ;=======================================================================
3147   102E             SCommand_SoundControl:				; S9x
3148   102E             ;=======================================================================
3149   102E D0 41       	bne	cmd_exit4
3150   1030 68 01       	cmp	a, #Z_SURROUND
3151   1032 F0 15       	beq	_command_surround
3152   1034 68 02       	cmp	a, #Z_MUTE
3153   1036 F0 1E       	beq	_command_mutechannel
3154   1038 68 03       	cmp	a, #Z_UNMUTE
3155   103A F0 21       	beq	_command_unmutechannel
3156   103C 68 06       	cmp	a, #Z_CHFS_W_RES
3157   103E F0 D9       	beq	_command_setzmodechfs_r
3158   1040 68 07       	cmp	a, #Z_CHFS
3159   1042 F0 D8       	beq	_command_setzmodechfs
3160   1044 68 08       	cmp	a, #Z_EFIR
3161   1046 B0 1C       	bcs	_command_setz
3162   1048 6F          	ret
3163   1049             
3164   1049             ;------------------------------------------------------------------------
3165   1049             _command_surround:
3166   1049             ;------------------------------------------------------------------------
3167   1049 F4 83       	mov	a, ch_flags+x
3168   104B 08 40       	or	a, #CF_SURROUND
3169   104D D4 83       	mov	ch_flags+x, a
3170   104F E8 20       	mov	a, #32
3171   1051 D4 43       	mov	ch_panning+x, a
3172   1053 C4 C5       	mov	t_panning, a
3173   1055 6F          	ret
3174   1056             ;------------------------------------------------------------------------
3175   1056             _command_mutechannel:
3176   1056             ;------------------------------------------------------------------------
3177   1056 F4 83       	mov	a, ch_flags+x
3178   1058 08 80       	or	a, #80h
3179   105A D4 83       	mov	ch_flags+x, a
3180   105C 6F          	ret
3181   105D             ;------------------------------------------------------------------------
3182   105D             _command_unmutechannel:	
3183   105D             ;------------------------------------------------------------------------
3184   105D F4 83       	mov	a, ch_flags+x
3185   105F 28 7F       	and     a, #7Fh				; mask 7 bits
3186   1061 D4 83       	mov	ch_flags+x,a
3187   1063 6F          	ret
3188   1064             ;------------------------------------------------------------------------
3189   1064             _command_setz:
3190   1064             ;------------------------------------------------------------------------
3191   1064 C4 E5       	mov	parameter_mode, a
3192   1066 6F          	ret
3193   1067             
3194   1067             ;=======================================================================
3195   1067             SCommand_NoteCut:				; SCx
3196   1067             ;=======================================================================
3197   1067 64 12       	cmp	a, mod_tick			; on tick Y:
3198   1069 D0 06       	bne	cmd_exit4			;
3199   106B E8 00       	mov	a, #0				; zero volume
3200   106D C4 C4       	mov	t_volume, a			;
3201   106F D4 33       	mov	ch_volume+x, a			;
3202   1071             cmd_exit4:					;
3203   1071 6F          	ret					;
3204   1072             
3205   1072             ;=======================================================================
3206   1072             SCommand_NoteDelay:				; SDx
3207   1072             ;=======================================================================
3208   1072 64 12       	cmp	a, mod_tick
3209   1074 F0 07       	beq	scdelay_equ
3210   1076 B0 01       	bcs	scdelay_lower
3211   1078 6F          	ret
3212   1079             ;-----------------------------------------------------------------------
3213   1079             scdelay_lower:
3214   1079             ;-----------------------------------------------------------------------
3215   1079 18 02 C8    	or	t_flags, #TF_DELAY
3216   107C 6F          	ret
3217   107D             ;-----------------------------------------------------------------------
3218   107D             scdelay_equ:
3219   107D             ;-----------------------------------------------------------------------
3220   107D 18 80 C8    	or	t_flags, #TF_START
3221   1080 6F          	ret
3222   1081             
3223   1081             ;=======================================================================
3224   1081             SCommand_Cue:					; SFx
3225   1081             ;=======================================================================
3226   1081 D0 EE       	bne	cmd_exit4			;on tick0:
3227   1083 AB CC       	inc	STATUS				; increment CUE value
3228   1085 38 EF CC    	and	STATUS, #11101111b		; in status and send to
3229   1088 FA CC F6    	mov	SPC_PORT2, STATUS		; snes
3230   108B 6F          	ret					;
3231   108C             
3232   108C             ;=======================================================================
3233   108C             Command_Tempo:					; Txy
3234   108C             ;=======================================================================
3235   108C 68 20       	cmp	a, #20h
3236   108E 90 08       	bcc	_temposlide
3237   1090 68 50       	cmp	a, #80
3238   1092 B0 1C       	bcs	_change_tempo
3239   1094 E8 50       	mov	a, #80
3240   1096 2F 18       	bra	_change_tempo
3241   1098             
3242   1098             _temposlide:
3243   1098 68 10       	cmp	a, #10h
3244   109A 90 07       	bcc	_txx_down
3245   109C 28 0F       	and	a, #0Fh
3246   109E 60          	clrc
3247   109F 84 14       	adc	a, mod_bpm
3248   10A1 2F 0D       	bra	_change_tempo
3249   10A3             
3250   10A3             _txx_down:
3251   10A3 C4 02       	mov	m0, a
3252   10A5 E4 14       	mov	a, mod_bpm
3253   10A7 80          	setc
3254   10A8 A4 02       	sbc	a, m0
3255   10AA 68 50       	cmp	a, #80
3256   10AC B0 02       	bcs	_change_tempo
3257   10AE E8 50       	mov	a, #80
3258   10B0             
3259   10B0             _change_tempo:
3260   10B0 3F 44 07    	call	Module_ChangeTempo
3261   10B3 8F 07 F1    	mov	SPC_CONTROL, #%111
3262   10B6 6F          	ret
3263   10B7             
3264   10B7             ;=======================================================================
3265   10B7             ;Command_FineVibrato:				; unimplemented
3266   10B7             ;=======================================================================
3267   10B7             ;	ret
3268   10B7             
3269   10B7             ;=======================================================================
3270   10B7             Command_SetGlobalVolume:
3271   10B7             ;=======================================================================
3272   10B7 D0 B8       	bne	cmd_exit4			; set global volume on tick0
3273   10B9 68 80       	cmp	a, #80h				;
3274   10BB 90 02       	bcc	_vxx_nsat			; saturate to 80h
3275   10BD E8 80       	mov	a, #80h				;
3276   10BF             _vxx_nsat:					;
3277   10BF C4 17       	mov	mod_gvol, a			;
3278   10C1 6F          	ret					;
3279   10C2             
3280   10C2             ;=======================================================================
3281   10C2             Command_GlobalVolumeSlide:
3282   10C2             ;=======================================================================
3283   10C2 FA 17 02    	mov	m0, mod_gvol			; slide global volume
3284   10C5 8F 80 03    	mov	m0+1, #128			; max 128
3285   10C8 3F D2 12    	call	DoVolumeSlide			;
3286   10CB C4 17       	mov	mod_gvol, a			;
3287   10CD 6F          	ret					;
3288   10CE             
3289   10CE             ;=======================================================================
3290   10CE             Command_SetPanning:
3291   10CE             ;=======================================================================
3292   10CE D0 A1       	bne	cmd_exit4			; set panning on tick0	
3293   10D0 5C          	lsr	a				;
3294   10D1 5C          	lsr	a				;
3295   10D2 C4 C5       	mov	t_panning, a			;
3296   10D4             ;=======================================================================
3297   10D4             Command_SetPanningb:
3298   10D4             ;=======================================================================
3299   10D4 D4 43       	mov	ch_panning+x, a			;
3300   10D6 F4 83       	mov	a, ch_flags+x			;
3301   10D8 28 BF       	and	a, #~CF_SURROUND		;
3302   10DA D4 83       	mov	ch_flags+x, a			;
3303   10DC 6F          	ret					;
3304   10DD             
3305   10DD             ;=======================================================================
3306   10DD             ZCommand_EchoVolume:				; S9A Zxx
3307   10DD             ;=======================================================================
3308   10DD 68 80       	cmp	a, #80h
3309   10DF F0 13       	beq	ResetEchoVolume
3310   10E1 C4 CD       	mov	current_evol, a
3311   10E3             ;-----------------------------------------------------------------------
3312   10E3             Command_EchoVolume2:
3313   10E3             ;-----------------------------------------------------------------------
3314   10E3 C4 1C       	mov	evol_l, a
3315   10E5 EC F4 1A    	mov	y, !MODULE+MOD_EVOL
3316   10E8 5E F5 1A    	cmp	y, !MODULE+MOD_EVOLR		; check for stereo
3317   10EB F0 03       	beq	_setr
3318   10ED 48 FF       	eor	a, #0ffh
3319   10EF BC          	inc	a
3320   10F0 C4 1D       _setr:	mov	evol_r, a
3321   10F2 2F 0C       	bra	UpdateEchoVolume
3322   10F4             ;=======================================================================
3323   10F4             ResetEchoVolume:
3324   10F4             ;=======================================================================
3325   10F4 E5 F4 1A    	mov	a, !MODULE+MOD_EVOL
3326   10F7 C4 1C       	mov	evol_l, a
3327   10F9 C4 CD       	mov	current_evol, a
3328   10FB E5 F5 1A    	mov	a, !MODULE+MOD_EVOLR
3329   10FE C4 1D       	mov	evol_r, a
3330   1100             ;-----------------------------------------------------------------------
3331   1100             UpdateEchoVolume:
3332   1100             ;-----------------------------------------------------------------------
3333   1100 8F 2C F2    	mov	SPC_DSPA, #DSP_EVOL
3334   1103 FA 1C F3    	mov	SPC_DSPD, evol_l
3335   1106 8F 3C F2    	mov	SPC_DSPA, #DSP_EVOLR
3336   1109 FA 1D F3    	mov	SPC_DSPD, evol_r
3337   110C 6F          	ret
3338   110D             ;=======================================================================
3339   110D             ZCommand_EchoFeedback:			; S9B Zxx
3340   110D             ;=======================================================================
3341   110D 68 80       	cmp	a, #80h
3342   110F F0 06       	beq	ResetEchoFeedback
3343   1111             
3344   1111             ;=======================================================================
3345   1111             Command_EchoFeedback2:
3346   1111             ;=======================================================================
3347   1111 8F 0D F2    	mov	SPC_DSPA, #DSP_EFB
3348   1114 C4 F3       	mov	SPC_DSPD, a
3349   1116 6F          	ret
3350   1117             
3351   1117             ;=======================================================================
3352   1117             ResetEchoFeedback:
3353   1117             ;=======================================================================
3354   1117 8F 0D F2    	mov	SPC_DSPA, #DSP_EFB		; restore default EFB
3355   111A E5 F7 1A    	mov	a, !MODULE+MOD_EFB		;
3356   111D C4 F3       	mov	SPC_DSPD, a	
3357   111F C4 D2       	mov	evol_fb, a
3358   1121 6F          	ret
3359   1122             
3360   1122             ;======================================================================= 
3361   1122             Reset_Delay_Echo_Feedback:			; S0x
3362   1122             ;=======================================================================
3363   1122 68 0F       	cmp	a, #0fh
3364   1124 F0 F1       	beq	ResetEchoFeedback
3365   1126 68 0E       	cmp	a, #0eh
3366   1128 F0 CA       	beq	ResetEchoVolume
3367   112A 68 0D       	cmp	a, #0dh
3368   112C F0 59       	beq	ResetEchoDelay
3369   112E 6F          	ret
3370   112F             
3371   112F             
3372   112F             ;-----------------------------------------------------------------------
3373   112F             ZCommand_ChFilterSweep:				; S97 Zxx
3374   112F             ;-----------------------------------------------------------------------
3375   112F 68 80       	cmp	a, #80h
3376   1131 F0 06       	beq	_disable_ch_filter_sweep
3377   1133 D4 D8       	mov	filter_values+x, a
3378   1135 18 01 EB    	or	special_mode, #SM_FILTERSWEEP
3379   1138 6F          	ret
3380   1139             
3381   1139             _disable_ch_filter_sweep:
3382   1139 38 FE EB    	and	special_mode, #~SM_FILTERSWEEP
3383   113C 6F          	ret
3384   113D             
3385   113D             ;=======================================================================
3386   113D             Command_SetParameter:
3387   113D             ;=======================================================================
3388   113D             	;cmp	parameter_mode, #Z_DIRECTGAIN	; S95
3389   113D             	;beq	Command_DirectGain
3390   113D 78 07 E5    	cmp	parameter_mode,	#Z_CHFS		; S9[6|7]
3391   1140 F0 ED       	beq	ZCommand_ChFilterSweep
3392   1142 78 08 E5    	cmp	parameter_mode, #Z_EFIR		; S98
3393   1145 F0 17       	beq	ZCommand_SetEFIR
3394   1147 78 09 E5    	cmp	parameter_mode, #Z_MVOL		; S99
3395   114A F0 46       	beq	ZCommand_MasterVolume
3396   114C 78 0A E5    	cmp	parameter_mode, #Z_EVOL		; S9A
3397   114F F0 8C       	beq	ZCommand_EchoVolume
3398   1151 78 0B E5    	cmp	parameter_mode, #Z_EFB		; S9B
3399   1154 F0 B7       	beq	ZCommand_EchoFeedback
3400   1156 78 0D E5    	cmp	parameter_mode, #Z_ETIMENOISE   ; S9D
3401   1159 F0 4E       	beq	ZCommand_EVOLSweepNoise
3402   115B 5F 78 12    	jmp	Command_SetParameter2
3403   115E             
3404   115E             ;=======================================================================
3405   115E             ;Command_DirectGain:
3406   115E             ;=======================================================================
3407   115E             	;ret
3408   115E             
3409   115E             ;=======================================================================
3410   115E             ZCommand_SetEFIR:				; S98 Zxx
3411   115E             ;=======================================================================
3412   115E 38 FE EB    	and	special_mode, #~SM_FILTERSWEEP	; disable channel filter sweep
3413   1161 68 80       	cmp	a, #80h				;
3414   1163 F0 0C       	beq	ResetEFIR			;
3415   1165 FD          	mov	y, a				;
3416   1166 F5 37 08    	mov	a, !CBITS+x			;
3417   1169 C4 F2       	mov	SPC_DSPA, a			;
3418   116B CB F3       	mov	SPC_DSPD, y			;
3419   116D 6F          	ret					;
3420   116E             ;-----------------------------------------------------------------------
3421   116E             ResetEFIR_FS:
3422   116E             ;-----------------------------------------------------------------------
3423   116E 3F CE 12    	call	ResetFilterOpts
3424   1171             ;=======================================================================
3425   1171             ResetEFIR:
3426   1171             ;=======================================================================
3427   1171 80          	setc					; copy FIR coefficients
3428   1172 8F 7F F2    	mov	SPC_DSPA, #DSP_C7		;
3429   1175 4D          	push	x				;
3430   1176 CD 07       	mov	x, #7				;
3431   1178             _copy_coef:					;
3432   1178 F5 F8 1A    	mov	a, !MODULE+MOD_EFIR+x		;
3433   117B D4 D8       	mov	filter_values+x, a		;
3434   117D C4 F3       	mov	SPC_DSPD, a			;
3435   117F B8 10 F2    	sbc	SPC_DSPA, #10h			;
3436   1182 1D          	dec	x				;
3437   1183 10 F3       	bpl	_copy_coef			;
3438   1185             
3439   1185 CE          	pop	x
3440   1186 6F          	ret
3441   1187             
3442   1187             ;-----------------------------------------------------------------------
3443   1187             ResetEchoDelay:
3444   1187             ;-----------------------------------------------------------------------
3445   1187 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; defined in the header
3446   118A E5 F6 1A    	mov	a, !MODULE+MOD_EDL
3447   118D C4 F3       	mov	SPC_DSPD, a
3448   118F 6F          	ret
3449   1190             ;-----------------------------------------------------------------------
3450   1190             
3451   1190             ;=======================================================================
3452   1190             ResetMasterVolume:
3453   1190             ;=======================================================================
3454   1190 E8 50       	mov	a, #DEFAULT_MVOL
3455   1192             ;=======================================================================
3456   1192             ZCommand_MasterVolume:				; S99 Zxx
3457   1192             ;=======================================================================
3458   1192 68 80       	cmp	a, #80h
3459   1194 F0 FA       	beq	ResetMasterVolume
3460   1196             ;=======================================================================
3461   1196             Command_MasterVolume2:
3462   1196             ;=======================================================================
3463   1196 8F 0C F2    	mov	SPC_DSPA, #DSP_MVOL
3464   1199 C4 F3       	mov	SPC_DSPD, a
3465   119B 8F 1C F2    	mov	SPC_DSPA, #DSP_MVOLR
3466   119E C4 F3       	mov	SPC_DSPD, a
3467   11A0 6F          	ret
3468   11A1             
3469   11A1             ;-----------------------------------------------------------------------
3470   11A1             _set_swingmod:
3471   11A1             ;-----------------------------------------------------------------------
3472   11A1 80          	setc
3473   11A2 A8 F0       	sbc	a, #0F0h
3474   11A4 C4 EC       	mov	swing_tempo_mod, a
3475   11A6 5F 1C 12    	jmp	EnableSwingTempo
3476   11A9             ;=======================================================================
3477   11A9             ZCommand_EVOLSweepNoise:					; S9D Zxx
3478   11A9             ;=======================================================================
3479   11A9 68 20       	cmp	a, #20h
3480   11AB 90 32       	bcc	_set_noise_start
3481   11AD 68 40       	cmp	a, #40h
3482   11AF 90 34       	bcc	_set_noise_endmin
3483   11B1 68 60       	cmp	a, #60h
3484   11B3 90 36       	bcc	_set_noise_endmax
3485   11B5 F0 3A       	beq	_disable_noise_sweep
3486   11B7 68 DA       	cmp	a, #0DAh
3487   11B9 90 3A       	bcc	_set_noise_time
3488   11BB F0 43       	beq	_set_noiseinc
3489   11BD 68 DB       	cmp	a, #0DBh
3490   11BF F0 44       	beq	_set_noisedec
3491   11C1 68 DC       	cmp	a, #0DCh
3492   11C3 F0 47       	beq	_enable_noiserepeat
3493   11C5 68 DD       	cmp	a, #0DDh
3494   11C7 F0 47       	beq	_disable_noiserepeat
3495   11C9 68 DE       	cmp	a, #0DEh
3496   11CB F0 47       	beq	_enable_noisepingpong
3497   11CD 68 DF       	cmp	a, #0DFh
3498   11CF F0 47       	beq	_disable_noisepingpong
3499   11D1 68 F0       	cmp	a, #0F0h
3500   11D3 F0 51       	beq	DisableSwingTempo
3501   11D5 68 F1       	cmp	a, #0F1h
3502   11D7 B0 C8       	bcs	_set_swingmod
3503   11D9             
3504   11D9             _set_evol_time:
3505   11D9 80          	setc
3506   11DA A8 E0       	sbc	a, #0E0h
3507   11DC C4 D5       	mov	evol_time, a
3508   11DE 6F          	ret
3509   11DF             
3510   11DF             ;-----------------------------------------------------------------------
3511   11DF             _set_noise_start:
3512   11DF             ;-----------------------------------------------------------------------
3513   11DF 18 08 EA            or      special, #SF_NOISESWEEP
3514   11E2 5F E8 0F            jmp     _noise_mov
3515   11E5             ;-----------------------------------------------------------------------
3516   11E5             _set_noise_endmin:
3517   11E5             ;-----------------------------------------------------------------------
3518   11E5 80          	setc
3519   11E6 A8 20       	sbc	a, #20h
3520   11E8 C4 E1       	mov	noise_sweep_endmin, a
3521   11EA 6F          	ret
3522   11EB             ;-----------------------------------------------------------------------
3523   11EB             _set_noise_endmax:
3524   11EB             ;-----------------------------------------------------------------------
3525   11EB 80          	setc
3526   11EC A8 40       	sbc	a, #40h
3527   11EE C4 E0       	mov	noise_sweep_endmax, a
3528   11F0 6F          	ret
3529   11F1             ;-----------------------------------------------------------------------
3530   11F1             _disable_noise_sweep:
3531   11F1             ;-----------------------------------------------------------------------
3532   11F1 38 F7 EA    	and	special, #~SF_NOISESWEEP
3533   11F4 6F          	ret
3534   11F5             ;-----------------------------------------------------------------------
3535   11F5             _set_noise_time:
3536   11F5             ;-----------------------------------------------------------------------
3537   11F5 80          	setc
3538   11F6 A8 60       	sbc	a, #60h
3539   11F8 68 38       	cmp	a, #38h
3540   11FA 90 01       	bcc	_skip_rola
3541   11FC 3C          	rol	a
3542   11FD             _skip_rola:
3543   11FD C4 E3       	mov	 noise_time, a
3544   11FF 6F          	ret
3545   1200             ;-----------------------------------------------------------------------
3546   1200             _set_noiseinc:
3547   1200             ;-----------------------------------------------------------------------
3548   1200 18 10 EA    	or	special, #SF_NOISEINC
3549   1203 2F 03       	bra	_s4xit
3550   1205             ;-----------------------------------------------------------------------
3551   1205             _set_noisedec:
3552   1205             ;-----------------------------------------------------------------------
3553   1205 38 EF EA    	and	special, #~SF_NOISEINC
3554   1208 38 DF EB    _s4xit:	and	special_mode, #~SM_NOISEMODE
3555   120B 6F          	ret
3556   120C             ;-----------------------------------------------------------------------
3557   120C             _enable_noiserepeat:
3558   120C             ;-----------------------------------------------------------------------
3559   120C 18 10 EB    	or	special_mode, #SM_NOISEREPEAT
3560   120F 6F          	ret
3561   1210             ;-----------------------------------------------------------------------
3562   1210             _disable_noiserepeat:
3563   1210             ;-----------------------------------------------------------------------
3564   1210 38 EF EB    	and	special_mode, #~SM_NOISEREPEAT
3565   1213 6F          	ret
3566   1214             ;-----------------------------------------------------------------------
3567   1214             _enable_noisepingpong:
3568   1214             ;-----------------------------------------------------------------------
3569   1214 18 20 EB    	or	special_mode, #SM_NOISEMODE
3570   1217 6F          	ret
3571   1218             ;-----------------------------------------------------------------------
3572   1218             _disable_noisepingpong:
3573   1218             ;-----------------------------------------------------------------------
3574   1218 38 DF EB    	and	special_mode, #~SM_NOISEMODE
3575   121B 6F          	ret
3576   121C             
3577   121C             ;=======================================================================
3578   121C             EnableSwingTempo:
3579   121C             ;=======================================================================
3580   121C 18 20 EA    	or	special, #SF_SWINGTEMPO
3581   121F 38 BF EA    	and	special, #~SF_SWINGODD          ; always start at 0
3582   1222 FA 15 16    	mov	mod_speed_bk, mod_speed         ; back up speed
3583   1225 6F          	ret
3584   1226             ;=======================================================================
3585   1226             DisableSwingTempo:
3586   1226             ;=======================================================================
3587   1226 38 DF EA    	and	special, #~SF_SWINGTEMPO
3588   1229 FA 16 16    	mov	mod_speed_bk, mod_speed_bk	; restore speed
3589   122C 6F          	ret
3590   122D             
3591   122D             ;=======================================================================
3592   122D             SCommand_TremWav_Noise:				; S4x
3593   122D             ;=======================================================================
3594   122D FD          	mov	y, a
3595   122E F6 3C 12    	mov	a, !S4xTab_L+y
3596   1231 C5 3A 12    	mov	!s4xjmp+1, a
3597   1234             	;mov	a, !S4xTab_H+y
3598   1234 E8 12       	mov	a, #HBYTE(EVOL_MaxMin)
3599   1236 C5 3B 12    	mov	!s4xjmp+2, a
3600   1239 5F 0B 0A    s4xjmp:	jmp	0a0bh
3601   123C             
3602   123C             S4xTab_L:
3603   123C 4C          	.byte	LBYTE(JmpSetWaveform)		; S40
3604   123D 4C          	.byte	LBYTE(JmpSetWaveform)		; S41
3605   123E 4C          	.byte	LBYTE(JmpSetWaveform)		; S42
3606   123F 4C          	.byte	LBYTE(JmpSetWaveform)		; S43
3607   1240 4F          	.byte	LBYTE(EVOL_MaxMin)		; S44
3608   1241 56          	.byte	LBYTE(EVOL_MinMax)		; S45
3609   1242 1C          	.byte	LBYTE(EnableSwingTempo)		; S46
3610   1243 26          	.byte	LBYTE(DisableSwingTempxo)	; S47
3611   1244 71          	.byte	LBYTE(_enable_wavetablxe)	; S48
3612   1245 5D          	.byte	LBYTE(_disable_wavetabxle)	; S49
3613   1246 05          	.byte	LBYTE(_set_noisedec)		; S4A
3614   1247 00          	.byte	LBYTE(_set_noiseinc)		; S4B
3615   1248 0C          	.byte	LBYTE(_enable_noiserepxeat)	; S4C
3616   1249 10          	.byte	LBYTE(_disable_noiserexpeat)	; S4D
3617   124A 14          	.byte	LBYTE(_enable_noisepinxgpong)	; S4E
3618   124B 18          	.byte	LBYTE(_disable_noisepixngpong)	; S4F
3619   124C             
3620   124C             ;S4xTab_H:
3621   124C             	;.byte	HBYTE(JmpSetWaveform)		; S40
3622   124C             	;.byte	HBYTE(JmpSetWaveform)		; S41
3623   124C             	;.byte	HBYTE(JmpSetWaveform)		; S42
3624   124C             	;.byte	HBYTE(JmpSetWaveform)		; S43
3625   124C             	;.byte	HBYTE(EVOL_MaxMin)		; S44
3626   124C             	;.byte	HBYTE(EVOL_MinMax)		; S45
3627   124C             	;.byte	HBYTE(EnableSwingTempo)		; S46
3628   124C             	;.byte	HBYTE(DisableSwingTempxo)	; S47
3629   124C             	;.byte	HBYTE(_enable_wavetablxe)	; S48
3630   124C             	;.byte	HBYTE(_disable_wavetabxle)	; S49
3631   124C             	;.byte	HBYTE(_set_noisedec)		; S4A
3632   124C             	;.byte	HBYTE(_set_noiseinc)		; S4B
3633   124C             	;.byte	HBYTE(_enable_noiserepxeat)	; S4C
3634   124C             	;.byte	HBYTE(_disable_noiserexpeat)	; S4D
3635   124C             	;.byte	HBYTE(_enable_noisepinxgpong)	; S4E
3636   124C             	;.byte	HBYTE(_disable_noisepixngpong)	; S4F
3637   124C             
3638   124C             JmpSetWaveform:
3639   124C 5F 77 0F    	jmp	SetWaveform
3640   124F             
3641   124F             ;------------------------------------------------------------------------
3642   124F             EVOL_MaxMin:
3643   124F             ;------------------------------------------------------------------------
3644   124F 18 02 EA    	or	special, #SF_EVOLINC
3645   1252 FA D4 CD    	mov	current_evol, evol_min
3646   1255 6F          	ret
3647   1256             ;------------------------------------------------------------------------
3648   1256             EVOL_MinMax:
3649   1256             ;------------------------------------------------------------------------
3650   1256 38 FD EA    	and	special, #~SF_EVOLINC
3651   1259 FA D3 CD    	mov	current_evol, evol_max
3652   125C 6F          	ret
3653   125D             ;-----------------------------------------------------------------------
3654   125D             _disable_wavetable:
3655   125D             ;-----------------------------------------------------------------------
3656   125D 38 FB EB    	and	special_mode, #~SM_WAVETABLE
3657   1260 E4 E8       	mov	a, wt_sample_low		; restore original
3658   1262 C5 00 02    	mov	!SampleDirectory, a		; sample start
3659   1265 C5 02 02    	mov	!SampleDirectory+2, a		; loop start
3660   1268 E4 E7       	mov	a, wt_sample_high
3661   126A C5 01 02    	mov	!SampleDirectory+1, a		; sample start
3662   126D C5 03 02    	mov	!SampleDirectory+3, a		; loop start
3663   1270 6F          	ret
3664   1271             ;-----------------------------------------------------------------------
3665   1271             _enable_wavetable:
3666   1271             ;-----------------------------------------------------------------------
3667   1271 8F 00 E6    	mov	wt_cur, #0
3668   1274 18 04 EB    	or	special_mode, #SM_WAVETABLE
3669   1277 6F          	ret
3670   1278             
3671   1278             ;=======================================================================
3672   1278             Command_SetParameter2:
3673   1278             ;=======================================================================
3674   1278 78 0C E5    	cmp	parameter_mode, #Z_EDL          ; S9C
3675   127B F0 18       	beq	ZCommand_EchoDelaySpecial
3676   127D 78 0E E5    	cmp	parameter_mode, #Z_MINMAX	; S9E
3677   1280 F0 06       	beq	ZCommand_SetEVOLMinMax
3678   1282 78 0F E5    	cmp	parameter_mode, #Z_FILTERTIME	; S9F
3679   1285 F0 40       	beq	ZCommand_SetFilterTime
3680   1287 6F          	ret
3681   1288             
3682   1288             ;=======================================================================
3683   1288             ZCommand_SetEVOLMinMax:				; S9E Zxx
3684   1288             ;=======================================================================
3685   1288 68 80       	cmp	a, #80h
3686   128A B0 03       	bcs	_set_evol_max
3687   128C C4 D4       	mov	evol_min, a
3688   128E 6F          	ret
3689   128F             
3690   128F             _set_evol_max:
3691   128F 80          	setc
3692   1290 A8 80       	sbc	a, #80h
3693   1292 C4 D3       	mov	evol_max, a
3694   1294 6F          	ret
3695   1295             
3696   1295             ;=======================================================================
3697   1295             ZCommand_EchoDelaySpecial:			; S9C Zxx
3698   1295             ;=======================================================================
3699   1295 65 F6 1A    	cmp	a, !MODULE+MOD_EDL
3700   1298 F0 02       	beq	SetEchoDelay
3701   129A B0 06       	bcs	_command_special		; if > what's defined in header reset
3702   129C             SetEchoDelay:
3703   129C 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; otherwise change to new value
3704   129F C4 F3       	mov	SPC_DSPD, a			;
3705   12A1 6F          	ret
3706   12A2             ;-----------------------------------------------------------------------
3707   12A2             _command_special:
3708   12A2             ;-----------------------------------------------------------------------
3709   12A2 68 10       	cmp	a, #10h
3710   12A4 F0 11       	beq	ResetAll
3711   12A6 68 50       	cmp	a, #50h
3712   12A8 90 01       	bcc	_set_wt_time
3713   12AA             	;cmp	a, #58h
3714   12AA             	;bcc	_set_wt_min
3715   12AA             	;cmp	a, #60h
3716   12AA             	;bcc	_set_wt_max
3717   12AA             
3718   12AA 6F          	ret
3719   12AB             
3720   12AB             ;_set_wt_max:
3721   12AB             	;setc
3722   12AB             	;sbc	a, #58h
3723   12AB             	;mov	wt_max, a
3724   12AB             	;ret
3725   12AB             
3726   12AB             ;_set_wt_min:
3727   12AB             	;setc
3728   12AB             	;sbc	a, #50h
3729   12AB             	;mov	wt_min, a
3730   12AB             	;ret
3731   12AB             
3732   12AB             _set_wt_time:
3733   12AB 80          	setc
3734   12AC A8 10       	sbc	a, #10h
3735   12AE 3F 49 13    	call	Amult4_M0
3736   12B1 C4 E9       	mov	wt_time, a
3737   12B3 8F 00 D1    	mov	current_wt_time, #0
3738   12B6 6F          	ret
3739   12B7             
3740   12B7             ;=======================================================================
3741   12B7             ResetAll:					; restore all to header defaults
3742   12B7             ;=======================================================================
3743   12B7 3F 87 11    	call	ResetEchoDelay
3744   12BA 3F 90 11    	call	ResetMasterVolume
3745   12BD             ResetFbFirVol:
3746   12BD 3F 17 11    	call	ResetEchoFeedback
3747   12C0 3F 71 11    	call	ResetEFIR
3748   12C3 3F F4 10    	call	ResetEchoVolume
3749   12C6             cmd_exit5:
3750   12C6 6F          	ret
3751   12C7             
3752   12C7             ;=======================================================================
3753   12C7             ZCommand_SetFilterTime:				; S9F Zxx
3754   12C7             ;=======================================================================
3755   12C7 68 00       	cmp	a, #0
3756   12C9 F0 FB       	beq	cmd_exit5
3757   12CB             
3758   12CB             _set_filter_time:
3759   12CB C4 D7       	mov	filter_time, a
3760   12CD 6F          	ret
3761   12CE             
3762   12CE             ;=======================================================================
3763   12CE             ResetFilterOpts:
3764   12CE             ;=======================================================================
3765   12CE 38 FE EB    	and	special_mode, #~SM_FILTERSWEEP
3766   12D1 6F          	ret
3767   12D2             
3768   12D2             ;-----------------------------------------------------------------------
3769   12D2             ; a = param
3770   12D2             ; y = tick
3771   12D2             ; m0 = value
3772   12D2             ; m0+1 = upper bound
3773   12D2             ;
3774   12D2             ; return: a = result
3775   12D2             ;-----------------------------------------------------------------------
3776   12D2             DoVolumeSlide:
3777   12D2             ;-----------------------------------------------------------------------
3778   12D2 C4 04       	mov	m1, a			; test param for slide behavior
3779   12D4             					;-------------------------------
3780   12D4 28 0F       	and	a, #0Fh			; Dx0 : slide up
3781   12D6 F0 4D       	beq	_dvs_up			;-------------------------------
3782   12D8 E4 04       	mov	a, m1			; D0y : slide down
3783   12DA 28 F0       	and	a, #0F0h		;
3784   12DC F0 34       	beq	_dvs_down		;-------------------------------
3785   12DE E4 04       	mov	a, m1			; DxF : slide up fine
3786   12E0 28 0F       	and	a, #0Fh			;
3787   12E2 68 0F       	cmp	a, #0Fh			;
3788   12E4 F0 19       	beq	_dvs_fineup		;-------------------------------
3789   12E6 E4 04       	mov	a, m1			; DFy : slide down fine
3790   12E8 68 F0       	cmp	a, #0F0h		;
3791   12EA B0 03       	bcs	_dvs_finedown		;
3792   12EC             _dvs_quit:				;-------------------------------
3793   12EC E4 02       	mov	a, m0			; (invalid)
3794   12EE             _dvs_exit:				;
3795   12EE 6F          	ret				;
3796   12EF             ;-----------------------------------------------------------------------
3797   12EF             _dvs_finedown:				; DFy
3798   12EF             ;-----------------------------------------------------------------------
3799   12EF AD 00       	cmp	y, #0			;on tick0:
3800   12F1 D0 F9       	bne	_dvs_quit		;
3801   12F3 E4 02       	mov	a, m0			; a = volume - y
3802   12F5 38 0F 04    	and	m1, #0Fh		;
3803   12F8 A4 04       	sbc	a, m1			;
3804   12FA B0 F2       	bcs	_dvs_exit		; saturate lower bound to 0
3805   12FC E8 00       	mov	a, #0			;
3806   12FE 6F          	ret				;
3807   12FF             ;-----------------------------------------------------------------------
3808   12FF             _dvs_fineup:				; DxF
3809   12FF             ;-----------------------------------------------------------------------
3810   12FF AD 00       	cmp	y, #0			;on tick0:
3811   1301 D0 E9       	bne	_dvs_quit		;
3812   1303 E4 04       	mov	a, m1			; a = x + volume
3813   1305 9F          	xcn	a			;
3814   1306 28 0F       	and	a, #0Fh			;
3815   1308 60          	clrc				;
3816   1309 84 02       	adc	a, m0			;
3817   130B 64 03       	cmp	a, m0+1			; saturate upper to [m0.h]
3818   130D 90 DF       	bcc	_dvs_exit		;
3819   130F E4 03       	mov	a, m0+1			;
3820   1311 6F          	ret				;
3821   1312             ;-----------------------------------------------------------------------
3822   1312             _dvs_down:				; D0y
3823   1312             ;-----------------------------------------------------------------------
3824   1312 78 0F 04    	cmp	m1,#0Fh			;on tick0 OR y == 15
3825   1315 F0 04       	beq	_dvsd_15		;
3826   1317 AD 00       	cmp	y, #0			;
3827   1319 F0 D1       	beq	_dvs_quit		;
3828   131B             _dvsd_15:				;
3829   131B E4 02       	mov	a, m0			; a = volume - param
3830   131D 80          	setc				;
3831   131E A4 04       	sbc	a, m1			;
3832   1320 B0 CC       	bcs	_dvs_exit		; saturate lower to 0
3833   1322 E8 00       	mov	a, #0			;
3834   1324 6F          	ret				;
3835   1325             ;-----------------------------------------------------------------------
3836   1325             _dvs_up:				;
3837   1325             ;-----------------------------------------------------------------------
3838   1325 78 F0 04    	cmp	m1, #0F0h		;on tick0 OR x == 15
3839   1328 F0 04       	beq	_dvsu_15		;
3840   132A AD 00       	cmp	y, #0			;
3841   132C F0 BE       	beq	_dvs_quit		;
3842   132E             _dvsu_15:				;
3843   132E E4 04       	mov	a, m1			; a = x + volume
3844   1330 9F          	xcn	a			;
3845   1331 28 0F       	and	a, #0Fh			;
3846   1333 60          	clrc				;
3847   1334 84 02       	adc	a, m0			;
3848   1336 64 03       	cmp	a, m0+1			; saturate upper to [m0.h]
3849   1338 90 B4       	bcc	_dvs_exit		;
3850   133A E4 03       	mov	a, m0+1			;
3851   133C 6F          	ret				;
3852   133D             ;-----------------------------------------------------------------------
3853   133D             
3854   133D             ;=======================================================================
3855   133D             ; a = param
3856   133D             ; y = tick
3857   133D             ; return m0:word = slide amount
3858   133D             ;=======================================================================
3859   133D             PitchSlide_Load:
3860   133D             ;=======================================================================
3861   133D 68 F0       	cmp	a, #0F0h			; Fx: fine slide
3862   133F B0 14       	bcs	_psl_fine			;
3863   1341 68 E0       	cmp	a, #0E0h			; Ex: extra fine slide
3864   1343 B0 1E       	bcs	_psl_exfine			;
3865   1345             ;-----------------------------------------------------------------------
3866   1345             _psl_normal:
3867   1345             ;-----------------------------------------------------------------------
3868   1345 AD 00       	cmp	y, #0				; no slide on tick0
3869   1347 F0 26       	beq	_psl_zero			;
3870   1349             ;=======================================================================
3871   1349             Amult4_M0:
3872   1349             ;=======================================================================
3873   1349 8F 00 03    	mov	m0+1, #0			; m0 = a*4
3874   134C 1C          	asl	a				;	
3875   134D 2B 03       	rol	m0+1				;
3876   134F 1C          	asl	a				;
3877   1350 2B 03       	rol	m0+1				;
3878   1352 C4 02       	mov	m0, a				;
3879   1354 6F          	ret					;
3880   1355             ;-----------------------------------------------------------------------
3881   1355             _psl_fine:
3882   1355             ;-----------------------------------------------------------------------
3883   1355 AD 00       	cmp	y, #0				; no slide on not tick0
3884   1357 D0 16       	bne	_psl_zero			;
3885   1359 8F 00 03    	mov	m0+1, #0			; m0 = y*4
3886   135C 28 0F       	and	a, #0Fh				;	
3887   135E 1C          	asl	a				;
3888   135F 1C          	asl	a				;
3889   1360 C4 02       	mov	m0, a				;
3890   1362 6F          	ret					;
3891   1363             ;-----------------------------------------------------------------------
3892   1363             _psl_exfine:
3893   1363             ;-----------------------------------------------------------------------
3894   1363 AD 00       	cmp	y, #0				; no slide on not tick0
3895   1365 D0 08       	bne	_psl_zero			;
3896   1367 8F 00 03    	mov	m0+1, #0			; m0 = y
3897   136A 28 0F       	and	a, #0Fh				;	
3898   136C C4 02       	mov	m0, a				;
3899   136E 6F          	ret					;
3900   136F             ;-----------------------------------------------------------------------
3901   136F             _psl_zero:
3902   136F             ;-----------------------------------------------------------------------
3903   136F 8F 00 02    	mov	m0, #0
3904   1372 8F 00 03    	mov	m0+1, #0
3905   1375 6F          	ret
3906   1376             
3907   1376             ;***********************************************************************
3908   1376             
3909   1376             LUT_DIV3:
3910   1376 000000010101	.byte 0, 0, 0, 1, 1, 1, 2, 2, 2
3910   137C 020202
3911   137F 030303040404	.byte 3, 3, 3, 4, 4, 4, 5, 5, 5
3911   1385 050505
3912   1388 060606070707	.byte 6, 6, 6, 7, 7, 7, 8, 8, 8
3912   138E 080808
3913   1391 0909090A0A  	.byte 9, 9, 9,10,10
3914   1396             
3915   1396             __BRK_ROUTINE__:
3916   1396 0B F4       	asl	SPC_PORT0
3917   1398             	;bcs	_brk_pass
3918   1398             	;ret
3919   1398             ;_brk_pass:
3920   1398             	;jmp	somewhere
3921   1398 6F          	ret
3922   1399             	
3923   1399             LUT_FTAB:
3924   1399 74217B218321        .word 02174h, 0217Bh, 02183h, 0218Bh, 02193h, 0219Ah, 021A2h, 021AAh, 021B2h, 021BAh, 021C1h, 021C9h, 021D1h, 021D9h, 021E1h, 021E8h
3924   139F 8B2193219A21A221AA21B221BA21C121C921D121D921E121E821
3925   13B9 F021F8210022        .word 021F0h, 021F8h, 02200h, 02208h, 02210h, 02218h, 0221Fh, 02227h, 0222Fh, 02237h, 0223Fh, 02247h, 0224Fh, 02257h, 0225Fh, 02267h
3925   13BF 0822102218221F2227222F2237223F2247224F2257225F226722
3926   13D9 6F2277227F22        .word 0226Fh, 02277h, 0227Fh, 02287h, 0228Fh, 02297h, 0229Fh, 022A7h, 022AFh, 022B7h, 022BFh, 022C7h, 022CFh, 022D7h, 022DFh, 022E7h
3926   13DF 87228F2297229F22A722AF22B722BF22C722CF22D722DF22E722
3927   13F9 EF22F722FF22        .word 022EFh, 022F7h, 022FFh, 02307h, 0230Fh, 02317h, 0231Fh, 02328h, 02330h, 02338h, 02340h, 02348h, 02350h, 02358h, 02361h, 02369h
3927   13FF 07230F2317231F23282330233823402348235023582361236923
3928   1419 712379238123        .word 02371h, 02379h, 02381h, 0238Ah, 02392h, 0239Ah, 023A2h, 023AAh, 023B3h, 023BBh, 023C3h, 023CBh, 023D4h, 023DCh, 023E4h, 023EDh
3928   141F 8A2392239A23A223AA23B323BB23C323CB23D423DC23E423ED23
3929   1439 F523FD230624        .word 023F5h, 023FDh, 02406h, 0240Eh, 02416h, 0241Fh, 02427h, 0242Fh, 02438h, 02440h, 02448h, 02451h, 02459h, 02462h, 0246Ah, 02472h
3929   143F 0E2416241F2427242F243824402448245124592462246A247224
3930   1459 7B2483248C24        .word 0247Bh, 02483h, 0248Ch, 02494h, 0249Dh, 024A5h, 024AEh, 024B6h, 024BEh, 024C7h, 024CFh, 024D8h, 024E0h, 024E9h, 024F2h, 024FAh
3930   145F 94249D24A524AE24B624BE24C724CF24D824E024E924F224FA24
3931   1479 03250B251425        .word 02503h, 0250Bh, 02514h, 0251Ch, 02525h, 0252Dh, 02536h, 0253Fh, 02547h, 02550h, 02559h, 02561h, 0256Ah, 02572h, 0257Bh, 02584h
3931   147F 1C2525252D2536253F2547255025592561256A2572257B258425
3932   1499 8C2595259E25        .word 0258Ch, 02595h, 0259Eh, 025A7h, 025AFh, 025B8h, 025C1h, 025C9h, 025D2h, 025DBh, 025E4h, 025ECh, 025F5h, 025FEh, 02607h, 0260Fh
3932   149F A725AF25B825C125C925D225DB25E425EC25F525FE2507260F26
3933   14B9 182621262A26        .word 02618h, 02621h, 0262Ah, 02633h, 0263Ch, 02644h, 0264Dh, 02656h, 0265Fh, 02668h, 02671h, 0267Ah, 02682h, 0268Bh, 02694h, 0269Dh
3933   14BF 33263C2644264D2656265F26682671267A2682268B2694269D26
3934   14D9 A626AF26B826        .word 026A6h, 026AFh, 026B8h, 026C1h, 026CAh, 026D3h, 026DCh, 026E5h, 026EEh, 026F7h, 02700h, 02709h, 02712h, 0271Bh, 02724h, 0272Dh
3934   14DF C126CA26D326DC26E526EE26F7260027092712271B2724272D27
3935   14F9 36273F274827        .word 02736h, 0273Fh, 02748h, 02751h, 0275Ah, 02763h, 0276Dh, 02776h, 0277Fh, 02788h, 02791h, 0279Ah, 027A3h, 027ACh, 027B6h, 027BFh
3935   14FF 51275A2763276D2776277F27882791279A27A327AC27B627BF27
3936   1519 C827D127DA27        .word 027C8h, 027D1h, 027DAh, 027E4h, 027EDh, 027F6h, 027FFh, 02809h, 02812h, 0281Bh, 02824h, 0282Eh, 02837h, 02840h, 0284Ah, 02853h
3936   151F E427ED27F627FF27092812281B2824282E28372840284A285328
3937   1539 5C2865286F28        .word 0285Ch, 02865h, 0286Fh, 02878h, 02882h, 0288Bh, 02894h, 0289Eh, 028A7h, 028B0h, 028BAh, 028C3h, 028CDh, 028D6h, 028E0h, 028E9h
3937   153F 782882288B2894289E28A728B028BA28C328CD28D628E028E928
3938   1559 F228FC280529        .word 028F2h, 028FCh, 02905h, 0290Fh, 02918h, 02922h, 0292Bh, 02935h, 0293Eh, 02948h, 02951h, 0295Bh, 02965h, 0296Eh, 02978h, 02981h
3938   155F 0F29182922292B2935293E29482951295B2965296E2978298129
3939   1579 8B2995299E29        .word 0298Bh, 02995h, 0299Eh, 029A8h, 029B1h, 029BBh, 029C5h, 029CEh, 029D8h, 029E2h, 029EBh, 029F5h, 029FFh, 02A08h, 02A12h, 02A1Ch
3939   157F A829B129BB29C529CE29D829E229EB29F529FF29082A122A1C2A
3940   1599 262A2F2A392A        .word 02A26h, 02A2Fh, 02A39h, 02A43h, 02A4Dh, 02A56h, 02A60h, 02A6Ah, 02A74h, 02A7Eh, 02A87h, 02A91h, 02A9Bh, 02AA5h, 02AAFh, 02AB9h
3940   159F 432A4D2A562A602A6A2A742A7E2A872A912A9B2AA52AAF2AB92A
3941   15B9 C32ACC2AD62A        .word 02AC3h, 02ACCh, 02AD6h, 02AE0h, 02AEAh, 02AF4h, 02AFEh, 02B08h, 02B12h, 02B1Ch, 02B26h, 02B30h, 02B3Ah, 02B44h, 02B4Eh, 02B58h
3941   15BF E02AEA2AF42AFE2A082B122B1C2B262B302B3A2B442B4E2B582B
3942   15D9 622B6C2B762B        .word 02B62h, 02B6Ch, 02B76h, 02B80h, 02B8Ah, 02B94h, 02B9Eh, 02BA8h, 02BB2h, 02BBCh, 02BC6h, 02BD1h, 02BDBh, 02BE5h, 02BEFh, 02BF9h
3942   15DF 802B8A2B942B9E2BA82BB22BBC2BC62BD12BDB2BE52BEF2BF92B
3943   15F9 032C0D2C182C        .word 02C03h, 02C0Dh, 02C18h, 02C22h, 02C2Ch, 02C36h, 02C40h, 02C4Bh, 02C55h, 02C5Fh, 02C69h, 02C74h, 02C7Eh, 02C88h, 02C93h, 02C9Dh
3943   15FF 222C2C2C362C402C4B2C552C5F2C692C742C7E2C882C932C9D2C
3944   1619 A72CB22CBC2C        .word 02CA7h, 02CB2h, 02CBCh, 02CC6h, 02CD1h, 02CDBh, 02CE5h, 02CF0h, 02CFAh, 02D04h, 02D0Fh, 02D19h, 02D24h, 02D2Eh, 02D39h, 02D43h
3944   161F C62CD12CDB2CE52CF02CFA2C042D0F2D192D242D2E2D392D432D
3945   1639 4D2D582D622D        .word 02D4Dh, 02D58h, 02D62h, 02D6Dh, 02D77h, 02D82h, 02D8Ch, 02D97h, 02DA1h, 02DACh, 02DB7h, 02DC1h, 02DCCh, 02DD6h, 02DE1h, 02DECh
3945   163F 6D2D772D822D8C2D972DA12DAC2DB72DC12DCC2DD62DE12DEC2D
3946   1659 F62D012E0B2E        .word 02DF6h, 02E01h, 02E0Bh, 02E16h, 02E21h, 02E2Bh, 02E36h, 02E41h, 02E4Bh, 02E56h, 02E61h, 02E6Ch, 02E76h, 02E81h, 02E8Ch, 02E97h
3946   165F 162E212E2B2E362E412E4B2E562E612E6C2E762E812E8C2E972E
3947   1679 A12EAC2EB72E        .word 02EA1h, 02EACh, 02EB7h, 02EC2h, 02ECCh, 02ED7h, 02EE2h, 02EEDh, 02EF8h, 02F03h, 02F0Eh, 02F18h, 02F23h, 02F2Eh, 02F39h, 02F44h
3947   167F C22ECC2ED72EE22EED2EF82E032F0E2F182F232F2E2F392F442F
3948   1699 4F2F5A2F652F        .word 02F4Fh, 02F5Ah, 02F65h, 02F70h, 02F7Bh, 02F86h, 02F91h, 02F9Ch, 02FA7h, 02FB2h, 02FBDh, 02FC8h, 02FD3h, 02FDEh, 02FE9h, 02FF4h
3948   169F 702F7B2F862F912F9C2FA72FB22FBD2FC82FD32FDE2FE92FF42F
3949   16B9 FF2F0A301530        .word 02FFFh, 0300Ah, 03015h, 03020h, 0302Ch, 03037h, 03042h, 0304Dh, 03058h, 03063h, 0306Eh, 0307Ah, 03085h, 03090h, 0309Bh, 030A7h
3949   16BF 20302C30373042304D30583063306E307A30853090309B30A730
3950   16D9 B230BD30C830        .word 030B2h, 030BDh, 030C8h, 030D4h, 030DFh, 030EAh, 030F5h, 03101h, 0310Ch, 03117h, 03123h, 0312Eh, 0313Ah, 03145h, 03150h, 0315Ch
3950   16DF D430DF30EA30F53001310C31173123312E313A31453150315C31
3951   16F9 673173317E31        .word 03167h, 03173h, 0317Eh, 03189h, 03195h, 031A0h, 031ACh, 031B7h, 031C3h, 031CEh, 031DAh, 031E5h, 031F1h, 031FCh, 03208h, 03213h
3951   16FF 89319531A031AC31B731C331CE31DA31E531F131FC3108321332
3952   1719 1F322B323632        .word 0321Fh, 0322Bh, 03236h, 03242h, 0324Dh, 03259h, 03265h, 03270h, 0327Ch, 03288h, 03293h, 0329Fh, 032ABh, 032B7h, 032C2h, 032CEh
3952   171F 42324D325932653270327C32883293329F32AB32B732C232CE32
3953   1739 DA32E532F132        .word 032DAh, 032E5h, 032F1h, 032FDh, 03309h, 03315h, 03320h, 0332Ch, 03338h, 03344h, 03350h, 0335Ch, 03367h, 03373h, 0337Fh, 0338Bh
3953   173F FD320933153320332C333833443350335C33673373337F338B33
3954   1759 9733A333AF33        .word 03397h, 033A3h, 033AFh, 033BBh, 033C7h, 033D3h, 033DFh, 033EBh, 033F7h, 03403h, 0340Fh, 0341Bh, 03427h, 03433h, 0343Fh, 0344Bh
3954   175F BB33C733D333DF33EB33F73303340F341B34273433343F344B34
3955   1779 573463346F34        .word 03457h, 03463h, 0346Fh, 0347Bh, 03488h, 03494h, 034A0h, 034ACh, 034B8h, 034C4h, 034D1h, 034DDh, 034E9h, 034F5h, 03502h, 0350Eh
3955   177F 7B3488349434A034AC34B834C434D134DD34E934F53402350E35
3956   1799 1A3526353335        .word 0351Ah, 03526h, 03533h, 0353Fh, 0354Bh, 03558h, 03564h, 03570h, 0357Dh, 03589h, 03595h, 035A2h, 035AEh, 035BAh, 035C7h, 035D3h
3956   179F 3F354B355835643570357D3589359535A235AE35BA35C735D335
3957   17B9 E035EC35F935        .word 035E0h, 035ECh, 035F9h, 03605h, 03612h, 0361Eh, 0362Bh, 03637h, 03644h, 03650h, 0365Dh, 03669h, 03676h, 03683h, 0368Fh, 0369Ch
3957   17BF 053612361E362B363736443650365D366936763683368F369C36
3958   17D9 A836B536C236        .word 036A8h, 036B5h, 036C2h, 036CEh, 036DBh, 036E8h, 036F4h, 03701h, 0370Eh, 0371Bh, 03727h, 03734h, 03741h, 0374Eh, 0375Ah, 03767h
3958   17DF CE36DB36E836F43601370E371B372737343741374E375A376737
3959   17F9 743781378E37        .word 03774h, 03781h, 0378Eh, 0379Ah, 037A7h, 037B4h, 037C1h, 037CEh, 037DBh, 037E8h, 037F5h, 03802h, 0380Eh, 0381Bh, 03828h, 03835h
3959   17FF 9A37A737B437C137CE37DB37E837F53702380E381B3828383538
3960   1819 42384F385C38        .word 03842h, 0384Fh, 0385Ch, 03869h, 03876h, 03884h, 03891h, 0389Eh, 038ABh, 038B8h, 038C5h, 038D2h, 038DFh, 038ECh, 038FAh, 03907h
3960   181F 69387638843891389E38AB38B838C538D238DF38EC38FA380739
3961   1839 143921392E39        .word 03914h, 03921h, 0392Eh, 0393Bh, 03949h, 03956h, 03963h, 03970h, 0397Eh, 0398Bh, 03998h, 039A6h, 039B3h, 039C0h, 039CEh, 039DBh
3961   183F 3B3949395639633970397E398B399839A639B339C039CE39DB39
3962   1859 E839F639033A        .word 039E8h, 039F6h, 03A03h, 03A11h, 03A1Eh, 03A2Bh, 03A39h, 03A46h, 03A54h, 03A61h, 03A6Fh, 03A7Ch, 03A8Ah, 03A97h, 03AA5h, 03AB2h
3962   185F 113A1E3A2B3A393A463A543A613A6F3A7C3A8A3A973AA53AB23A
3963   1879 C03ACE3ADB3A        .word 03AC0h, 03ACEh, 03ADBh, 03AE9h, 03AF6h, 03B04h, 03B12h, 03B1Fh, 03B2Dh, 03B3Bh, 03B48h, 03B56h, 03B64h, 03B72h, 03B7Fh, 03B8Dh
3963   187F E93AF63A043B123B1F3B2D3B3B3B483B563B643B723B7F3B8D3B
3964   1899 9B3BA93BB63B        .word 03B9Bh, 03BA9h, 03BB6h, 03BC4h, 03BD2h, 03BE0h, 03BEEh, 03BFCh, 03C09h, 03C17h, 03C25h, 03C33h, 03C41h, 03C4Fh, 03C5Dh, 03C6Bh
3964   189F C43BD23BE03BEE3BFC3B093C173C253C333C413C4F3C5D3C6B3C
3965   18B9 793C873C953C        .word 03C79h, 03C87h, 03C95h, 03CA3h, 03CB1h, 03CBFh, 03CCDh, 03CDBh, 03CE9h, 03CF7h, 03D05h, 03D13h, 03D21h, 03D2Fh, 03D3Eh, 03D4Ch
3965   18BF A33CB13CBF3CCD3CDB3CE93CF73C053D133D213D2F3D3E3D4C3D
3966   18D9 5A3D683D763D        .word 03D5Ah, 03D68h, 03D76h, 03D85h, 03D93h, 03DA1h, 03DAFh, 03DBDh, 03DCCh, 03DDAh, 03DE8h, 03DF7h, 03E05h, 03E13h, 03E22h, 03E30h
3966   18DF 853D933DA13DAF3DBD3DCC3DDA3DE83DF73D053E133E223E303E
3967   18F9 3E3E4D3E5B3E        .word 03E3Eh, 03E4Dh, 03E5Bh, 03E6Ah, 03E78h, 03E86h, 03E95h, 03EA3h, 03EB2h, 03EC0h, 03ECFh, 03EDDh, 03EECh, 03EFAh, 03F09h, 03F18h
3967   18FF 6A3E783E863E953EA33EB23EC03ECF3EDD3EEC3EFA3E093F183F
3968   1919 263F353F433F        .word 03F26h, 03F35h, 03F43h, 03F52h, 03F61h, 03F6Fh, 03F7Eh, 03F8Dh, 03F9Bh, 03FAAh, 03FB9h, 03FC7h, 03FD6h, 03FE5h, 03FF4h, 04002h
3968   191F 523F613F6F3F7E3F8D3F9B3FAA3FB93FC73FD63FE53FF43F0240
3969   1939 114020402F40        .word 04011h, 04020h, 0402Fh, 0403Eh, 0404Dh, 0405Bh, 0406Ah, 04079h, 04088h, 04097h, 040A6h, 040B5h, 040C4h, 040D3h, 040E2h, 040F1h
3969   193F 3E404D405B406A40794088409740A640B540C440D340E240F140
3970   1959 00410F411E41        .word 04100h, 0410Fh, 0411Eh, 0412Dh, 0413Ch, 0414Bh, 0415Ah, 04169h, 04178h, 04188h, 04197h, 041A6h, 041B5h, 041C4h, 041D3h, 041E3h
3970   195F 2D413C414B415A416941784188419741A641B541C441D341E341
3971   1979 F24101421042        .word 041F2h, 04201h, 04210h, 04220h, 0422Fh, 0423Eh, 0424Eh, 0425Dh, 0426Ch, 0427Ch, 0428Bh, 0429Ah, 042AAh, 042B9h, 042C9h, 042D8h
3971   197F 20422F423E424E425D426C427C428B429A42AA42B942C942D842
3972   1999             
3973   1999             IT_FineSineData:
3974   1999 000203050608	.byte   0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23
3974   199F 090B0C0E101113141617
3975   19A9 181A1B1D1E20	.byte  24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44
3975   19AF 212224252627292A2B2C
3976   19B9 2D2E2F303132	.byte  45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59
3976   19BF 33343536373838393A3B
3977   19C9 3B3C3C3D3D3E	.byte  59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64
3977   19CF 3E3E3F3F3F4040404040
3978   19D9 404040404040	.byte  64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60
3978   19DF 3F3F3F3E3E3E3D3D3C3C
3979   19E9 3B3B3A393838	.byte  59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46
3979   19EF 37363534333231302F2E
3980   19F9 2D2C2B2A2927	.byte  45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26
3980   19FF 2625242221201E1D1B1A
3981   1A09 181716141311	.byte  24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2
3981   1A0F 100E0C0B090806050302
3982   1A19             
3983   1A19 7F0000000000Filter:	.byte	$7f,$00,$00,$00,$00,$00,$00,$00 ; default
3983   1A1F 0000
3984   1A21 343300D9E501	.byte	$34,$33,$00,$d9,$e5,$01,$fc,$eb ; bandpass
3984   1A27 FCEB
3985   1A29 58BFDBF0FE07	.byte	$58,$bf,$db,$f0,$fe,$07,$0c,$0c ; highpass
3985   1A2F 0C0C
3986   1A31 0A17232912FE	.byte	$0a,$17,$23,$29,$12,$fe,$f3,$f9 ; lowpass
3986   1A37 F3F9
3987   1A39 F808111C1C11	.byte	$f8,$08,$11,$1c,$1c,$11,$08,$f8 ; ren & stimpy
3987   1A3F 08F8
3988   1A41 0D22222411F0	.byte	$0d,$22,$22,$24,$11,$f0,$03,$ff ; star ocean/tales of phantasia
3988   1A47 03FF
3989   1A49             
3990   1A49             ;-----------------------------------------------------------------------------
3991   1A49             ; C64 waveform: $41	          When S48 is used the first sample is
3992   1A49             ;  pulse width: $81-$88           replaced by the following samples
3993   1A49             ;-----------------------------------------------------------------------------
3994   1A49             
3995   1A49             ;-----------------------------------------------------------------------------
3996   1A49             ; C64 waveform: $41	[16744 Hz]
3997   1A49             ;  pulse width: $81-$88
3998   1A49             ;-----------------------------------------------------------------------------
3999   1A49             WTLoop1:
4000   1A49 B00881111111	.byte	$b0,$08,$81,$11,$11,$11,$11,$11,$11
4000   1A4F 111111
4001   1A52 671F5E5F4F31	.byte	$67,$1f,$5e,$5f,$4f,$31,$23,$e7,$a7
4001   1A58 23E7A7
4002   1A5B             
4003   1A5B             WTLoop2:
4004   1A5B C00BBAD11111	.byte	$c0,$0b,$ba,$d1,$11,$11,$11,$11,$11
4004   1A61 111111
4005   1A64 A33333333333	.byte	$a3,$33,$33,$33,$33,$33,$42,$42,$5b
4005   1A6A 42425B
4006   1A6D             
4007   1A6D             WTLoop3:
4008   1A6D C00BBBBBC111	.byte	$c0,$0b,$bb,$bb,$c1,$11,$11,$11,$11
4008   1A73 111111
4009   1A76 A35554545454	.byte	$a3,$55,$54,$54,$54,$54,$54,$53,$6b
4009   1A7C 54536B
4010   1A7F             
4011   1A7F             WTLoop4:
4012   1A7F C00BCBCBCBF2	.byte	$c0,$0b,$cb,$cb,$cb,$f2,$12,$12,$12
4012   1A85 121212
4013   1A88 B33333333333	.byte	$b3,$33,$33,$33,$33,$33,$33,$32,$4d
4013   1A8E 33324D
4014   1A91             
4015   1A91             WTLoop5:
4016   1A91 B0089999999A	.byte	$b0,$08,$99,$99,$99,$9a,$46,$56,$56
4016   1A97 465656
4017   1A9A B35555555555	.byte	$b3,$55,$55,$55,$55,$55,$55,$54,$6d
4017   1AA0 55546D
4018   1AA3             
4019   1AA3             WTLoop6:
4020   1AA3 B00898999999	.byte	$b0,$08,$98,$99,$99,$99,$98,$06,$45
4020   1AA9 980645
4021   1AAC B701F1010000	.byte	$b7,$01,$f1,$01,$00,$00,$10,$1f,$28
4021   1AB2 101F28
4022   1AB5             
4023   1AB5             WTLoop7:
4024   1AB5 B008A999999A	.byte	$b0,$08,$a9,$99,$99,$9a,$9a,$a9,$27
4024   1ABB 9AA927
4025   1ABE B35656565555	.byte	$b3,$56,$56,$56,$55,$55,$55,$55,$6d
4025   1AC4 55556D
4026   1AC7             
4027   1AC7             WTLoop8:
4028   1AC7 B009AAAAAAAA	.byte	$b0,$09,$aa,$aa,$aa,$aa,$aa,$ab,$ab
4028   1ACD AAABAB
4029   1AD0 B35767676666	.byte	$b3,$57,$67,$67,$66,$66,$66,$66,$6d
4029   1AD6 66666D
4030   1AD9             ;--------------------------------------------------------
4031   1AD9             
4032   1AD9             ;--------------------------------------------------------
4033   1AD9             WaveTable_L:
4034   1AD9 49 5B       	.byte	LBYTE(WTLoop1), LBYTE(WTLoop2)
4035   1ADB 6D 7F       	.byte	LBYTE(WTLoop3), LBYTE(WTLoop4)
4036   1ADD 91 A3       	.byte	LBYTE(WTLoop5), LBYTE(WTLoop6)
4037   1ADF B5 C7       	.byte	LBYTE(WTLoop7), LBYTE(WTLoop8)
4038   1AE1             ;--------------------------------------------------------
4039   1AE1             
4040   1AE1             ;--------------------------------------------------------
4041   1AE1             MODULE .END
4042   1AE1             ;--------------------------------------------------------
4043   1AE1             
4044   1AE1             
4045   1AE1             ;--------------------------------------------------------
4046   1AE1             ;FFC0 - FFFF    Memory (read / write)
4047   1AE1             ;FFC0 - FFFF    Memory (write only)*
4048   1AE1             ;FFC0 - FFFF    64 byte IPL ROM (read only)*
4049   1AE1             ;--------------------------------------------------------
tasm: Number of errors = 0
