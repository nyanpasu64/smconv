0001   0000             ;=============================================================================
0002   0000             ; "SM-SPC"
0003   0000             ;
0004   0000             ; snesmod spc driver
0005   0000             ;
0006   0000             ; (c) 2009 Mukunda Johnson
0007   0000             ; (c) 2013 Additional code added by KungFuFurby for pitch modulation and noise generation
0008   0000             ; (c) 2014-2016 Additional code added by Augustus Blackheart and KungFuFurby
0009   0000             ; (c) 2016 FM code by psychopathicteen
0010   0000             ;=============================================================================
0011   0000             ;#define DEBUGINC inc debug \ mov SPC_PORT0, debug
0012   0000             
0013   0000             .define ABNOFX
0014   0000             .define LBYTE(z) (z & 0FFh)
0015   0000             .define HBYTE(z) (z >> 8)
0016   0000             
0017   0000             .define SPROC TCALL 0
0018   0000             .define SPROC2 SPROC
0019   0000             
0020   0000             ;*****************************************************************************
0021   0000             ; PROTOCOL
0022   0000             ;
0023   0000             ; mm = mimic data
0024   0000             ; id = message id
0025   0000             ; vv = validation data (not previous value)
0026   0000             ; v1 = nonzero validation data (not previous value)
0027   0000             ;
0028   0000             ; SPC PORTS:
0029   0000             ; PORT0 = RESERVED
0030   0000             ; PORT1 = COMMUNICATION
0031   0000             ; PORT2 = STATUS:
0032   0000             ;   MSB fep-cccc LSB
0033   0000             ;   f = module volume fade[out/in] in progress
0034   0000             ;   e = end of module reached (restarted from beginning)
0035   0000             ;   p = module is playing (0 means not playing or preparing...)
0036   0000             ;   cccc = cue, incremented on SF1 pattern effect
0037   0000             ; PORT3 = MODULE POSITION
0038   0000             ; 
0039   0000             ; NAME	ID	DESC
0040   0000             ;--------------------------------------------------------
0041   0000             ; LOAD	00	Upload Module
0042   0000             ; 
0043   0000             ; >> id vv -- --	send message
0044   0000             ; << -- mm -- --	message confirmed
0045   0000             ;
0046   0000             ; >> -- v1 DD DD	transfer module
0047   0000             ; << -- mm -- --	DDDD = data, loop until all words xferred
0048   0000             ;
0049   0000             ; >> -- 00 DD DD	final word
0050   0000             ; << -- mm -- --	okay proceed to transfer sources...
0051   0000             ;
0052   0000             ; for each entry in SOURCE_LIST:
0053   0000             ;
0054   0000             ; >> 01 vv LL LL	send loop point
0055   0000             ; << -- mm -- --	loop point saved
0056   0000             ; >> -- v1 DD DD	transfer source data
0057   0000             ; << -- mm -- --	DDDD = data, loop unti all words xferred
0058   0000             ;
0059   0000             ; >> -- 00 DD DD	transfer last word
0060   0000             ; << -- mm -- --	
0061   0000             ;
0062   0000             ; [loop until all needed sources are transferred]
0063   0000             ;
0064   0000             ; >> 00 vv -- --	terminate transfer
0065   0000             ; << -- mm -- --
0066   0000             ;
0067   0000             ; notes:
0068   0000             ;   this function resets the memory system
0069   0000             ;   all sound effects will become invalid
0070   0000             ; 
0071   0000             ;   after final sample transferred the system may
0072   0000             ;   be halted for some time to setup the echo delay.
0073   0000             ;--------------------------------------------------------
0074   0000             ; LOADE	01	Upload Sound Effect
0075   0000             ;
0076   0000             ; >> id vv LL LL	send message
0077   0000             ; << -- mm -- --	source registered, ready for data
0078   0000             ;
0079   0000             ; >> -- v1 DD DD	transfer source data
0080   0000             ; << -- mm -- --	loop until all words xferred
0081   0000             ;
0082   0000             ; >> -- 00 DD DD	send last word
0083   0000             ; << -- mm -- --	okay, ready for playback
0084   0000             ;
0085   0000             ; sound effects are always one-shot
0086   0000             ;  LLLL is not used (or maybe it is...........)
0087   0000             ;--------------------------------------------------------
0088   0000             ; VOL	02	
0089   0000             ;
0090   0000             ; >> id vv VV --
0091   0000             ; << -- mm -- --
0092   0000             ;
0093   0000             ; 
0094   0000             ;--------------------------------------------------------
0095   0000             ; PLAY	03	Play Module
0096   0000             ;
0097   0000             ; >> id vv -- pp
0098   0000             ; << -- mm -- --
0099   0000             ;
0100   0000             ; pp = start position
0101   0000             ;--------------------------------------------------------
0102   0000             ; STOP	04	Stop Playback
0103   0000             ;
0104   0000             ; >> id vv -- --
0105   0000             ; << -- mm -- --
0106   0000             ;--------------------------------------------------------
0107   0000             ; MVOL	05	Set Module Volume
0108   0000             ;
0109   0000             ; >> id vv -- VV
0110   0000             ; << -- mm -- --
0111   0000             ;
0112   0000             ; VV = 0..255 new module volume scale
0113   0000             ;--------------------------------------------------------
0114   0000             ; FADE	06	Fade Module Volume
0115   0000             ;
0116   0000             ; >> id vv tt VV
0117   0000             ; << -- mm -- --
0118   0000             ;
0119   0000             ; VV = 0..255 target volume level
0120   0000             ; tt = fade speed (added every m tick)
0121   0000             ;--------------------------------------------------------
0122   0000             ; RES	07	Reset
0123   0000             ;
0124   0000             ; >> id vv -- --
0125   0000             ; 
0126   0000             ; <driver unloaded>
0127   0000             ;--------------------------------------------------------
0128   0000             
0129   0000             
0130   0000             ;*****************************************************************************
0131   0000             ; dsp registers		; Nocash SNES Specs
0132   0000             ;*****************************************************************************
0133   0000             DSPV_VOL	=00h	; Left volume for Voice 0..7 (R/W)
0134   0000             DSPV_VOLR	=01h	; Right volume for Voice 0..7 (R/W)
0135   0000             DSPV_PL		=02h	; Pitch scaler for Voice 0..7, lower 8bit (R/W)
0136   0000             DSPV_PH		=03h	; Pitch scaler for Voice 0..7, upper 6bit (R/W)
0137   0000             DSPV_SRCN	=04h	; Source number for Voice 0..7 (R/W)
0138   0000             DSPV_ADSR1	=05h	; ADSR settings for Voice 0..7, lower 8bit (R/W)
0139   0000             DSPV_ADSR2	=06h	; ADSR settings for Voice 0..7, upper 8bit (R/W
0140   0000             DSPV_GAIN	=07h	; Gain settings for Voice 0..7 (R/W)
0141   0000             DSPV_ENVX	=08h	; Current envelope value for Voice 0..7 (R)
0142   0000             DSPV_OUTX	=09h	; Current sample value for Voice 0..7 (R) 
0143   0000             
0144   0000             ;		=0Ah	; Unused (8 bytes of general-purpose RAM) (R/W)
0145   0000             ;		=1Ah	; These registers seem to have no function at all.
0146   0000             ;		=2Ah	; Data written to them seems to have no effect on
0147   0000             ;		=3Ah	; sound output, the written values seem to be left
0148   0000             ;		=4Ah	; intact (ie. they aren't overwritten by voice or
0149   0000             ;		=5Ah	; or echo status information).
0150   0000             ;		=6Ah	;
0151   0000             ;		=7Ah	;
0152   0000             
0153   0000             ;		=0Bh	; Unused (8 bytes of general-purpose RAM) (R/W)
0154   0000             ;		=1Bh	;
0155   0000             ;		=2Bh	;
0156   0000             ;		=3Bh	;
0157   0000             ;		=4Bh	;
0158   0000             ;		=5Bh	;
0159   0000             ;		=6Bh	;
0160   0000             ;		=7Bh	;
0161   0000             
0162   0000             			; volume: (negative = phase inverted)
0163   0000             DSP_MVOL	=0Ch	; Left channel master volume (R/W)  :: (-127..+127) -128 causes
0164   0000             DSP_MVOLR	=1Ch	; Right channel master volume (R/W) :: multiply overflows
0165   0000             DSP_EVOL	=2Ch	; Left channel echo volume  :: (-128..+127) -128 can be safely
0166   0000             DSP_EVOLR	=3Ch	; Right channel echo volume :: used
0167   0000             DSP_KON		=4Ch	; Flags for Voice 0..7 (0=No change, 1=Key On) (W)
0168   0000             DSP_KOF		=5Ch	; Flags for Voice 0..7 (0=No change, 1=Key Off) (R/W)
0169   0000             DSP_FLG		=6Ch	; Reset, Mute, Echo-Write flags and Noise Clock (R/W)
0170   0000             			; 0-4 Noise frequency (0=Stop, 1=16Hz, 2=21Hz, ..., 1Eh=16kHz, 1Fh=32kHz)
0171   0000             			; 5   Echo Buffer Writes (0=Enable, 1=Disable) (doesn't disable echo-reads)
0172   0000             			; 6   Mute Amplifier     (0=Normal, 1=Mute) (doesn't stop internal processing)
0173   0000             			; 7   Soft Reset         (0=Normal, 1=KeyOff all voices, and set Envelopes=0)
0174   0000             DSP_ENDX	=7Ch	; Voice End Flags for Voice 0..7 (R) (W=Ack)
0175   0000             
0176   0000             DSP_EFB		=0Dh	; Echo feedback volume (R/W)
0177   0000             ;		=1Dh	; Unused (1 byte of general-purpose RAM) (R/W)
0178   0000             DSP_PMON	=2Dh	; Pitch Modulation Enable Flags for Voice 1..7 (R/W) (see notes below)
0179   0000             DSP_NON		=3Dh	; Noise Enable Flags for Voice 0..7 (R/W)
0180   0000             DSP_EON		=4Dh	; Echo Enable Flags for Voice 0..7 (R/W)
0181   0000             DSP_DIR		=5Dh	; Sample table address (R/W)
0182   0000             			; 0-7   Sample Table Address (in 256-byte steps) (indexed via DSPV_SRCN)
0183   0000             			; The table can contain up to 256 four-byte entries (max 1Kbyte). Each
0184   0000             			; entry is: 
0185   0000             			; Byte 0-1  BRR Start Address (used when voice is Keyed-ON)
0186   0000             			; Byte 2-3  BRR Restart/Loop Address (used when end of BRR data reached)
0187   0000             			; Changing DIR or VxSRCN has no immediate effect (until/unless voices
0188   0000             			; are newly Looped or Keyed-ON).
0189   0000             DSP_ESA		=6Dh	; Echo ring buffer address (R/W)
0190   0000             DSP_EDL		=7Dh	; Echo delay (ring buffer size) (R/W)
0191   0000             
0192   0000             ;		=0Eh	; Unused (8 bytes of general-purpose RAM) (R/W)
0193   0000             ;		=1Eh	;
0194   0000             ;		=2Eh	;
0195   0000             ;		=3Eh	;
0196   0000             ;		=4Eh	;
0197   0000             ;		=5Eh	;
0198   0000             ;		=6Eh	;
0199   0000             ;		=7Eh	;
0200   0000             
0201   0000             DSP_C0		=0Fh	; Echo FIR filter coefficient 0..7 (R/W)
0202   0000             DSP_C1		=1Fh	; Value -128 should not be used for any of the FIRx
0203   0000             DSP_C2		=2Fh	; registers (to avoid multiply overflows). To avoid
0204   0000             DSP_C3		=3Fh	; additional overflows: The sum of POSITIVE values
0205   0000             DSP_C4		=4Fh	; in the first seven registers (FIR0..FIR6) should
0206   0000             DSP_C5		=5Fh	; not exceed +7Fh, and the sum of NEGATIVE values
0207   0000             DSP_C6		=6Fh	; should not exceed -7Fh. The sum of all eight
0208   0000             DSP_C7		=7Fh	; registers (FIR0..FIR7) should be usually around +80h
0209   0000             
0210   0000             ;-----------------------;
0211   0000             
0212   0000             ; 2Dh - PMON - Pitch Modulation Enable Flags for Voice 1..7 (R/W)
0213   0000             ; Pitch modulation allows to generate "Frequency Sweep" effects by mis-using the
0214   0000             ; amplitude from channel (x-1) as pitch factor for channel (x).
0215   0000             ;  0    Not used
0216   0000             ;  1-7  Flags for Voice 1..7 (0=Normal, 1=Modulate by Voice 0..6)
0217   0000             ; For example, output a very loud 1Hz sine-wave on channel 4 (with Direct
0218   0000             ; Gain=40h, and with Left/Right volume=0; unless you actually want to output it
0219   0000             ; to the speaker). Then additionally output a 2kHz sine wave on channel 5 with
0220   0000             ; PMON.Bit5 set. The "2kHz" sound should then repeatedly sweep within 1kHz..3kHz
0221   0000             ; range (or, for a more decent sweep in 1.8kHz..2.2kHz range, drop the Gain
0222   0000             ; level of channel 4)
0223   0000             
0224   0000             ; x5h/x6h - ADSR 1/2
0225   0000             ;  0-3   4bit Attack rate   ;Rate=N*2+1, Step=+32 (or Step=+1024 when Rate=31)
0226   0000             ;  4-6   3bit Decay rate    ;Rate=N*2+16, Step=-(((Level-1) SAR 8)+1)
0227   0000             ;  7     ADSR/Gain Select   ;0=Use VxGAIN, 1=Use VxADSR (Attack/Decay/Sustain)
0228   0000             ;  8-12  5bit Sustain rate  ;Rate=N, Step=-(((Level-1) SAR 8)+1)
0229   0000             ;  13-15 3bit Sustain level ;Boundary=(N+1)*100h
0230   0000             ;  N/A   0bit Release rate  ;Rate=31, Step=-8 (or Step=-800h when BRR-end)
0231   0000             
0232   0000             ; Echo Overflows
0233   0000             ; Setting FIRx, EFB, or EVOLx to -128 does probably cause multiply overflows?
0234   0000             
0235   0000             ADSR		=080h
0236   0000             FLG_NOISE	=0E0h
0237   0000             FLG_RESET	=080h
0238   0000             FLG_MUTE	=040h
0239   0000             FLG_ECEN	=020h
0240   0000             
0241   0000             LIN_DEC = %10000000
0242   0000             EXP_DEC = %10100000
0243   0000             LIN_INC = %11000000
0244   0000             EXP_INC = %11100000
0245   0000             
0246   0000             GAIN_RATE = 1Ch ; 1eh = 4ms;
0247   0000             
0248   0000             #define SETDSP(xx,yy) mov SPC_DSPA, #xx\ mov SPC_DSPD, #yy
0249   0000             
0250   0000             ;*****************************************************************************
0251   0000             ; module defs
0252   0000             ;*****************************************************************************
0253   0000             
0254   0000             MOD_IV		=00H	; INITIAL VOLUME
0255   0000             MOD_IT		=01H	; INITIAL TEMPO
0256   0000             MOD_IS		=02H	; INITIAL SPEED
0257   0000             MOD_CV		=03H	; INITIAL CHANNEL VOLUME
0258   0000             MOD_CP		=0BH	; INITIAL CHANNEL PANNING
0259   0000             MOD_EVOL	=13H	; ECHO VOLUME (LEFT)
0260   0000             MOD_EVOLR	=14H	; ECHO VOLUME (RIGHT)
0261   0000             MOD_EDL		=15H	; ECHO DELAY
0262   0000             MOD_EFB		=16H	; ECHO FEEDBACK
0263   0000             MOD_EFIR	=17H	; ECHO FIR COEFS
0264   0000             MOD_EON		=1FH	; ECHO ENABLE BITS
0265   0000             MOD_SEQU	=20H	; SEQUENCE
0266   0000             MOD_PTABLE_L	=0E8H	; PATTERN TABLE
0267   0000             MOD_PTABLE_H	=128H	; 
0268   0000             MOD_ITABLE_L	=168H	; INSTRUMENT TABLE
0269   0000             MOD_ITABLE_H	=1A8H	; 
0270   0000             MOD_STABLE_L	=1E8H	; SAMPLE TABLE
0271   0000             MOD_STABLE_H	=228H	;
0272   0000             
0273   0000             INS_FADEOUT	=00H
0274   0000             INS_SAMPLE	=01H
0275   0000             INS_GVOL	=02H
0276   0000             INS_SETPAN	=03H
0277   0000             INS_ENVLEN	=04H
0278   0000             INS_ENVSUS	=05H
0279   0000             INS_ENVLOOPST	=06H
0280   0000             INS_ENVLOOPEND	=07H
0281   0000             INS_ENVDATA	=08H
0282   0000             
0283   0000             SAMP_DVOL	=00H
0284   0000             SAMP_GVOL	=01H
0285   0000             SAMP_PITCHBASE	=02H
0286   0000             SAMP_DINDEX	=04H
0287   0000             SAMP_SETPAN	=05H
0288   0000             
0289   0000             
0290   0000             ;*****************************************************************************
0291   0000             ; 0000 - 00EF	zero-page memory
0292   0000             ;*****************************************************************************
0293   0000             
0294   0000             
0295   0000             m0:		.block 2
0296   0002             m1:		.block 2
0297   0004             m2:		.block 2
0298   0006             m3:		.block 2
0299   0008             m4:		.block 2
0300   000A             m5:		.block 2
0301   000C             m6:		.block 1
0302   000D             
0303   000D             mod_bpm:	.block 1
0304   000E             mod_position:	.block 1
0305   000F             mod_row:	.block 1
0306   0010             mod_speed:	.block 1
0307   0011             mod_speed_bk:	.block 1
0308   0012             mod_tick:	.block 1
0309   0013             
0310   0013             module_vol:	.block 1 ; module volume
0311   0014             module_fadeT:	.block 1 ; module volume fade target
0312   0015             module_fadeR:	.block 1 ; module volume fade rate
0313   0016             module_fadeC:	.block 1 ; timer counter
0314   0017             
0315   0017             patt_addr:	.block 2
0316   0019             patt_rows:	.block 1
0317   001A             
0318   001A             pattjump_index:	.block 1 ; 0 = no pattern jump
0319   001B             patt_update:	.block 1 ; PATTERN UPDATE FLAGS
0320   001C             
0321   001C             ch_start:
0322   001C             ch_pitch_l:	.block 8
0323   0024             ch_pitch_h:	.block 8
0324   002C             ch_volume:	.block 8 ; 0..64
0325   0034             
0326   0034             ch_panning:	.block 8 ; 0..64
0327   003C             ch_cmem:	.block 8
0328   0044             ch_note:	.block 8
0329   004C             ch_instr:	.block 8
0330   0054             ch_vcmd:	.block 8
0331   005C             ch_command:	.block 8
0332   0064             ch_param:	.block 8
0333   006C             ch_sample:	.block 8
0334   0074             ch_flags:	.block 8
0335   007C             ch_env_y_l:	.block 8
0336   0084             ch_env_y_h:	.block 8
0337   008C             ch_env_node:	.block 8
0338   0094             ch_env_tick:	.block 8
0339   009C             ch_env_vib:	.block 8
0340   00A4             ch_vib_wav:	.block 8 ; for negative sine values and triangle
0341   00AC             ch_fadeout:	.block 8
0342   00B4             MAX_ADSR_CHANNELS:	=3
0343   00B4             ch_ad:		.block MAX_ADSR_CHANNELS
0344   00B7             ch_sr:		.block MAX_ADSR_CHANNELS
0345   00BA             ch_end:
0346   00BA             
0347   00BA             drop:		.block 2
0348   00BC             ; channel processing variables:
0349   00BC             t_hasdata:	.block 1
0350   00BD             ;t_sampoff:	.block 1
0351   00BD             t_volume:	.block 1
0352   00BE             t_panning:	.block 1
0353   00BF             t_pitch:
0354   00BF             t_pitch_l:	.block 1
0355   00C0             t_pitch_h:	.block 1
0356   00C1             t_flags:	.block 1
0357   00C2             t_env:		.block 1 ; 0..255
0358   00C3             
0359   00C3             p_instr:	.block 2
0360   00C5             
0361   00C5             STATUS:		.block 1
0362   00C6             STATUS_P	=32
0363   00C6             STATUS_E	=64
0364   00C6             STATUS_F	=128
0365   00C6             
0366   00C6             CF_NOTE		=1
0367   00C6             CF_INSTR	=2
0368   00C6             CF_VCMD		=4
0369   00C6             CF_CMD		=8
0370   00C6             CF_KEYON	=16
0371   00C6             CF_FADE		=32
0372   00C6             CF_SURROUND	=64
0373   00C6             CF_MUTE		=128
0374   00C6             
0375   00C6             TF_START	=80H
0376   00C6             TF_DELAY	=2
0377   00C6             
0378   00C6             ;---------------------------
0379   00C6             ; extras
0380   00C6             ;---------------------------
0381   00C6             STANDARD        = 7
0382   00C6             BANDPASS        = 15
0383   00C6             HIGHPASS        = 23
0384   00C6             LOWPASS         = 31
0385   00C6             CUSTOM1		= 39
0386   00C6             CUSTOM2		= 47
0387   00C6             
0388   00C6             current_evol:		.block 1
0389   00C7             current_evol_time:	.block 1
0390   00C8             current_filter_time:	.block 1
0391   00C9             current_noise_time:	.block 1
0392   00CA             current_wt_time:	.block 1
0393   00CB             evol_fb:		.block 1
0394   00CC             evol_max:		.block 1
0395   00CD             evol_min:		.block 1
0396   00CE             evol_time:		.block 1
0397   00CF             filter_time:		.block 1
0398   00D0             filter_values:		.block 8
0399   00D8             fm_blocks:		.block 1
0400   00D9             fm_car_freq:		.block 1
0401   00DA             fm_car_phase:		.block 1
0402   00DB             fm_count:		.block 1
0403   00DC             fm_mod_amp:		.block 1
0404   00DD             fm_mod_freq:		.block 1
0405   00DE             fm_mod_phase:		.block 1
0406   00DF             fm_wave:		.block 1
0407   00E0             ;-------------------------------;
0408   00E0             mod_mode:		.block 1;
0409   00E1             ;-------------------------------;
0410   00E1             MO_CHFLTSWP		=1	; 0: channel filter sweep (off/on)
0411   00E1             MO_CHFLTZMODE		=2	; 1: channel filter sweep zmode (off/on)
0412   00E1             MO_DROP			=4	; 2: drop pitch (off/on)
0413   00E1             MO_EVOLINC		=8	; 3: filter sweep evol (dec/inc)
0414   00E1             MO_FM_MODAMP		=16	; 4: adjust fm vol (off/on)
0415   00E1             MO_GXXVOL		=32	; 5: gxx volume slide (off/on)
0416   00E1             ;-------------------------------;
0417   00E1             mod_special:		.block 1;
0418   00E2             ;-------------------------------;
0419   00E2             MS_ACTIVE		=1	; 0: (inactive/active)
0420   00E2             MS_FM_ACTIVE		=2	; 1: fm (off/on)
0421   00E2             MS_GXXVIB		=4	; 2: gxx vibrato (off/on)
0422   00E2             MS_FM_VIBRATO		=8	; 3: s3[8-f] = fm+vibrato (off/on)
0423   00E2             MS_PATTERNJUMP		=16	; 4: (off/on)
0424   00E2             MS_SWINGODD		=32	; 5: swing tempo (even/odd)
0425   00E2             MS_SWINGTEMPO		=64	; 6: swing tempo (off/on)
0426   00E2             MS_TREMOLO		=128	; 7: (off/on)
0427   00E2             ;-------------------------------;
0428   00E2             noise_sweep_endmax:	.block 1
0429   00E3             noise_sweep_endmin:	.block 1
0430   00E4             noise_sweep_start:	.block 1
0431   00E5             noise_time:		.block 1
0432   00E6             noise_value:		.block 1
0433   00E7             ;-------------------------------;
0434   00E7             special:		.block 1;
0435   00E8             ;-------------------------------;
0436   00E8             ;			=1	; 0: 
0437   00E8             SF_FMWAVEFORM		=2	; 1: (vibrato waveform/fm waveform)
0438   00E8             SF_NOISEINC		=4	; 2: noise frequency (dec/inc)
0439   00E8             SF_NOISEMODE		=8	; 3: (normal/ping pong)
0440   00E8             SF_NOISEREPEAT		=16	; 4: (once/repeat)
0441   00E8             SF_NOISESWEEP		=32	; 5: noise frequency sweep (off/on)
0442   00E8             SF_WAVETABLE		=64	; 6: (disable/enable)
0443   00E8             SF_WTDIR		=128	; 7: (inc/dec)
0444   00E8             ;-------------------------------;
0445   00E8             swing_tempo_mod:	.block 1
0446   00E9             wt_cur:			.block 1
0447   00EA             wt_max:			.block 1
0448   00EB             wt_min:			.block 1
0449   00EC             wt_time:		.block 1
0450   00ED             
0451   00ED             DEFAULT_EVOL_MAX:	=64
0452   00ED             DEFAULT_EVOL_MIN:	=32
0453   00ED             DEFAULT_FILTER_DELAY1:	=10
0454   00ED             DEFAULT_FILTER_DELAY2:	=12
0455   00ED             DEFAULT_FILTER_DELAY3:	=14
0456   00ED             DEFAULT_FILTER_TIME:	=080h
0457   00ED             DEFAULT_MIN_BPFILTER:	=033h
0458   00ED             DEFAULT_MAX_NOISE:	=01fh
0459   00ED             DEFAULT_MODVOL:		=08fh
0460   00ED             DEFAULT_MVOL:		=07fh
0461   00ED             DEFAULT_NOISE_TIME:	=080h
0462   00ED             DEFAULT_RAMP_POS:	=040h
0463   00ED             DEFAULT_RAMP_NEG:	=0bfh
0464   00ED             DEFAULT_SQ_POS:		=038h
0465   00ED             DEFAULT_SQ_NEG:		=0c7h
0466   00ED             DEFAULT_SWING:		=1
0467   00ED             DEFAULT_TEMPO:		=4eh	; original snesmod value = 50h
0468   00ED             DEFAULT_VOL_SAT:	=64
0469   00ED             DEFAULT_WT_MAX:		=7
0470   00ED             DEFAULT_WT_MIN:		=0
0471   00ED             DEFAULT_WT_TIME:	=16
0472   00ED             
0473   00ED             ;-------------------------------;
0474   00ED             MAX_ZP_CLEAR:		 	; do not clear comms_v or xfer_address!!
0475   00ED             ;-------------------------------;
0476   00ED             comms_v:	.block 1	; communication variable
0477   00EE             xfer_address:	.block 2	;
0478   00F0             ;-------------------------------;
0479   00F0             STREAM_REGION = 0FFh
0480   00F0             
0481   00F0             ;-----------------------------------------------------------------------------
0482   00F0             
0483   00F0             
0484   00F0             ;*****************************************************************************
0485   00F0             ; 00F0 - 00FF	Registers
0486   00F0             ;*****************************************************************************
0487   00F0             
0488   00F0             
0489   00F0             SPC_TEST	=0F0h ; Testing functions (W)                                  0Ah
0490   00F0             SPC_CONTROL	=0F1h ; Timer, I/O and ROM Control (W)                         80h
0491   00F0             		      ; bits 0-2 timer enables (1=on), bits 4-5 are I/O port clear bits (11=clear all)
0492   00F0             SPC_DSP		=0F2h ; DSP Register Index (R/W)
0493   00F0             SPC_DSPA	=0F2h ; 
0494   00F0             SPC_DSPD	=0F3h ; DSP Register Data (R/W)
0495   00F0             SPC_PORT0	=0F4h ; CPU Input and Output Register 0 (R and W)      R=00h,W=00h
0496   00F0             SPC_PORT1	=0F5h ; CPU Input and Output Register 1 (R and W)      R=00h,W=00h
0497   00F0             SPC_PORT2	=0F6h ; CPU Input and Output Register 2 (R and W)      R=00h,W=00h
0498   00F0             SPC_PORT3	=0F7h ; CPU Input and Output Register 3 (R and W)      R=00h,W=00h
0499   00F0             SPC_AUXPORT4	=0F8h ; External I/O Port P4 (S-SMP Pins 34-27) (R/W) (unused) FFh
0500   00F0             SPC_AUXPORT5	=0F9h ; External I/O Port P5 (S-SMP Pins 25-18) (R/W) (unused) FFh
0501   00F0             SPC_TIMER0	=0FAh ; Timer 0 Divider (for 8000Hz clock source) (W)
0502   00F0             SPC_TIMER1	=0FBh ; Timer 1 Divider (for 8000Hz clock source) (W)
0503   00F0             SPC_TIMER2	=0FCh ; Timer 2 Divider (for 64000Hz clock source) (W)
0504   00F0             SPC_COUNTER0	=0FDh ; Timer 0 Output (R)
0505   00F0             SPC_COUNTER1	=0FEh ; Timer 1 Output (R)
0506   00F0             SPC_COUNTER2	=0FFh ; Timer 2 Output (R)
0507   00F0             
0508   00F0             DEBUG_P0 = SPC_PORT0
0509   00F0             DEBUG_P2 = SPC_PORT2
0510   00F0             ;-----------------------------------------------------------------------------
0511   00F0             
0512   00F0             
0513   00F0             ;*****************************************************************************
0514   00F0             ; 0100 - 01FF   Page 1, stack space
0515   00F0             ;*****************************************************************************
0516   00F0             ;-----------------------------------------------------------------------------
0517   00F0             
0518   00F0             
0519   00F0             ;*****************************************************************************
0520   00F0             ; 0200 - 02FF	Sample Directory
0521   00F0             ;*****************************************************************************
0522   00F0             SampleDirectory		=0200h	; 256 bytes	(64-sample directory)
0523   00F0             ;-----------------------------------------------------------------------------
0524   00F0             
0525   00F0             
0526   00F0             ;*****************************************************************************
0527   00F0             ; 0300 - 037F   Pattern Memory
0528   00F0             ;-----------------------------------------------------------------------------
0529   00F0             PatternMemory		=0300h	; 16*8 bytes
0530   00F0             ;-----------------------------------------------------------------------------
0531   00F0             
0532   00F0             
0533   00F0             ;*****************************************************************************
0534   0380             .org 380h	; program
0535   0380             ;*****************************************************************************
0536   0380             
0537   0380             
0538   0380             ;-------------------------------------------------------;---------------------
0539   0380             main:							;
0540   0380             ;-------------------------------------------------------;---------------------
0541   0380 3F 2E 05    	call	ClearMemory				;
0542   0383 8F 00 ED    	mov	comms_v, #0				;
0543   0386 8F 00 F5    	mov	SPC_PORT1, #0				; reset some ports
0544   0389 8F 00 F6    	mov	SPC_PORT2, #0				;
0545   038C 8F 00 F7    	mov	SPC_PORT3, #0				;
0546   038F 8F 00 F1    	mov	SPC_CONTROL, #0				; reset	control
0547   0392 8F FF FB    	mov	SPC_TIMER1, #255			; reset fade timer
0548   0395             							;---------------------
0549   0395 8F 5D F2    	mov	SPC_DSPA, #DSP_DIR			; set source dir
0550   0398 8F 02 F3    	mov	SPC_DSPD, #HBYTE(SampleDirectory)	;
0551   039B             ;-------------------------------------------------------;---------------------
0552   039B 8F FA EE    	mov	xfer_address, #LBYTE(MODULE)		; reset transfer
0553   039E 8F 1A EF    	mov	xfer_address+1, #HBYTE(MODULE)		; address
0554   03A1             ;-------------------------------------------------------;---------------------
0555   03A1 E8 F7       	mov	a, #LBYTE(__BRK_ROUTINE__)		; set BRK/TCALL0 vector
0556   03A3 C5 DE FF    	mov	!0FFDEH, a				;
0557   03A6 E8 1A       	mov	a, #HBYTE(__BRK_ROUTINE__)		;
0558   03A8 C5 DF FF    	mov	!0FFDFH, a				;
0559   03AB             ;-------------------------------------------------------;---------------------
0560   03AB 8F 06 F1    	mov	SPC_CONTROL, #%110
0561   03AE 2F 08       	bra	main_loop		; patch for it->spc conversion
0562   03B0             ;---------------------------------------;
0563   03B0 3F 9D 06    	call	Module_Stop		;
0564   03B3 E8 00       	mov	a, #0			;
0565   03B5 3F B5 06    	call	Module_Start		;
0566   03B8             ;-----------------------------------------------------------------------------
0567   03B8             main_loop:
0568   03B8             ;-----------------------------------------------------------------------------
0569   03B8 01          	SPROC2
0570   03B9 3F 81 05    	call	ProcessComms
0571   03BC 13 E1 F9    	bbc0	mod_special, main_loop			; test MS_ACTIVE
0572   03BF             ;-------------------------------------------------------
0573   03BF 01          	SPROC
0574   03C0 3F 02 07    	call	ProcessFade
0575   03C3 01          	SPROC
0576   03C4 3F 38 07    	call	Module_Update
0577   03C7             ;-------------------------------------------------------
0578   03C7             update_ports:
0579   03C7             ;-------------------------------------------------------
0580   03C7 FA C5 F6    	mov	SPC_PORT2, STATUS
0581   03CA FA 0E F7    	mov	SPC_PORT3, mod_position
0582   03CD             ;-------------------------------------------------------
0583   03CD D3 E7 1E    	bbc6	special, skip_wt			; test SF_WAVETABLE
0584   03D0             ;-------------------------------------------------------
0585   03D0 AB CA       	inc	current_wt_time
0586   03D2 69 EC CA    	cmp	current_wt_time, wt_time
0587   03D5 D0 17       	bne	skip_wt
0588   03D7             ;-------------------------------------------------------
0589   03D7 8F 00 CA    	mov	current_wt_time, #0
0590   03DA EB E9       	mov	y, wt_cur
0591   03DC 01          	SPROC
0592   03DD             ;-------------------------------------------------------
0593   03DD 53 E0 0B    	bbc2	mod_mode, skip_drop			; test MO_DROP
0594   03E0 AB BA       	inc	drop
0595   03E2 AB BA       	inc	drop
0596   03E4 78 00 BA    	cmp	drop, #0
0597   03E7 D0 02       	bne	skip_drop
0598   03E9 AB BB       	inc	drop+1
0599   03EB             ;-------------------------------------------------------
0600   03EB             skip_drop:
0601   03EB             ;-------------------------------------------------------
0602   03EB 3F 01 05    	call	WaveTable
0603   03EE             ;-------------------------------------------------------
0604   03EE             skip_wt:
0605   03EE             ;-------------------------------------------------------
0606   03EE 13 E0 0E    	bbc0	mod_mode, skip_filter_sweep		; test MO_CHFLTSWP
0607   03F1             ;-------------------------------------------------------
0608   03F1 AB C8       	inc	current_filter_time
0609   03F3 69 C8 CF    	cmp	filter_time, current_filter_time
0610   03F6 D0 07       	bne	skip_filter_sweep
0611   03F8             ;-------------------------------------------------------
0612   03F8 8F 00 C8    	mov	current_filter_time, #0
0613   03FB 01          	SPROC
0614   03FC 3F 1B 04    	call	ChannelFilterSweep
0615   03FF             ;-------------------------------------------------------
0616   03FF             skip_filter_sweep:
0617   03FF             ;-------------------------------------------------------
0618   03FF B3 E7 0E    	bbc5	special, skip_noise_freq		; test SF_NOISESWEEP
0619   0402             ;-------------------------------------------------------
0620   0402 AB C9       	inc	current_noise_time
0621   0404 69 C9 E5    	cmp	noise_time, current_noise_time
0622   0407 D0 07       	bne	skip_noise_freq
0623   0409             ;-------------------------------------------------------
0624   0409 8F 00 C9    	mov	current_noise_time, #0
0625   040C 01          	SPROC
0626   040D 3F C7 04    	call	NoiseFreqSweep
0627   0410             ;-------------------------------------------------------
0628   0410             skip_noise_freq:
0629   0410             ;-------------------------------------------------------
0630   0410             	;eor	mod_mode, #MO_FM_MODAMP
0631   0410             	;bbc4	mod_mode, main_loop			; test MO_FM_MODAMP
0632   0410             ;-------------------------------------------------------
0633   0410 AB DB       	inc	fm_count
0634   0412 EB DB       	mov	y, fm_count
0635   0414 3F 13 0E    	call	Sine
0636   0417 C4 DC       	mov	fm_mod_amp, a
0637   0419 2F 9D       	bra	main_loop
0638   041B             
0639   041B             ;=============================================================================
0640   041B             ChannelFilterSweep:
0641   041B             ;=============================================================================
0642   041B 3F 9A 04    	call	EVOLSweep		; m0 = current channel target value
0643   041E 8F 00 04    	mov	m2, #0			; m1 = current value
0644   0421 8F 00 06    	mov	m3, #0			; m2 = total pos filter values
0645   0424 CD 07       	mov	x, #7			; m3 = total neg filter values
0646   0426             ;---------------------------------------; m4 = tmp for converting neg to pos
0647   0426             _filter_sweep:
0648   0426             ;---------------------------------------;
0649   0426 4D          	push	x			;
0650   0427             ;---------------------------------------;
0651   0427             _overflow_check:
0652   0427             ;---------------------------------------;
0653   0427 F5 2C 1A    	mov	a, !CBITS+x		;
0654   042A C4 F2       	mov	SPC_DSPA, a		;
0655   042C E4 F3       	mov	a, SPC_DSPD		;
0656   042E C4 02       	mov	m1, a			;
0657   0430 30 06       	bmi	_check_neg		;
0658   0432             ;---------------------------------------;
0659   0432 60          	clrc				;
0660   0433 89 02 04    	adc	m2, m1			; add positive values together
0661   0436 2F 09       	bra	_dex			;
0662   0438             ;---------------------------------------;
0663   0438             _check_neg:
0664   0438             ;---------------------------------------;
0665   0438 48 FF       	eor	a, #0FFh		;
0666   043A BC          	inc	a			;
0667   043B C4 08       	mov	m4, a			;
0668   043D 60          	clrc				;
0669   043E 89 08 06    	adc	m3, m4			; add negative values together
0670   0441             					;
0671   0441 1D          _dex:	dec	x			;
0672   0442 10 E3       	bpl	_overflow_check		;
0673   0444             ;---------------------------------------;
0674   0444 CE          	pop	x			;
0675   0445 2F 01       	bra	_channel_mode		;
0676   0447             ;---------------------------------------;
0677   0447 1D          _cm_dx:	dec	x			;
0678   0448             ;---------------------------------------;
0679   0448             _channel_mode:
0680   0448             ;---------------------------------------;
0681   0448 F4 D0       	mov	a, filter_values+x	; get target filter value for current channel
0682   044A 68 80       	cmp	a, #80h			; if value is +128, move to next channel
0683   044C F0 F9       	beq	_cm_dx			; skipping the overflow check
0684   044E             					;
0685   044E C4 00       	mov	m0, a			; m0 = current channel target value
0686   0450             ;---------------------------------------;
0687   0450             _select_channel:
0688   0450             ;---------------------------------------;
0689   0450 F5 2C 1A    	mov	a, !CBITS+x		;
0690   0453 C4 F2       	mov	SPC_DSPA, a		;
0691   0455 E4 F3       	mov	a, SPC_DSPD		;  a = current filter value
0692   0457 C4 02       	mov	m1, a			; m1 = current filter value
0693   0459 30 12       	bmi	_from_neg		;
0694   045B F0 20       	beq	_from_zero		;
0695   045D             ;---------------------------------------;
0696   045D             _from_pos:
0697   045D             ;---------------------------------------;
0698   045D E4 00       	mov	a, m0			;
0699   045F 30 23       	bmi	_filter_dec		;
0700   0461             ;---------------------------------------;
0701   0461             _pos_to_pos:
0702   0461             ;---------------------------------------;
0703   0461 69 02 00    	cmp	m0, m1			;
0704   0464 90 1E       	bcc	_filter_dec		;
0705   0466 78 7F 04    	cmp	m2, #7Fh		; do the total positive values exceed 126?
0706   0469 90 1D       	bcc	_filter_inc		; if not decrease is ok (inc is negative dec)
0707   046B 2F 29       	bra	_skip_channel		; total of positive values are too high
0708   046D             ;---------------------------------------;
0709   046D             _from_neg:
0710   046D             ;---------------------------------------;
0711   046D E4 00       	mov	a, m0			;
0712   046F 10 17       	bpl	_filter_inc		; target is a positive value
0713   0471             ;---------------------------------------;
0714   0471             _neg_to_neg:
0715   0471             ;---------------------------------------;
0716   0471 69 02 00    	cmp	m0, m1			;
0717   0474 B0 12       	bcs	_filter_inc		;
0718   0476 78 7F 06    	cmp	m3, #7Fh		; do the total negative values exceed 126?
0719   0479 90 09       	bcc	_filter_dec		; if not increase is ok (dec is negative inc)
0720   047B 2F 19       	bra	_skip_channel		; total of positive values are too high
0721   047D             ;---------------------------------------;
0722   047D             _from_zero:
0723   047D             ;---------------------------------------;
0724   047D E4 00       	mov	a, m0			;
0725   047F 69 02 00    	cmp	m0, m1			; target, current value
0726   0482 10 04       	bpl	_filter_inc		;
0727   0484             ;---------------------------------------;
0728   0484             _filter_dec:
0729   0484             ;---------------------------------------;
0730   0484 8B 02       	dec	m1			; decrease current filter value
0731   0486 2F 02       	bra	_store_new_value	;
0732   0488             ;---------------------------------------;
0733   0488             _filter_inc:
0734   0488             ;---------------------------------------;
0735   0488 AB 02       	inc	m1			; increase current filter value
0736   048A             ;---------------------------------------;
0737   048A             _store_new_value:
0738   048A             ;---------------------------------------;
0739   048A FA 02 F3    	mov	SPC_DSPD, m1		; store current filter value
0740   048D 69 02 00    	cmp	m0, m1			; does current filter value equal target value?
0741   0490 D0 04       	bne	_skip_channel		; if not, keep current channel filter active
0742   0492             ;---------------------------------------;
0743   0492             _reset_fv:
0744   0492             ;---------------------------------------;
0745   0492 E8 80       	mov	a, #80h			; disable filter sweep
0746   0494 D4 D0       	mov	filter_values+x, a	; for current channel
0747   0496             ;---------------------------------------;
0748   0496             _skip_channel:
0749   0496             ;---------------------------------------;
0750   0496 1D          	dec	x			;
0751   0497 10 8D       	bpl	_filter_sweep		;
0752   0499 6F          	ret				;
0753   049A             					;
0754   049A             ;=============================================================================
0755   049A             EVOLSweep:
0756   049A             ;=============================================================================
0757   049A 78 00 CE    	cmp	evol_time, #0
0758   049D F0 27       	beq	_end_evol
0759   049F AB C7       	inc	current_evol_time
0760   04A1 69 CE C7    	cmp	current_evol_time, evol_time
0761   04A4 D0 20       	bne	_end_evol
0762   04A6 8F 00 C7    	mov	current_evol_time, #0
0763   04A9             
0764   04A9             _det_dir:
0765   04A9 73 E0 09    	bbc3	mod_mode, _dec_evol		; test MO_EVOLINC
0766   04AC 69 CC C6    	cmp	current_evol, evol_max
0767   04AF F0 15       	beq	_end_evol
0768   04B1 AB C6       	inc	current_evol
0769   04B3 2F 07       	bra	_set_evol
0770   04B5             
0771   04B5             _dec_evol:
0772   04B5 69 CD C6    	cmp	current_evol, evol_min
0773   04B8 F0 0C       	beq	_end_evol
0774   04BA 8B C6       	dec	current_evol
0775   04BC             
0776   04BC             _set_evol:
0777   04BC E4 C6       	mov	a, current_evol
0778   04BE 30 03       	bmi	_set
0779   04C0 48 FF       	eor	a, #255
0780   04C2 BC          	inc	a
0781   04C3 3F 64 12    _set:	call	Command_EchoVolume2
0782   04C6             
0783   04C6             _end_evol:
0784   04C6 6F          	ret
0785   04C7             
0786   04C7             ;=============================================================================
0787   04C7             NoiseFreqSweep:
0788   04C7             ;=============================================================================
0789   04C7 43 E7 11    	bbs2	special, _do_inc		; test SF_NOISEINC
0790   04CA             
0791   04CA             _do_dec:
0792   04CA 8B E6       	dec	noise_value
0793   04CC 78 20 E6    	cmp	noise_value, #20h
0794   04CF 90 03       	bcc	_check_min
0795   04D1 FA E4 E6    	mov	noise_value, noise_sweep_start
0796   04D4             
0797   04D4             _check_min:
0798   04D4 69 E3 E6    	cmp	noise_value, noise_sweep_endmin
0799   04D7 D0 24       	bne	_do_noise
0800   04D9 2F 0F       	bra	_check_pingpong
0801   04DB             
0802   04DB             _do_inc:
0803   04DB AB E6       	inc	noise_value
0804   04DD 78 20 E6    	cmp	noise_value, #20h
0805   04E0 90 03       	bcc	_check_max
0806   04E2 FA E4 E6    	mov	noise_value, noise_sweep_start
0807   04E5             
0808   04E5             _check_max:
0809   04E5 69 E2 E6    	cmp	noise_value, noise_sweep_endmax
0810   04E8 D0 13       	bne	_do_noise
0811   04EA             
0812   04EA             _check_pingpong:
0813   04EA 73 E7 05    	bbc3	special, _check_repeat		; test SF_NOISEMODE
0814   04ED 58 04 E7    	eor	special, #SF_NOISEINC
0815   04F0 2F 0B       	bra	_do_noise
0816   04F2             
0817   04F2             _check_repeat:
0818   04F2 93 E7 05    	bbc4	special, _turn_nfc_off		; test SF_NOISEREPEAT
0819   04F5 FA E4 E6    	mov	noise_value, noise_sweep_start
0820   04F8 2F 03       	bra	_do_noise
0821   04FA             
0822   04FA             _turn_nfc_off:
0823   04FA 38 DF E7    	and	special, #~SF_NOISESWEEP
0824   04FD             
0825   04FD             _do_noise:
0826   04FD 3F 2B 11    	call	SCommand_NoiseFreq1b
0827   0500             
0828   0500             check_back_later:
0829   0500 6F          	ret
0830   0501             
0831   0501             ;=============================================================================
0832   0501             WaveTable:
0833   0501             ;=============================================================================
0834   0501 F6 FC 18    	mov	a, !WAVETABLE_L+y	; wave address low
0835   0504 C5 04 02    	mov	!SampleDirectory+4, a	; sample start
0836   0507 C5 06 02    	mov	!SampleDirectory+6, a	; loop start
0837   050A E8 19       	mov	a, #HBYTE(WT_SAMPLE1)	; wave address high
0838   050C AD 07       	cmp	y, #7			;
0839   050E 90 01       	bcc	_skip_inc		;
0840   0510             ;---------------------------------------;
0841   0510 BC          	inc	a			;
0842   0511             ;---------------------------------------;
0843   0511             _skip_inc:
0844   0511             ;---------------------------------------;
0845   0511 C5 05 02    	mov	!SampleDirectory+5, a	; sample start
0846   0514 C5 07 02    	mov	!SampleDirectory+7, a	; loop start
0847   0517 F3 E7 07    	bbc7	special, _wt_increase	; test SF_WTDIR
0848   051A             ;---------------------------------------;
0849   051A DC          	dec	y			;
0850   051B 7E EB       	cmp	y, wt_min		; if minimum is reached switch direction
0851   051D F0 0A       	beq	_wt_swap_dir		;
0852   051F 2F 05       	bra	_wt_exit		;
0853   0521             ;---------------------------------------;
0854   0521             _wt_increase:				;
0855   0521             ;---------------------------------------;
0856   0521 FC          	inc	y			;
0857   0522 7E EA       	cmp	y, wt_max		; if maximum is reached switch direction
0858   0524 B0 03       	bcs	_wt_swap_dir		;
0859   0526             ;---------------------------------------;
0860   0526             _wt_exit:				;
0861   0526             ;---------------------------------------;
0862   0526 CB E9       	mov	wt_cur, y		;
0863   0528 6F          	ret				;
0864   0529             ;---------------------------------------;
0865   0529             _wt_swap_dir:				;
0866   0529             ;---------------------------------------;
0867   0529 58 80 E7    	eor	special, #SF_WTDIR	;
0868   052C 2F D2       	bra	check_back_later	;
0869   052E             
0870   052E             ;=============================================================================
0871   052E             ClearMemory:
0872   052E             ;=============================================================================
0873   052E CD 00               mov     x, #0
0874   0530             ;=============================================================================
0875   0530             ClearMemoryX:
0876   0530             ;=============================================================================
0877   0530 E8 00               mov     a, #0
0878   0532             _clrmem:
0879   0532 AF                  mov     (X)+, a
0880   0533 C8 ED               cmp     x, #MAX_ZP_CLEAR
0881   0535 D0 FB               bne     _clrmem
0882   0537             
0883   0537 6F          	ret
0884   0538             
0885   0538             ;=============================================================================
0886   0538             ResetSound:				; 76 bytes
0887   0538             ;=============================================================================
0888   0538 8F 5C F2    	SETDSP( DSP_KOF, 0FFh );
0888   053B 8F FF F3    
0889   053E 8F 6C F2    	SETDSP( DSP_FLG, FLG_ECEN );
0889   0541 8F 20 F3    
0890   0544 8F 2D F2    	SETDSP( DSP_PMON, 0 );
0890   0547 8F 00 F3    
0891   054A 8F 2C F2    	SETDSP( DSP_EVOL, 0 );
0891   054D 8F 00 F3    
0892   0550 8F 3C F2    	SETDSP( DSP_EVOLR, 0 );
0892   0553 8F 00 F3    
0893   0556 8F 3D F2    	SETDSP( DSP_NON, 00h );
0893   0559 8F 00 F3    
0894   055C 8F 5C F2    	SETDSP( DSP_KOF, 000h ); this is weird
0894   055F 8F 00 F3    
0895   0562             
0896   0562 3F 2E 05    	call	ClearMemory
0897   0565 3F 3B 12    	call	ResetMasterVolume
0898   0568 8F 40 CC    	mov	evol_max, #DEFAULT_EVOL_MAX
0899   056B 8F 20 CD    	mov	evol_min, #DEFAULT_EVOL_MIN
0900   056E 8F 80 CF    	mov	filter_time, #DEFAULT_FILTER_TIME
0901   0571 8F 01 D8    	mov	fm_blocks, #01h
0902   0574 8F 8F 13    	mov	module_vol, #DEFAULT_MODVOL
0903   0577 8F FF 14    	mov	module_fadeT, #255
0904   057A 8F 1F E2    	mov	noise_sweep_endmax, #DEFAULT_MAX_NOISE
0905   057D 8F 07 EA    	mov	wt_max, #DEFAULT_WT_MAX
0906   0580             
0907   0580 6F          	ret
0908   0581             
0909   0581             ;=============================================================================
0910   0581             ProcessComms:				; 23 bytes
0911   0581             ;=============================================================================
0912   0581 69 F5 ED    	cmp	comms_v, SPC_PORT1	; test for command
0913   0584 D0 01       	bne	_new_message		;
0914   0586 6F          	ret				; <no message>
0915   0587             ;---------------------------------------;
0916   0587             _new_message:
0917   0587             ;---------------------------------------;
0918   0587 FA F5 ED    	mov	comms_v, SPC_PORT1	; copy V
0919   058A E4 F4       	mov	a, SPC_PORT0		; jump to message
0920   058C 00          	nop				; verify data
0921   058D 64 F4       	cmp	a, SPC_PORT0		;
0922   058F D0 F6       	bne	_new_message		;
0923   0591 28 7F       	and	a, #127			; mask 7 bits
0924   0593 1C          	asl	a			;
0925   0594 5D          	mov	x, a			;
0926   0595 1F 98 05    	jmp	[CommandTable+x]	;'
0927   0598             ;-------------------------------------------------------------------
0928   0598             CommandTable:
0929   0598             ;-------------------------------------------------------------------
0930   0598 CE 05       	.word	CMD_LOAD		; 00h - load module
0931   059A 0C 06       	.word	CMD_LOADWT		; 01h - change wavetable
0932   059C AC 05       	.word	CMD_POS			; 02h - CMD_VOL set volume DISABLED
0933   059E A7 06       	.word	CMD_PLAY		; 03h - play
0934   05A0 C1 05       	.word	CMD_STOP		; 04h - stop
0935   05A2 C6 05       	.word	CMD_MVOL		; 05h - set module volume
0936   05A4 B3 05       	.word	CMD_FADE		; 06h - fade module volume
0937   05A6 D8 1A       	.word	CMD_RES			; 07h - reset spc
0938   05A8             	;.word	CMD_NULL		; 08h - CMD_FX sound effect DISABLED
0939   05A8             ;-------------------------------------------------------------------
0940   05A8             ;-------------------------------------------------------------------
0941   05A8             CommandRet:
0942   05A8             ;-------------------------------------------------------------------
0943   05A8 FA ED F5    	mov	SPC_PORT1, comms_v
0944   05AB 6F          	ret
0945   05AC             
0946   05AC             ;*******************************************************************
0947   05AC             CMD_POS:
0948   05AC             ;*******************************************************************
0949   05AC E4 F7       	mov	a, SPC_PORT3
0950   05AE 3F 15 0C    	call	DoSetPosition
0951   05B1 2F F5       	bra	CommandRet
0952   05B3             
0953   05B3             ;*******************************************************************
0954   05B3             CMD_FADE:
0955   05B3             ;*******************************************************************
0956   05B3 18 80 C5    	or	STATUS, #STATUS_F
0957   05B6 FA C5 F6    	mov	SPC_PORT2, STATUS
0958   05B9 FA F7 14    	mov	module_fadeT, SPC_PORT3
0959   05BC FA F6 15    	mov	module_fadeR, SPC_PORT2
0960   05BF 2F E7       	bra	CommandRet
0961   05C1             
0962   05C1             ;*******************************************************************
0963   05C1             CMD_STOP:
0964   05C1             ;*******************************************************************
0965   05C1 3F 9D 06    	call	Module_Stop
0966   05C4             CMD_NULL:	;*
0967   05C4 2F E2       	bra	CommandRet
0968   05C6             
0969   05C6             ;*******************************************************************
0970   05C6             CMD_MVOL:
0971   05C6             ;*******************************************************************
0972   05C6 FA F7 13    	mov	module_vol, SPC_PORT3
0973   05C9 FA F7 14    	mov	module_fadeT, SPC_PORT3
0974   05CC 2F DA       	bra	CommandRet
0975   05CE             
0976   05CE             ;*******************************************************************
0977   05CE             CMD_LOAD:
0978   05CE             ;*******************************************************************
0979   05CE 3F 9D 06    	call	Module_Stop
0980   05D1 8F FA EE    	mov	xfer_address, #LBYTE(MODULE)	; reset transfer address
0981   05D4 8F 1A EF    	mov	xfer_address+1, #HBYTE(MODULE)	;
0982   05D7 3F 17 06    	call	StartTransfer
0983   05DA             
0984   05DA 8F 00 02    	mov	m1, #0
0985   05DD             _wait_for_sourcen:			;
0986   05DD 69 F5 ED    	cmp	comms_v, SPC_PORT1	;
0987   05E0 F0 FB       	beq	_wait_for_sourcen	;
0988   05E2 FA F5 ED    	mov	comms_v, SPC_PORT1	;
0989   05E5 78 00 F4    	cmp	SPC_PORT0, #0		; if p0 != 0:
0990   05E8 F0 20       	beq	_end_of_sources		; load source
0991   05EA             					;
0992   05EA EB 02       	mov	y, m1			;
0993   05EC 60          	clrc				;
0994   05ED 98 04 02    	adc	m1, #4			;
0995   05F0             
0996   05F0             ;-------------------------------------------------------------------
0997   05F0             RegisterSource:
0998   05F0             ;-------------------------------------------------------------------
0999   05F0 E4 EE       	mov	a, xfer_address		;
1000   05F2 D6 00 02    	mov	!SampleDirectory+y, a	; sample start
1001   05F5 60          	clrc				;
1002   05F6 84 F6       	adc	a, SPC_PORT2		;
1003   05F8 D6 02 02    	mov	!SampleDirectory+2+y, a	; loop start
1004   05FB             					;
1005   05FB E4 EF       	mov	a, xfer_address+1	;
1006   05FD D6 01 02    	mov	!SampleDirectory+1+y, a	; sample start
1007   0600             					;
1008   0600 84 F7       	adc	a, SPC_PORT3		;
1009   0602 D6 03 02    	mov	!SampleDirectory+3+y, a	; loop start
1010   0605             
1011   0605 3F 17 06    	call	StartTransfer		;
1012   0608             					;
1013   0608 2F D3       	bra	_wait_for_sourcen	; load next source
1014   060A             
1015   060A             _end_of_sources:			; if p0 == 0:
1016   060A 2F 9C       	bra	CommandRet		;
1017   060C             
1018   060C             ;*******************************************************************
1019   060C             CMD_LOADWT:
1020   060C             ;*******************************************************************
1021   060C 8F 04 EE    	mov	xfer_address, #LBYTE(WT_SAMPLE1)
1022   060F 8F 19 EF    	mov	xfer_address+1, #HBYTE(WT_SAMPLE1)
1023   0612 3F 17 06    	call	StartTransfer
1024   0615 2F 91       	bra	CommandRet
1025   0617             ;===================================================================
1026   0617             StartTransfer:
1027   0617             ;===================================================================
1028   0617 F8 ED       	mov	x, comms_v		; start transfer
1029   0619 8D 00       	mov	y, #0			;
1030   061B D8 F5       	mov	SPC_PORT1, x		;
1031   061D             ;---------------------------------------;---------------------------
1032   061D             DoTransfer:
1033   061D             ;---------------------------------------;---------------------------
1034   061D 3E F5       	cmp	x, SPC_PORT1		; wait for data
1035   061F F0 FC       	beq	DoTransfer		;
1036   0621             ;---------------------------------------;
1037   0621 F8 F5       	mov	x, SPC_PORT1		;
1038   0623             					;---------------------------
1039   0623 E4 F6       	mov	a, SPC_PORT2		; copy data
1040   0625 D7 EE       	mov	[xfer_address]+y, a	;
1041   0627 E4 F7       	mov	a, SPC_PORT3		;
1042   0629 D8 F5       	mov	SPC_PORT1, x		;<- reply to snes
1043   062B FC          	inc	y			;
1044   062C D7 EE       	mov	[xfer_address]+y, a	;
1045   062E FC          	inc	y			;
1046   062F F0 10       	beq	_inc_address		; catch index overflow
1047   0631             ;---------------------------------------;---------------------------
1048   0631 C8 00       _cont1:	cmp	x, #0			; loop until x=0
1049   0633 D0 E8       	bne	DoTransfer		;
1050   0635             ;---------------------------------------;---------------------------
1051   0635 CB 00       	mov	m0, y
1052   0637 60          	clrc
1053   0638 89 00 EE    	adc	xfer_address, m0
1054   063B 98 00 EF    	adc	xfer_address+1, #0
1055   063E D8 ED       	mov	comms_v, x
1056   0640 6F          	ret
1057   0641             ;-------------------------------------------------------------------
1058   0641             _inc_address:
1059   0641             ;-------------------------------------------------------------------
1060   0641 AB EF       	inc	xfer_address+1
1061   0643 2F EC       	bra	_cont1
1062   0645             
1063   0645             ;*****************************************************************************
1064   0645             SetupEcho:
1065   0645             ;*****************************************************************************
1066   0645 E5 0F 1B    	mov	a, !MODULE+MOD_EDL	; ESA = stream_region - EDL*8
1067   0648 F0 52       	beq	_skip_enable_echo	; skip all of this if echo isn't enabled
1068   064A             ;---------------------------------------;---------------------------
1069   064A 9F          	xcn	a			; max = stream_region -1
1070   064B 5C          	lsr	a			;
1071   064C C4 00       	mov	m0, a			;
1072   064E E8 FF       	mov	a, #STREAM_REGION	;
1073   0650 80          	setc				;
1074   0651 A4 00       	sbc	a, m0			;
1075   0653 68 FF       	cmp	a, #STREAM_REGION	;
1076   0655 D0 01       	bne	_edl_not_ss		;
1077   0657             ;---------------------------------------;---------------------------
1078   0657 9C          	dec	a			;
1079   0658             ;---------------------------------------;---------------------------
1080   0658             _edl_not_ss:
1081   0658             ;---------------------------------------;---------------------------
1082   0658 8F 6D F2    	mov	SPC_DSPA, #DSP_ESA	;
1083   065B C4 F3       	mov	SPC_DSPD, a		;
1084   065D             					;
1085   065D C4 01       	mov	m0+1, a			; clear memory region used by echo
1086   065F 8F 00 00    	mov	m0, #0			;
1087   0662 E8 00       	mov	a, #0			;
1088   0664 8D 00       	mov	y, #0			;
1089   0666             ;---------------------------------------;---------------------------
1090   0666             _clearmem:
1091   0666             ;---------------------------------------;---------------------------
1092   0666 D7 00       	mov	[m0]+y, a		;
1093   0668 FC          	inc	y			;
1094   0669 D0 FB       	bne	_clearmem		;
1095   066B             ;---------------------------------------;---------------------------
1096   066B AB 01       	inc	m0+1			;
1097   066D 78 FF 01    	cmp	m0+1, #STREAM_REGION	;
1098   0670 D0 F4       	bne	_clearmem		;
1099   0672             ;---------------------------------------;---------------------------
1100   0672 8F 4D F2    	mov	SPC_DSPA, #DSP_EON	; copy EON
1101   0675 E5 19 1B    	mov	a, !MODULE+MOD_EON	;
1102   0678 C4 F3       	mov	SPC_DSPD, a		;
1103   067A             					;
1104   067A 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL	; read old EDL, set new EDL
1105   067D EB F3       	mov	y, SPC_DSPD		;
1106   067F E5 0F 1B    	mov	a, !MODULE+MOD_EDL	;
1107   0682 C4 F3       	mov	SPC_DSPD, a		;
1108   0684             	;-------------------------------;---------
1109   0684             	; delay EDL*16ms before enabling echo
1110   0684             	; 16384 clks * EDL
1111   0684             	; EDL<<14 clks
1112   0684             	;
1113   0684             	; run loop EDL<<10 times
1114   0684             	;-------------------------------;---------
1115   0684 DD          	mov	a, y			;
1116   0685 1C          	asl	a			;
1117   0686 1C          	asl	a			;
1118   0687 BC          	inc	a			;
1119   0688 C4 01       	mov	m0+1, a			;
1120   068A 8F 00 00    	mov	m0, #0			;
1121   068D             ;---------------------------------------;---------------------------
1122   068D             _delay_16clks:
1123   068D             ;---------------------------------------;---------------------------
1124   068D 77 00       	cmp	a, [0]+y		;
1125   068F 1A 00       	decw	m0			;
1126   0691             ;---------------------------------------;---------------------------
1127   0691 D0 FA       	bne	_delay_16clks
1128   0693             ;---------------------------------------;---------------------------
1129   0693 3F 33 10    	call	ResetAll		; Reset EVOL, EFIR, EFB
1130   0696 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG	; clear ECEN
1131   0699 8F 00 F3    	mov	SPC_DSPD, #0
1132   069C             ;-------------------------------------------------------------------
1133   069C             _skip_enable_echo:
1134   069C             ;-------------------------------------------------------------------
1135   069C 6F          	ret
1136   069D             
1137   069D             ;*****************************************************************************
1138   069D             Module_Stop:
1139   069D             ;*****************************************************************************
1140   069D 3F 38 05    	call	ResetSound
1141   06A0 8F 06 F1    	mov	SPC_CONTROL, #%110
1142   06A3 38 FE E1    	and	mod_special, #~MS_ACTIVE
1143   06A6 6F          	ret
1144   06A7             
1145   06A7             ;*******************************************************************
1146   06A7             CMD_PLAY:
1147   06A7             ;*******************************************************************
1148   06A7 3F 9D 06    	call	Module_Stop
1149   06AA E4 F7       	mov	a, SPC_PORT3
1150   06AC 38 DF C5    	and	STATUS, #~STATUS_P
1151   06AF FA C5 F6    	mov	SPC_PORT2, STATUS
1152   06B2 FA ED F5    	mov	SPC_PORT1, comms_v
1153   06B5             ;*****************************************************************************
1154   06B5             ; play module...
1155   06B5             ;
1156   06B5             ; a = initial position
1157   06B5             ;*****************************************************************************
1158   06B5             Module_Start:
1159   06B5             ;*****************************************************************************
1160   06B5 C4 0E       	mov	mod_position, a
1161   06B7 3F 38 05    	call	ResetSound
1162   06BA             ;-----------------------------------------------------------------------------
1163   06BA             ;_zerofill_channel_data:
1164   06BA             ;-----------------------------------------------------------------------------
1165   06BA             	;mov	x, #ch_start			; zerofill channel data
1166   06BA             	;mov	a, #0				; already clearing zeropage
1167   06BA             ;-----------------------------------------------------------------------------
1168   06BA             ;_zerofill_ch:					; in reset sound...
1169   06BA             ;-----------------------------------------------------------------------------
1170   06BA             	;mov	(x)+, a
1171   06BA             	;cmp	x, #ch_end
1172   06BA             	;bne	_zerofill_ch
1173   06BA             ;-----------------------------------------------------------------------------
1174   06BA 18 01 E1    	or	mod_special, #MS_ACTIVE
1175   06BD E5 FC 1A    	mov	a, !MODULE+MOD_IS
1176   06C0 C4 10       	mov	mod_speed, a
1177   06C2 E5 FB 1A    	mov	a, !MODULE+MOD_IT
1178   06C5 3F F2 06    	call	Module_ChangeTempo
1179   06C8             ;-----------------------------------------------------------------------------
1180   06C8             	;mov	a, !MODULE+MOD_IV
1181   06C8             	;mov	mod_gvol, a
1182   06C8             
1183   06C8             	;mov	x, #7
1184   06C8             ;-----------------------------------------------------------------------------
1185   06C8             ;_copy_cvolume:					; copy volume levels
1186   06C8             ;-----------------------------------------------------------------------------
1187   06C8             	;mov	a, !MODULE+MOD_CV+x		;
1188   06C8             	;mov	ch_cvolume+x, a			;
1189   06C8             	;dec	x				;
1190   06C8             	;bpl	_copy_cvolume			;
1191   06C8             ;-----------------------------------------------------------------------------
1192   06C8 CD 07       	mov	x, #7
1193   06CA             ;-----------------------------------------------------------------------------
1194   06CA             _copy_cpan:
1195   06CA             ;-----------------------------------------------------------------------------
1196   06CA F5 05 1B    	mov	a, !MODULE+MOD_CP+x
1197   06CD 68 41       	cmp	a, #65
1198   06CF B0 04       	bcs	_cpan_surround
1199   06D1 D4 34       	mov	ch_panning+x, a
1200   06D3 2F 08       	bra	_cpan_normal
1201   06D5             ;-----------------------------------------------------------------------------
1202   06D5             _cpan_surround:
1203   06D5             ;-----------------------------------------------------------------------------
1204   06D5 E8 20       	mov	a, #32
1205   06D7 D4 34       	mov	ch_panning+x, a
1206   06D9 E8 40       	mov	a, #CF_SURROUND
1207   06DB D4 74       	mov	ch_flags+x, a
1208   06DD             ;-----------------------------------------------------------------------------
1209   06DD             _cpan_normal:
1210   06DD             ;-----------------------------------------------------------------------------
1211   06DD 1D          	dec	x
1212   06DE 10 EA       	bpl	_copy_cpan
1213   06E0             ;-----------------------------------------------------------------------------
1214   06E0 3F 45 06    	call	SetupEcho
1215   06E3             
1216   06E3 E4 0E       	mov	a, mod_position
1217   06E5 3F FA 07    	call	Module_ChangePosition
1218   06E8             
1219   06E8             	; start timer
1220   06E8 8F 07 F1    	mov	SPC_CONTROL, #%111
1221   06EB             
1222   06EB 18 20 C5    	or	STATUS, #STATUS_P
1223   06EE FA C5 F6    	mov	SPC_PORT2, STATUS
1224   06F1             
1225   06F1 6F          	ret
1226   06F2             
1227   06F2             
1228   06F2             ;*****************************************************************************
1229   06F2             ; a = new BPM value
1230   06F2             ;*****************************************************************************
1231   06F2             Module_ChangeTempo:
1232   06F2             ;*****************************************************************************
1233   06F2 4D          	push	x
1234   06F3             
1235   06F3 C4 0D       	mov	mod_bpm, a
1236   06F5 8F 06 F1    	mov	SPC_CONTROL, #%110
1237   06F8 5D          	mov	x, a
1238   06F9 8D 4E       	mov	y, #DEFAULT_TEMPO
1239   06FB E8 00       	mov	a, #00h
1240   06FD 9E          	div	ya, x
1241   06FE C4 FA       	mov	SPC_TIMER0, a
1242   0700             
1243   0700 CE          	pop	x
1244   0701             
1245   0701 6F          	ret
1246   0702             
1247   0702             ;*****************************************************************************
1248   0702             ; process module fading
1249   0702             ;*****************************************************************************
1250   0702             ProcessFade:
1251   0702             ;*****************************************************************************
1252   0702 E4 FE       	mov	a, SPC_COUNTER1
1253   0704 F0 31       	beq	_skipfade
1254   0706 18 80 C5    	or	STATUS, #STATUS_F
1255   0709 E4 13       	mov	a, module_vol
1256   070B 64 14       	cmp	a, module_fadeT
1257   070D F0 25       	beq	_nofade
1258   070F 90 10       	bcc	_fadein
1259   0711             ;-----------------------------------------------------------------------------
1260   0711             _fadeout:
1261   0711             ;-----------------------------------------------------------------------------
1262   0711 A4 15       	sbc	a, module_fadeR
1263   0713 B0 04       	bcs	_fade_satL
1264   0715 FA 14 13    	mov	module_vol, module_fadeT
1265   0718 6F          	ret
1266   0719             ;-----------------------------------------------------------------------------
1267   0719             _fade_satL:
1268   0719             ;-----------------------------------------------------------------------------
1269   0719 64 14       	cmp	a, module_fadeT
1270   071B B0 14       	bcs	_fadeset
1271   071D FA 14 13    	mov	module_vol, module_fadeT
1272   0720 6F          	ret
1273   0721             ;-----------------------------------------------------------------------------
1274   0721             _fadein:
1275   0721             ;-----------------------------------------------------------------------------
1276   0721 84 15       	adc	a, module_fadeR
1277   0723 90 04       	bcc	_fade_satH
1278   0725 FA 14 13    	mov	module_vol, module_fadeT
1279   0728 6F          	ret
1280   0729             ;-----------------------------------------------------------------------------
1281   0729             _fade_satH:
1282   0729             ;-----------------------------------------------------------------------------
1283   0729 64 14       	cmp	a, module_fadeT
1284   072B 90 04       	bcc	_fadeset
1285   072D FA 14 13    	mov	module_vol, module_fadeT
1286   0730 6F          	ret
1287   0731             ;-----------------------------------------------------------------------------
1288   0731             _fadeset:
1289   0731             ;-----------------------------------------------------------------------------
1290   0731 C4 13       	mov	module_vol, a
1291   0733 6F          	ret
1292   0734             ;-----------------------------------------------------------------------------
1293   0734             _nofade:
1294   0734             ;-----------------------------------------------------------------------------
1295   0734 38 7F C5    	and	STATUS, #~STATUS_F
1296   0737             ;-----------------------------------------------------------------------------
1297   0737             _skipfade:
1298   0737             _no_tick:
1299   0737             ;-----------------------------------------------------------------------------
1300   0737 6F          	ret
1301   0738             
1302   0738             ;*****************************************************************************
1303   0738             ; Update module playback
1304   0738             ;*****************************************************************************
1305   0738             Module_Update:
1306   0738             ;*****************************************************************************
1307   0738 E4 FD       	mov	a, SPC_COUNTER0		; check for a tick
1308   073A F0 FB       	beq	_no_tick		;
1309   073C             ;---------------------------------------;
1310   073C             					;
1311   073C             	;-------------------------------;
1312   073C             	; module tick!!!
1313   073C             	;-------------------------------;
1314   073C             					;
1315   073C 78 00 12    	cmp	mod_tick, #0		;
1316   073F D0 65       	bne	_skip_read_pattern	;
1317   0741             ;---------------------------------------;
1318   0741 8D 01       	mov	y, #1			; skip hints
1319   0743 F7 17       	mov	a, [patt_addr]+y	; copy update flags
1320   0745 FC          	inc	y			;
1321   0746 C4 1B       	mov	patt_update, a		;
1322   0748 C4 02       	mov	m1, a			;
1323   074A CD 00       	mov	x, #0			;
1324   074C 4B 02       	lsr	m1			; test first bit
1325   074E 90 36       	bcc	_no_channel_data	;
1326   0750             ;---------------------------------------;
1327   0750             _read_pattern_data:
1328   0750             ;---------------------------------------;
1329   0750 01          	SPROC				;
1330   0751 F7 17       	mov	a, [patt_addr]+y	; read maskvar
1331   0753 FC          	inc	y			;
1332   0754 C4 00       	mov	m0, a			;
1333   0756 93 00 05    	bbc4	m0, _skip_read_note	; test/read new note
1334   0759 F7 17       	mov	a, [patt_addr]+y	;
1335   075B FC          	inc	y			;
1336   075C D4 44       	mov	ch_note+x, a		;
1337   075E             ;---------------------------------------;
1338   075E             _skip_read_note:
1339   075E             ;---------------------------------------;
1340   075E B3 00 05    	bbc5	m0, _skip_read_instr	; test/read new instrument
1341   0761 F7 17       	mov	a, [patt_addr]+y	;
1342   0763 FC          	inc	y			;
1343   0764 D4 4C       	mov	ch_instr+x, a		;
1344   0766             ;---------------------------------------;
1345   0766             _skip_read_instr:
1346   0766             ;---------------------------------------;
1347   0766 D3 00 05    	bbc6	m0, _skip_read_vcmd	; test/read new vcmd
1348   0769 F7 17       	mov	a, [patt_addr]+y	;
1349   076B FC          	inc	y			;
1350   076C D4 54       	mov	ch_vcmd+x, a		;
1351   076E             ;---------------------------------------;
1352   076E             _skip_read_vcmd:
1353   076E             ;---------------------------------------;
1354   076E F3 00 0A    	bbc7	m0, _skip_read_cmd	; test/read new cmd+param
1355   0771 F7 17       	mov	a, [patt_addr]+y	;
1356   0773 FC          	inc	y			;
1357   0774 D4 5C       	mov	ch_command+x, a		;
1358   0776 F7 17       	mov	a, [patt_addr]+y	;
1359   0778 FC          	inc	y			;
1360   0779 D4 64       	mov	ch_param+x, a		;
1361   077B             ;---------------------------------------;
1362   077B             _skip_read_cmd:
1363   077B             ;---------------------------------------;
1364   077B 38 0F 00    	and	m0, #0Fh		; set flags (lower nibble)
1365   077E F4 74       	mov	a, ch_flags+x		;
1366   0780 28 F0       	and	a, #0F0h		;
1367   0782 04 00       	or	a, m0			;
1368   0784 D4 74       	mov	ch_flags+x, a		;
1369   0786             ;---------------------------------------;
1370   0786             _no_channel_data:
1371   0786             _rp_nextchannel:
1372   0786             ;---------------------------------------;
1373   0786 3D          	inc	x			; increment index
1374   0787 4B 02       	lsr	m1			; shift out next bit
1375   0789 B0 C5       	bcs	_read_pattern_data	; process if set
1376   078B D0 F9       	bne	_no_channel_data	; loop if bits remain (upto 8 iterations)
1377   078D             ;---------------------------------------;
1378   078D CB 00       	mov	m0, y			; add offset to pattern address
1379   078F 60          	clrc				;
1380   0790 89 00 17    	adc	patt_addr, m0		;
1381   0793 98 00 18    	adc	patt_addr+1, #0		;
1382   0796             					;
1383   0796 D3 E1 0D    	bbc6	mod_special, _no_change	; test MS_SWINGTEMPO
1384   0799             ;---------------------------------------;
1385   0799             _swing_tempo:
1386   0799             ;---------------------------------------;
1387   0799 E4 11       	mov	a, mod_speed_bk	
1388   079B A3 E1 03    	bbs5	mod_special, _swing_even; test MS_SWINGODD
1389   079E             ;---------------------------------------;
1390   079E             _swing_odd:
1391   079E             ;---------------------------------------;
1392   079E 80          	setc				;
1393   079F 84 E8       	adc	a, swing_tempo_mod	;
1394   07A1             ;---------------------------------------;
1395   07A1             _swing_even:
1396   07A1             ;---------------------------------------;
1397   07A1 58 20 E1    	eor	mod_special, #MS_SWINGODD
1398   07A4             ;---------------------------------------;
1399   07A4 C4 10       	mov	mod_speed, a
1400   07A6             ;---------------------------------------;
1401   07A6             _no_change:
1402   07A6             _skip_read_pattern:
1403   07A6             ;---------------------------------------;-------------------------------------
1404   07A6 CD 00       	mov	x, #0			; update module channels
1405   07A8 E4 1B       	mov	a, patt_update		;
1406   07AA             ;---------------------------------------;
1407   07AA             _muc_loop:
1408   07AA             ;---------------------------------------;
1409   07AA 5C          	lsr	a
1410   07AB             
1411   07AB 2D          	push	a
1412   07AC             
1413   07AC E8 00       	mov	a, #0
1414   07AE 3C          	rol	a
1415   07AF C4 BC       	mov	t_hasdata, a
1416   07B1             
1417   07B1             ;-----------------------------------------------------------------------------
1418   07B1 01          	SPROC
1419   07B2             
1420   07B2             	;--------------------------------------
1421   07B2             	; get data pointers
1422   07B2             	;--------------------------------------
1423   07B2 FB 4C       	mov	y, ch_instr+x
1424   07B4 DC          	dec	y
1425   07B5 F6 62 1C    	mov	a, !MODULE+MOD_ITABLE_L+y
1426   07B8 C4 C3       	mov	p_instr, a
1427   07BA F6 A2 1C    	mov	a, !MODULE+MOD_ITABLE_H+y
1428   07BD C4 C4       	mov	p_instr+1, a
1429   07BF             
1430   07BF 8F 00 C1    	mov	t_flags, #0
1431   07C2 78 00 BC    	cmp	t_hasdata, #0
1432   07C5 F0 05       	beq	_muc_nopatterndata
1433   07C7             
1434   07C7 3F 2C 08    	call	Channel_ProcessData
1435   07CA 2F 03       	bra	_muc_pa
1436   07CC             ;-----------------------------------------------------------------------------
1437   07CC             _muc_nopatterndata:
1438   07CC             ;-----------------------------------------------------------------------------
1439   07CC 3F A5 08    	call	Channel_CopyTemps
1440   07CF             ;-----------------------------------------------------------------------------
1441   07CF             _muc_pa:
1442   07CF             ;-----------------------------------------------------------------------------
1443   07CF 3F E0 08    	call	Channel_ProcessAudio
1444   07D2             ;-----------------------------------------------------------------------------
1445   07D2 AE          	pop	a
1446   07D3             
1447   07D3 3D          	inc	x
1448   07D4 C8 08       	cmp	x, #8
1449   07D6 D0 D2       	bne	_muc_loop
1450   07D8             ;-----------------------------------------------------------------------------
1451   07D8 AB 12       	inc	mod_tick			; increment tick until >= SPEED
1452   07DA 69 10 12    	cmp	mod_tick, mod_speed		;
1453   07DD 90 1A       	bcc	_exit_tick			;
1454   07DF             ;-----------------------------------------------;
1455   07DF 8F 00 12    	mov	mod_tick, #0			;
1456   07E2 93 E1 04    	bbc4	mod_special, _no_pattjump	; test MS_PATTERNJUMP
1457   07E5 E4 1A       	mov	a, pattjump_index		;
1458   07E7 2F 11       	bra	Module_ChangePosition		;
1459   07E9             ;-----------------------------------------------;
1460   07E9             _no_pattjump:
1461   07E9             ;---------------------------------------;
1462   07E9 AB 0F       	inc	mod_row			; increment row until > PATTERN_ROWS
1463   07EB F0 07       	beq	_adv_pos		;
1464   07ED 69 19 0F    	cmp	mod_row, patt_rows	;
1465   07F0 F0 07       	beq	_exit_tick		;
1466   07F2 90 05       	bcc	_exit_tick		;
1467   07F4             ;---------------------------------------;
1468   07F4             _adv_pos:
1469   07F4             ;---------------------------------------;
1470   07F4 E4 0E       	mov	a, mod_position		; advance position
1471   07F6 BC          	inc	a			;
1472   07F7 2F 01       	bra	Module_ChangePosition	;
1473   07F9             ;---------------------------------------;
1474   07F9             _exit_tick:
1475   07F9             ;---------------------------------------;
1476   07F9 6F          	ret				;
1477   07FA             ;---------------------------------------;
1478   07FA             
1479   07FA             
1480   07FA             ;*****************************************************************************
1481   07FA             ; set sequence position
1482   07FA             ;
1483   07FA             ; a=position
1484   07FA             ;*****************************************************************************
1485   07FA             Module_ChangePosition:
1486   07FA             ;*****************************************************************************
1487   07FA FD          	mov	y, a
1488   07FB             ;-----------------------------------------------------------------------------
1489   07FB             _skip_pattern:
1490   07FB             ;-----------------------------------------------------------------------------
1491   07FB F6 1A 1B    	mov	a, !MODULE+MOD_SEQU+y	;
1492   07FE 68 FE       	cmp	a, #254			; skip +++
1493   0800 D0 03       	bne	_not_plusplusplus	;
1494   0802 FC          	inc	y			;
1495   0803 2F F6       	bra	_skip_pattern		;
1496   0805             ;-----------------------------------------------------------------------------
1497   0805             _not_plusplusplus:
1498   0805             ;-----------------------------------------------------------------------------
1499   0805 68 FF       	cmp	a, #255			; restart on ---
1500   0807 D0 04       	bne	_not_end		;
1501   0809 8D 00       	mov	y, #0			;
1502   080B 2F EE       	bra	_skip_pattern		;
1503   080D             ;-----------------------------------------------------------------------------
1504   080D             _not_end:
1505   080D             ;-----------------------------------------------------------------------------
1506   080D CB 0E       	mov	mod_position, y
1507   080F FD          	mov	y, a
1508   0810 F6 E2 1B    	mov	a, !MODULE+MOD_PTABLE_L+y
1509   0813 C4 17       	mov	patt_addr, a
1510   0815 F6 22 1C    	mov	a, !MODULE+MOD_PTABLE_H+y
1511   0818 C4 18       	mov	patt_addr+1, a
1512   081A 8D 00       	mov	y, #0
1513   081C F7 17       	mov	a, [patt_addr]+y
1514   081E C4 19       	mov	patt_rows, a
1515   0820             
1516   0820 3A 17       	incw	patt_addr
1517   0822             
1518   0822 38 EF E1    	and	mod_special, #~MS_PATTERNJUMP
1519   0825 8F 00 12    	mov	mod_tick, #0
1520   0828 8F 00 0F    	mov	mod_row, #0
1521   082B 6F          	ret
1522   082C             
1523   082C             
1524   082C             ;*****************************************************************************
1525   082C             Channel_ProcessData:
1526   082C             ;*****************************************************************************
1527   082C 78 00 12    	cmp	mod_tick, #0		; skip tick0 processing on other ticks
1528   082F D0 5C       	bne	_cpd_non0		;
1529   0831             					;
1530   0831 F4 74       	mov	a, ch_flags+x		;
1531   0833 C4 0C       	mov	m6, a			;
1532   0835 13 0C 4A    	bbc0	m6, _cpd_no_note	; test for note
1533   0838             ;---------------------------------------;
1534   0838 F4 44       	mov	a, ch_note+x		;
1535   083A 68 FE       	cmp	a, #254			; test notecut/noteoff
1536   083C F0 10       	beq	_cpd_notecut		;
1537   083E B0 17       	bcs	_cpd_noteoff		;
1538   0840             ;---------------------------------------;
1539   0840             _cpd_note:				; don't start note on glissando
1540   0840             ;---------------------------------------;
1541   0840 73 0C 06    	bbc3	m6, _cpdn_test_for_glis	;
1542   0843 F4 5C       	mov	a, ch_command+x		;
1543   0845 68 07       	cmp	a, #7			;
1544   0847 F0 11       	beq	_cpd_note_next		;
1545   0849             ;---------------------------------------;
1546   0849             _cpdn_test_for_glis:
1547   0849             ;---------------------------------------;
1548   0849 3F B4 08    	call	Channel_StartNewNote	;
1549   084C 2F 0C       	bra	_cpd_note_next		;
1550   084E             ;---------------------------------------;
1551   084E             _cpd_notecut:				;notecut:
1552   084E             ;---------------------------------------;
1553   084E E8 00       	mov	a, #0			; cut volume
1554   0850 D4 2C       	mov	ch_volume+x, a		;
1555   0852 38 FE 0C    	and	m6, #~CF_NOTE		; clear note flag
1556   0855 2F 03       	bra	_cpd_note_next		;
1557   0857             ;---------------------------------------;
1558   0857             _cpd_noteoff:				;noteoff:
1559   0857             ;---------------------------------------;
1560   0857 38 EE 0C    	and	m6, #~(CF_NOTE|CF_KEYON); clear note and keyon flags
1561   085A             ;---------------------------------------;
1562   085A             _cpd_note_next:	
1563   085A             ;---------------------------------------;
1564   085A 33 0C 22    	bbc1	m6, _cpdn_no_instr	; apply instrument SETPAN
1565   085D             ;---------------------------------------;
1566   085D 8D 03       	mov	y, #INS_SETPAN		;
1567   085F F7 C3       	mov	a, [p_instr]+y		;
1568   0861 30 02       	bmi	_cpdi_nsetpan		;
1569   0863             ;---------------------------------------;
1570   0863 D4 34       	mov	ch_panning+x, a		;
1571   0865             ;---------------------------------------;
1572   0865             _cpdi_nsetpan:
1573   0865             ;---------------------------------------;
1574   0865 FB 6C       	mov	y, ch_sample+x		; apply sample SETPAN
1575   0867             ;	beq	_cpdi_nosample		;
1576   0867 F6 E2 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1577   086A C4 00       	mov	m0, a			;
1578   086C F6 22 1D    	mov	a, !MODULE+MOD_STABLE_H+y	;
1579   086F C4 01       	mov	m0+1, a			;
1580   0871 8D 00       	mov	y, #SAMP_DVOL		; copy default volume
1581   0873 F7 00       	mov	a, [m0]+y		;
1582   0875 D4 2C       	mov	ch_volume+x, a		;
1583   0877 8D 05       	mov	y, #SAMP_SETPAN		;
1584   0879 F7 00       	mov	a, [m0]+y		;
1585   087B 30 02       	bmi	_cpdi_nsetpan_s		;
1586   087D             ;---------------------------------------;
1587   087D D4 34       	mov	ch_panning+x, a		;
1588   087F             ;---------------------------------------;
1589   087F             _cpdi_nsetpan_s:
1590   087F             _cpdi_nosample:	
1591   087F             _cpdn_no_instr:	
1592   087F             ;---------------------------------------;
1593   087F 38 FE 0C    	and	m6, #~CF_NOTE		;
1594   0882             ;---------------------------------------;
1595   0882             _cpd_no_note:
1596   0882             ;---------------------------------------;
1597   0882 E4 0C       	mov	a, m6			; save flag mods
1598   0884 D4 74       	mov	ch_flags+x, a		;
1599   0886             					;
1600   0886 28 03       	and	a, #(CF_NOTE|CF_INSTR)	; test for note or instrument
1601   0888 F0 03       	beq	_no_note_or_instr	;
1602   088A             ;---------------------------------------;
1603   088A 3F CB 08    	call	Channel_ResetVolume	; and reset volume things
1604   088D             ;---------------------------------------;
1605   088D             _no_note_or_instr:			;
1606   088D             _cpd_non0:				; nonzero ticks: just update audio
1607   088D             ;---------------------------------------;
1608   088D 01          	SPROC				;
1609   088E             					;
1610   088E F4 74       	mov	a, ch_flags+x		; test and process volume command
1611   0890 28 04       	and	a, #CF_VCMD		;
1612   0892 F0 03       	beq	_skip_vcmd		;
1613   0894             ;---------------------------------------;
1614   0894 3F E1 0A    	call	Channel_ProcessVolumeCommand
1615   0897             ;---------------------------------------;
1616   0897             _skip_vcmd:
1617   0897             ;---------------------------------------;
1618   0897 01          	SPROC				;
1619   0898 3F A5 08    	call	Channel_CopyTemps	; copy t values
1620   089B             					;
1621   089B F4 74       	mov	a, ch_flags+x		; test and process command
1622   089D 28 08       	and	a, #CF_CMD		;
1623   089F F0 03       	beq	_skip_cmd		;
1624   08A1             ;---------------------------------------;
1625   08A1 3F B5 0B    	call	Channel_ProcessCommand	;
1626   08A4             ;---------------------------------------;
1627   08A4             _skip_cmd:
1628   08A4             ;---------------------------------------;
1629   08A4 6F          	ret				;
1630   08A5             					;
1631   08A5             ;*****************************************************************************
1632   08A5             Channel_CopyTemps:
1633   08A5             ;*****************************************************************************
1634   08A5 F4 1C       	mov	a, ch_pitch_l+x		; prepare for effects processing.....
1635   08A7 FB 24       	mov	y, ch_pitch_h+x		;
1636   08A9 9A BA       	subw	ya, drop		;
1637   08AB DA BF       	movw	t_pitch, ya		;
1638   08AD F4 2C       	mov	a, ch_volume+x		;
1639   08AF FB 34       	mov	y, ch_panning+x		;
1640   08B1 DA BD       	movw	t_volume, ya		;
1641   08B3             	;mov	t_sampoff, #0		;
1642   08B3             
1643   08B3 6F          	ret
1644   08B4             
1645   08B4             ;*****************************************************************************
1646   08B4             Channel_StartNewNote:
1647   08B4             ;*****************************************************************************
1648   08B4 F4 44       	mov	a, ch_note+x		; pitch = note * 64
1649   08B6 8D 40       	mov	y, #64			;
1650   08B8 CF          	mul	ya			;
1651   08B9 D4 1C       	mov	ch_pitch_l+x, a		;
1652   08BB DB 24       	mov	ch_pitch_h+x, y		;
1653   08BD             					;
1654   08BD F4 4C       	mov	a, ch_instr+x		; test for instrument and copy sample!
1655   08BF F0 06       	beq	_csnn_no_instr		;
1656   08C1             ;---------------------------------------;
1657   08C1 8D 01       	mov	y, #INS_SAMPLE		;
1658   08C3 F7 C3       	mov	a, [p_instr]+y		;
1659   08C5 D4 6C       	mov	ch_sample+x, a		;
1660   08C7             ;---------------------------------------;
1661   08C7             _csnn_no_instr:
1662   08C7             ;---------------------------------------;
1663   08C7 18 80 C1    	or	t_flags, #TF_START	; set start flag
1664   08CA 6F          	ret
1665   08CB             
1666   08CB             ;*****************************************************************************
1667   08CB             Channel_ResetVolume:
1668   08CB             ;*****************************************************************************
1669   08CB E8 FF       	mov	a, #255			; reset fadeout
1670   08CD D4 AC       	mov	ch_fadeout+x, a		;----------------
1671   08CF E8 00       	mov	a, #0			; reset envelope
1672   08D1 D4 8C       	mov	ch_env_node+x, a	;
1673   08D3 D4 94       	mov	ch_env_tick+x, a	;----------------
1674   08D5 D4 3C       	mov	ch_cmem+x, a		; reset CMem
1675   08D7             					;----------------
1676   08D7 F4 74       	mov	a, ch_flags+x		; set KEYON
1677   08D9 08 10       	or	a, #CF_KEYON		; clear FADE
1678   08DB 28 DF       	and	a, #~CF_FADE		;
1679   08DD D4 74       	mov	ch_flags+x, a		;----------------
1680   08DF 6F          	ret
1681   08E0             
1682   08E0             ;*****************************************************************************
1683   08E0             Channel_ProcessAudio:
1684   08E0             ;*****************************************************************************
1685   08E0 01          	SPROC					;
1686   08E1 FB 6C       	mov	y, ch_sample+x			; m5 = sample address
1687   08E3             ;	beq	_cpa_nsample			;
1688   08E3 F6 E2 1C    	mov	a, !MODULE+MOD_STABLE_L+y	;
1689   08E6 C4 0A       	mov	m5, a				;
1690   08E8 F6 22 1D    	mov	a, !MODULE+MOD_STABLE_H+y	;
1691   08EB C4 0B       	mov	m5+1, a				;
1692   08ED             ;-----------------------------------------------;
1693   08ED             _cpa_nsample:					
1694   08ED             ;-----------------------------------------------;
1695   08ED 3F 16 0A    	call	Channel_ProcessEnvelope		;
1696   08F0             						;
1697   08F0 F4 74       	mov	a, ch_flags+x			; process FADE
1698   08F2 28 20       	and	a, #CF_FADE			;
1699   08F4 F0 0D       	beq	_skip_fade			;
1700   08F6             ;-----------------------------------------------;
1701   08F6 F4 AC       	mov	a, ch_fadeout+x			
1702   08F8 80          	setc					
1703   08F9 8D 00       	mov	y, #INS_FADEOUT			
1704   08FB B7 C3       	sbc	a, [p_instr]+y			
1705   08FD B0 02       	bcs	_subfade_noverflow			
1706   08FF             ;-----------------------------------------------
1707   08FF E8 00       	mov	a, #0				
1708   0901             ;-----------------------------------------------
1709   0901             _subfade_noverflow:				
1710   0901             ;-----------------------------------------------
1711   0901 D4 AC       	mov	ch_fadeout+x, a			
1712   0903             ;-----------------------------------------------
1713   0903             _skip_fade:					
1714   0903             ;-----------------------------------------------
1715   0903             	;mov	a, !BITS+x			
1716   0903             	;and	a, #0				
1717   0903             	;bne	_sfx_override			
1718   0903             ;-----------------------------------------------;
1719   0903 E4 C1       	mov	a, t_flags			; exit if 'note delay' is set
1720   0905 28 02       	and	a, #TF_DELAY			;
1721   0907 F0 01       	beq	_cpa_ndelay			;
1722   0909             ;-----------------------------------------------;
1723   0909             _sfx_override:					
1724   0909             ;-----------------------------------------------
1725   0909 6F          	ret					
1726   090A             ;-----------------------------------------------
1727   090A             _cpa_ndelay:					
1728   090A             ;-----------------------------------------------;
1729   090A             						;
1730   090A             	;---------------------------------------;
1731   090A             	; COMPUTE VOLUME:
1732   090A             	; V*SV*VEV*FADE
1733   090A             	; m0 = result (0..255)
1734   090A             	;---------------------------------------;
1735   090A             						;
1736   090A 8D 02       	mov	y, #INS_GVOL			;
1737   090C F7 C3       	mov	a, [p_instr]+y			;
1738   090E             						;
1739   090E 2D          	push	a				;
1740   090F             						;
1741   090F 8D 01       	mov	y, #SAMP_GVOL			;
1742   0911 F7 0A       	mov	a, [m5]+y			;
1743   0913             						;
1744   0913 2D          	push	a				;
1745   0914             						;
1746   0914 E4 BD       	mov	a, t_volume			; y = 8-BIT VOLUME
1747   0916 1C          	asl	a				;
1748   0917 1C          	asl	a				;		
1749   0918 90 02       	bcc	_cpa_clamp_vol			;	
1750   091A E8 FF       	mov	a, #255				;
1751   091C             ;-----------------------------------------------;
1752   091C             _cpa_clamp_vol:					;
1753   091C             ;-----------------------------------------------;
1754   091C FD          	mov	y, a				;
1755   091D             						;
1756   091D AE          	pop	a				; *= SV
1757   091E             						;
1758   091E 1C          	asl	a				;
1759   091F 1C          	asl	a				;
1760   0920 B0 01       	bcs	_calcvol_skip_sv		;
1761   0922             ;-----------------------------------------------;
1762   0922 CF          	mul	ya				;
1763   0923             ;-----------------------------------------------;
1764   0923             _calcvol_skip_sv:				;
1765   0923             ;-----------------------------------------------;
1766   0923 AE          	pop	a				;
1767   0924             						;
1768   0924 1C          	asl	a				;
1769   0925 B0 01       	bcs	_calcvol_skip_iv		;
1770   0927 CF          	mul	ya				;
1771   0928             ;-----------------------------------------------;
1772   0928             _calcvol_skip_iv:				;
1773   0928             ;-----------------------------------------------;
1774   0928 E4 C2       	mov	a, t_env			; *= VEV
1775   092A CF          	mul	ya				;
1776   092B             						;
1777   092B F4 AC       	mov	a, ch_fadeout+x			; *= FADE
1778   092D CF          	mul	ya				;
1779   092E             						;
1780   092E E4 13       	mov	a, module_vol			;
1781   0930 CF          	mul	ya				;
1782   0931             						;
1783   0931 DD          	mov	a, y				; store 7bit result
1784   0932 5C          	lsr	a				; 
1785   0933 C4 04       	mov	m2, a				;
1786   0935             						;
1787   0935 78 80 C1    	cmp	t_flags, #80h			;
1788   0938 B0 0E       	bcs	_dont_hack_gain			;
1789   093A 68 00       	cmp	a, #0				;
1790   093C D0 02       	bne	_gain_not_zero			; map value 0 to fast linear decrease
1791   093E             ;-----------------------------------------------;
1792   093E E8 9C       	mov	a, #(LIN_DEC|GAIN_RATE)		;
1793   0940             ;-----------------------------------------------;
1794   0940             _gain_not_zero:					;
1795   0940             ;-----------------------------------------------;
1796   0940 68 7E       	cmp	a, #126				; map value 126 to fast linear increase
1797   0942 D0 02       	bne	_gain_not_max			; ...127 not reached...
1798   0944             ;-----------------------------------------------;
1799   0944 E8 DC       	mov	a, #(LIN_INC|GAIN_RATE)		;
1800   0946             ;-----------------------------------------------;
1801   0946             _gain_not_max:					;
1802   0946             ;-----------------------------------------------;
1803   0946 C4 04       	mov	m2, a				;
1804   0948             ;-----------------------------------------------;
1805   0948             _dont_hack_gain:				;
1806   0948             ;-----------------------------------------------;
1807   0948 F4 74       	mov	a, ch_flags+x			; [KFF] added in pitchmod
1808   094A 28 80       	and	a, #CF_MUTE			;
1809   094C F0 08       	beq	panning				;
1810   094E 8F 00 02    	mov	m1, #0				;
1811   0951 8F 00 03    	mov	m1+1, #0			;
1812   0954 2F 17       	bra	_cpa_nsurround			;
1813   0956             ;-----------------------------------------------;
1814   0956             panning:					
1815   0956             ;-----------------------------------------------;
1816   0956             						;
1817   0956             	;---------------------------------------;
1818   0956             	; compute PANNING
1819   0956             	;---------------------------------------;
1820   0956             						;
1821   0956 E4 BE       	mov	a, t_panning			; a = panning 0..127	
1822   0958 1C          	asl	a				;	
1823   0959 10 01       	bpl	_clamppan			;
1824   095B             ;-----------------------------------------------;
1825   095B 9C          	dec	a				;
1826   095C             ;-----------------------------------------------;
1827   095C             _clamppan:
1828   095C             ;-----------------------------------------------;	
1829   095C C4 03       	mov	m1+1, a				; store panning (volume) levels
1830   095E 48 7F       	eor	a, #127				;
1831   0960 C4 02       	mov	m1, a				;
1832   0962             
1833   0962 F4 74       	mov	a, ch_flags+x			; apply surround (R = -R)
1834   0964 28 40       	and	a, #CF_SURROUND			;
1835   0966 F0 05       	beq	_cpa_nsurround			;
1836   0968 58 FF 03    	eor	m1+1, #255			;
1837   096B AB 03       	inc	m1+1				;
1838   096D             ;-----------------------------------------------;
1839   096D             _cpa_nsurround:					;
1840   096D             ;-----------------------------------------------;
1841   096D             						;
1842   096D             	;---------------------------------------;
1843   096D             	; compute PITCH
1844   096D             	;---------------------------------------;
1845   096D             						;
1846   096D C8 01       	cmp	x, #1				;
1847   096F             						;
1848   096F 8D 02       	mov	y, #SAMP_PITCHBASE		; m3 = t_pitch PITCHBASE
1849   0971 F7 0A       	mov	a, [m5]+y			;
1850   0973 60          	clrc					;
1851   0974 84 BF       	adc	a, t_pitch_l			;
1852   0976 C4 06       	mov	m3, a				;
1853   0978 FC          	inc	y				;
1854   0979 F7 0A       	mov	a, [m5]+y			;
1855   097B 84 C0       	adc	a, t_pitch_h			;
1856   097D C4 07       	mov	m3+1, a				;
1857   097F 10 0C       	bpl	_positive_oct			;
1858   0981             ;-----------------------------------------------;
1859   0981             
1860   0981             	;-----------------------------------------------------------------;
1861   0981             	; Negative octave handling by KungFuFurby 12/16/15 - 12/17/15     ;
1862   0981             	; Negative octave detected!                                       ;
1863   0981             	; This code ensures that the SPC700 can handle lower pitches than ;
1864   0981             	; what SNESMod normally supports.                                 ;
1865   0981             	;-----------------------------------------------------------------;
1866   0981             						;
1867   0981 48 FF       	eor	a, #0FFh			; Prevent glitched
1868   0983 FD          	mov	y, a				; division read.
1869   0984 F6 DC 18    	mov	a, !LUT_DIV3+y			; m0 = octave
1870   0987 48 FF       	eor	a, #0FFh			;
1871   0989 C4 00       	mov	m0, a				;
1872   098B 2F 06       	bra	_oct_cont			;
1873   098D             ;-----------------------------------------------;
1874   098D             _positive_oct:
1875   098D             ;-----------------------------------------------;
1876   098D FD          	mov	y, a				; m0 = octave
1877   098E F6 DC 18    	mov	a, !LUT_DIV3+y			;
1878   0991 C4 00       	mov	m0, a				;
1879   0993             ;-----------------------------------------------;
1880   0993             _oct_cont:
1881   0993             ;-----------------------------------------------;
1882   0993 1C          	asl	a				; m3 -= (oct*3) << 8
1883   0994 60          	clrc					; Safety clear for negative
1884   0995 84 00       	adc	a, m0				; octaves
1885   0997 C4 01       	mov	m0+1, a				;
1886   0999 E4 07       	mov	a, m3+1				;
1887   099B 80          	setc					;
1888   099C A4 01       	sbc	a, m0+1				;
1889   099E             						;
1890   099E 0B 06       	asl	m3				; m3 = m3*2 + LUT_FTAB base
1891   09A0 3C          	rol	a				;
1892   09A1 98 DC 06    	adc	m3, #LBYTE(LUT_FTAB)		;
1893   09A4 88 12       	adc	a, #HBYTE(LUT_FTAB)		; 
1894   09A6 C4 07       	mov	m3+1, a				;
1895   09A8             						;
1896   09A8 8D 00       	mov	y, #0				; read ftab[f]
1897   09AA F7 06       	mov	a, [m3]+y			;
1898   09AC C4 08       	mov	m4, a				;
1899   09AE FC          	inc	y				;
1900   09AF F7 06       	mov	a, [m3]+y			;
1901   09B1             						;
1902   09B1 2D          	push	a				;
1903   09B2             						;
1904   09B2 E8 08       	mov	a, #8				; y = 8-oct
1905   09B4 80          	setc					;
1906   09B5 A4 00       	sbc	a, m0				;
1907   09B7 FD          	mov	y, a				;
1908   09B8             						;
1909   09B8 AE          	pop	a				; a,m4 = ftab value
1910   09B9 F0 05       	beq	_no_pitch_shift			; skip shift if 0
1911   09BB             ;-----------------------------------------------;
1912   09BB             _cont_pitch_shift:
1913   09BB             ;-----------------------------------------------;
1914   09BB 5C          	lsr	a				; shift by (8-oct)
1915   09BC 6B 08       	ror	m4				;
1916   09BE FE FB       	dbnz	y, _cont_pitch_shift		; (thanks KungFuFurby)
1917   09C0             
1918   09C0             	;-----------------------------------------------------------------;
1919   09C0             	; WARNING: More than eight pitch shifts are possible, so the code ;
1920   09C0             	; has been compressed to a mere three lines. The only problem     ;
1921   09C0             	; will be with glitched values out of range.                      ;
1922   09C0             	;-----------------------------------------------------------------;
1923   09C0             						
1924   09C0             ;-----------------------------------------------;
1925   09C0             _no_pitch_shift:
1926   09C0             ;-----------------------------------------------;
1927   09C0 C4 09       	mov	m4+1, a				;
1928   09C2             						;
1929   09C2             	;---------------------------------------;
1930   09C2             	; m1 = VOL/VOLR
1931   09C2             	; m2 = GAIN
1932   09C2             	; m4 = PITCH
1933   09C2             	;---------------------------------------;
1934   09C2             						;
1935   09C2 7D          	mov	a, x				; DSPA = voices[x]
1936   09C3 9F          	xcn	a				;
1937   09C4 C4 F2       	mov	SPC_DSPA, a			;
1938   09C6             						;-----------------------------
1939   09C6 E4 C1       	mov	a, t_flags			; test for KEYON
1940   09C8 28 80       	and	a, #TF_START			;
1941   09CA F0 15       	beq	_cpa_nstart			;-----------------------------
1942   09CC             ;-----------------------------------------------;keyon:
1943   09CC 8D 04       	mov	y, #SAMP_DINDEX			; set SRCN
1944   09CE F7 0A       	mov	a, [m5]+y			;
1945   09D0 18 04 F2    	or	SPC_DSPA, #DSPV_SRCN		;
1946   09D3 C4 F3       	mov	SPC_DSPD, a			;-----------------------------
1947   09D5             	;---------------------------------------;
1948   09D5             	; **TODO: SAMPLE OFFSET
1949   09D5             	;---------------------------------------;
1950   09D5 8F 4C F2    	mov	SPC_DSPA, #DSP_KON		; set KON bit
1951   09D8 F5 24 1A    	mov	a, !BITS+x			;
1952   09DB C4 F3       	mov	SPC_DSPD, a			;-----------------------------
1953   09DD 7D          	mov	a, x				; restore DSPA = voices[x]
1954   09DE 9F          	xcn	a				;
1955   09DF C4 F2       	mov	SPC_DSPA, a			;
1956   09E1             ;-----------------------------------------------;
1957   09E1             _cpa_nstart:
1958   09E1             ;-----------------------------------------------;
1959   09E1 FA 02 F3    	mov	SPC_DSPD, m1			; set VOLUME
1960   09E4 AB F2       	inc	SPC_DSPA			;
1961   09E6 FA 03 F3    	mov	SPC_DSPD, m1+1			;
1962   09E9 AB F2       	inc	SPC_DSPA			;-----------------------------
1963   09EB FA 08 F3    	mov	SPC_DSPD, m4			; set PITCH
1964   09EE AB F2       	inc	SPC_DSPA			;
1965   09F0 FA 09 F3    	mov	SPC_DSPD, m4+1			;
1966   09F3 AB F2       	inc	SPC_DSPA			;
1967   09F5 AB F2       	inc	SPC_DSPA			;-----------------------------
1968   09F7             						;
1969   09F7 C8 03       	cmp	x, #MAX_ADSR_CHANNELS		;
1970   09F9 B0 06       	bcs	_ch_direct_gain			;
1971   09FB F4 B4       	mov	a, ch_ad+x			; test to see if ADSR has been
1972   09FD 68 80       	cmp	a, #ADSR			; set for channel
1973   09FF B0 0B       	bcs	_ch_adsr			;
1974   0A01             ;-----------------------------------------------;
1975   0A01             _ch_direct_gain:				;
1976   0A01             ;-----------------------------------------------;
1977   0A01 8F 00 F3    	mov	SPC_DSPD, #00h			; disable ADSR
1978   0A04 18 07 F2    	or	SPC_DSPA, #07h			; set GAIN [default]
1979   0A07 FA 04 F3    	mov	SPC_DSPD, m2			;-----------------------------
1980   0A0A             						;
1981   0A0A             	;---------------------------------------;
1982   0A0A             	; **TODO: RESTORE SAMPLE OFFSET
1983   0A0A             	;---------------------------------------;
1984   0A0A             						;
1985   0A0A             ;-----------------------------------------------;
1986   0A0A             _end_ch_process_audio:
1987   0A0A             ;-----------------------------------------------;
1988   0A0A 01          	SPROC					;
1989   0A0B             ;-----------------------------------------------;
1990   0A0B             _env_quit:
1991   0A0B             ;-----------------------------------------------;
1992   0A0B 6F          	ret					;
1993   0A0C             ;-----------------------------------------------;
1994   0A0C             _ch_adsr:
1995   0A0C             ;-----------------------------------------------;
1996   0A0C C4 F3       	mov	SPC_DSPD, a			; store attack and decay rate
1997   0A0E AB F2       	inc	SPC_DSPA			;
1998   0A10 F4 B7       	mov	a, ch_sr+x			;
1999   0A12 C4 F3       	mov	SPC_DSPD, a			; store sustain rate and level
2000   0A14 2F F4       	bra	_end_ch_process_audio		;
2001   0A16             ;-----------------------------------------------;
2002   0A16             
2003   0A16             ;*****************************************************************************
2004   0A16             Channel_ProcessEnvelope:
2005   0A16             ;*****************************************************************************
2006   0A16 E4 C1       	mov	a, t_flags			; exit if 'note delay' is set
2007   0A18 28 02       	and	a, #TF_DELAY			;
2008   0A1A D0 EF       	bne	_env_quit			;
2009   0A1C             ;-----------------------------------------------;
2010   0A1C 8D 04       	mov	y, #INS_ENVLEN			; test for envelope
2011   0A1E F7 C3       	mov	a, [p_instr]+y			;
2012   0A20 C4 00       	mov	m0, a				;
2013   0A22 D0 0B       	bne	_envelope_valid			;if no envelope:
2014   0A24             ;-----------------------------------------------;
2015   0A24 8F FF C2    	mov	t_env, #255			; set to max
2016   0A27             						;
2017   0A27 F4 74       	mov	a, ch_flags+x			; start fade on KEYOFF
2018   0A29 28 10       	and	a, #CF_KEYON			;
2019   0A2B F0 DE       	beq	_env_quit			;
2020   0A2D 2F 6E       	bra	_env_setfade			;
2021   0A2F             ;-----------------------------------------------;
2022   0A2F             _envelope_valid:
2023   0A2F             ;-----------------------------------------------;
2024   0A2F F4 8C       	mov	a, ch_env_node+x		; read envelope node data
2025   0A31             						;
2026   0A31 60          	clrc					; m1/m2
2027   0A32 88 08       	adc	a, #INS_ENVDATA			;
2028   0A34 FD          	mov	y, a				;
2029   0A35 F7 C3       	mov	a, [p_instr]+y			;
2030   0A37 C4 02       	mov	m1, a				;
2031   0A39 FC          	inc	y				;
2032   0A3A F7 C3       	mov	a, [p_instr]+y			;
2033   0A3C C4 03       	mov	m1+1, a				;
2034   0A3E FC          	inc	y				;
2035   0A3F F7 C3       	mov	a, [p_instr]+y			;
2036   0A41 C4 04       	mov	m2, a				;
2037   0A43 FC          	inc	y				;
2038   0A44 F7 C3       	mov	a, [p_instr]+y			;
2039   0A46 C4 05       	mov	m2+1, a				;
2040   0A48             						;
2041   0A48 01          	SPROC					;
2042   0A49 F4 94       	mov	a, ch_env_tick+x		; test zero/nonzero tick
2043   0A4B D0 0A       	bne	_env_nonzero_tick		;
2044   0A4D             ;-----------------------------------------------;ZEROTICK:
2045   0A4D E4 02       	mov	a, m1				; copy Y level
2046   0A4F D4 84       	mov	ch_env_y_h+x, a			;
2047   0A51 E8 00       	mov	a, #0				;
2048   0A53 D4 7C       	mov	ch_env_y_l+x, a			;
2049   0A55 2F 25       	bra	_env_zerotick			;
2050   0A57             ;-----------------------------------------------;
2051   0A57             _env_nonzero_tick:				;NONZERO:
2052   0A57             ;-----------------------------------------------;
2053   0A57 F4 7C       	mov	a, ch_env_y_l+x			;
2054   0A59 60          	clrc					;
2055   0A5A 84 04       	adc	a, m2				;
2056   0A5C D4 7C       	mov	ch_env_y_l+x, a			;
2057   0A5E F4 84       	mov	a, ch_env_y_h+x			;
2058   0A60 84 05       	adc	a, m2+1				;
2059   0A62 10 08       	bpl	_catch_negative			; clamp result 0.0->64.0
2060   0A64             ;-----------------------------------------------;
2061   0A64 E8 00       	mov	a, #0				;
2062   0A66 D4 84       	mov	ch_env_y_h+x, a			;
2063   0A68 D4 7C       	mov	ch_env_y_l+x, a			;
2064   0A6A 2F 10       	bra	_env_zerotick			;
2065   0A6C             ;-----------------------------------------------;
2066   0A6C             _catch_negative:				
2067   0A6C             ;-----------------------------------------------
2068   0A6C 68 40       	cmp	a, #64				
2069   0A6E 90 0A       	bcc	_catch_plus			
2070   0A70             ;-----------------------------------------------
2071   0A70 E8 40       	mov	a, #64				
2072   0A72 D4 84       	mov	ch_env_y_h+x, a			
2073   0A74 E8 00       	mov	a, #0				
2074   0A76 D4 7C       	mov	ch_env_y_l+x, a			
2075   0A78 2F 02       	bra	_env_zerotick			
2076   0A7A             ;-----------------------------------------------
2077   0A7A             _catch_plus:
2078   0A7A             ;-----------------------------------------------
2079   0A7A D4 84       	mov	ch_env_y_h+x, a			
2080   0A7C             ;-----------------------------------------------
2081   0A7C             _env_zerotick:
2082   0A7C             ;-----------------------------------------------;
2083   0A7C F4 7C       	mov	a, ch_env_y_l+x			; t_env = env << 2
2084   0A7E C4 02       	mov	m1, a				;
2085   0A80 F4 84       	mov	a, ch_env_y_h+x			;
2086   0A82 0B 02       	asl	m1				;
2087   0A84 3C          	rol	a				;
2088   0A85 0B 02       	asl	m1				;
2089   0A87 3C          	rol	a				;
2090   0A88             						;
2091   0A88 90 02       	bcc	_env_shift_clamp		; clamp to 255
2092   0A8A             ;-----------------------------------------------;
2093   0A8A E8 FF       	mov	a, #255				;
2094   0A8C             ;-----------------------------------------------;
2095   0A8C             _env_shift_clamp:
2096   0A8C             ;-----------------------------------------------;
2097   0A8C C4 C2       	mov	t_env, a			;
2098   0A8E             						;
2099   0A8E F4 74       	mov	a, ch_flags+x			; don't advance if "keyon" and node=sustain
2100   0A90 28 10       	and	a, #CF_KEYON			;
2101   0A92 F0 10       	beq	_env_nsustain			;
2102   0A94             ;-----------------------------------------------;
2103   0A94 8D 05       	mov	y, #INS_ENVSUS			;
2104   0A96 F7 C3       	mov	a, [p_instr]+y			;
2105   0A98 74 8C       	cmp	a, ch_env_node+x		;
2106   0A9A D0 08       	bne	_env_nsustain			;
2107   0A9C             ;-----------------------------------------------;
2108   0A9C 6F          	ret					;
2109   0A9D             ;-----------------------------------------------;
2110   0A9D             _env_setfade:
2111   0A9D             ;-----------------------------------------------;
2112   0A9D F4 74       	mov	a, ch_flags+x			;
2113   0A9F 08 20       	or	a, #CF_FADE			;
2114   0AA1 D4 74       	mov	ch_flags+x, a			;
2115   0AA3 6F          	ret					;
2116   0AA4             ;-----------------------------------------------;
2117   0AA4             _env_nsustain:
2118   0AA4             ;-----------------------------------------------;
2119   0AA4 BB 94       	inc	ch_env_tick+x			; increment tick
2120   0AA6 F4 94       	mov	a, ch_env_tick+x		;
2121   0AA8 64 03       	cmp	a, m1+1				; exit if < duration
2122   0AAA 90 24       	bcc	_env_exit			;
2123   0AAC             ;-----------------------------------------------;
2124   0AAC E8 00       	mov	a, #0				; reset tick
2125   0AAE D4 94       	mov	ch_env_tick+x, a		;
2126   0AB0             						;
2127   0AB0 8D 07       	mov	y, #INS_ENVLOOPEND		; turn on FADE if keyoff and loop
2128   0AB2 F7 C3       	mov	a, [p_instr]+y			;
2129   0AB4 68 FF       	cmp	a, #255				;
2130   0AB6 F0 19       	beq	_env_no_loop			;
2131   0AB8 F4 74       	mov	a, ch_flags+x			;	
2132   0ABA 28 10       	and	a, #CF_KEYON			;	
2133   0ABC D0 06       	bne	_env_no_fade			;	
2134   0ABE F4 74       	mov	a, ch_flags+x			;
2135   0AC0 08 20       	or	a, #CF_FADE			;
2136   0AC2 D4 74       	mov	ch_flags+x, a			;
2137   0AC4             ;-----------------------------------------------;
2138   0AC4             _env_no_fade:
2139   0AC4             ;-----------------------------------------------;
2140   0AC4 F4 8C       	mov	a, ch_env_node+x		; test for loop point
2141   0AC6             ;	mov	y, #INS_ENVLOOPEND		;
2142   0AC6 77 C3       	cmp	a, [p_instr]+y			;
2143   0AC8 D0 07       	bne	_env_loop_test			;
2144   0ACA             ;-----------------------------------------------;
2145   0ACA 8D 06       	mov	y, #INS_ENVLOOPST		;
2146   0ACC F7 C3       	mov	a, [p_instr]+y			;
2147   0ACE D4 8C       	mov	ch_env_node+x, a		;
2148   0AD0             ;-----------------------------------------------;
2149   0AD0             _env_exit:
2150   0AD0             ;-----------------------------------------------;
2151   0AD0 6F          	ret					;
2152   0AD1             ;-----------------------------------------------;
2153   0AD1             _env_loop_test:					;
2154   0AD1             _env_no_loop:					;
2155   0AD1             ;-----------------------------------------------;
2156   0AD1 F4 8C       	mov	a, ch_env_node+x		;
2157   0AD3 80          	setc					; suspicious...
2158   0AD4 B8 04 00    	sbc	m0, #4				;
2159   0AD7 64 00       	cmp	a, m0				; test for envelope end
2160   0AD9 F0 C2       	beq	_env_setfade			;
2161   0ADB 60          	clrc					; increment node
2162   0ADC 88 04       	adc	a, #4				;
2163   0ADE D4 8C       	mov	ch_env_node+x, a		;
2164   0AE0 6F          	ret					;
2165   0AE1             ;-----------------------------------------------;
2166   0AE1             
2167   0AE1             ;*****************************************************************************
2168   0AE1             Channel_ProcessVolumeCommand:
2169   0AE1             ;*****************************************************************************
2170   0AE1 F4 2C       	mov	a, ch_volume+x
2171   0AE3 FB 54       	mov	y, ch_vcmd+x
2172   0AE5 CB 00       	mov	m0, y
2173   0AE7 3F ED 0A    	call	do_vcmd
2174   0AEA D4 2C       	mov	ch_volume+x, a
2175   0AEC 6F          	ret
2176   0AED             
2177   0AED             do_vcmd:
2178   0AED AD 41       	cmp	y, #65
2179   0AEF 90 19       	bcc	vcmd_setvol
2180   0AF1 AD 4B       	cmp	y, #75
2181   0AF3 90 1C       	bcc	vcmd_finevolup
2182   0AF5 AD 55       	cmp	y, #85
2183   0AF7 90 29       	bcc	vcmd_finevoldown
2184   0AF9 AD 5F       	cmp	y, #95
2185   0AFB 90 34       	bcc	vcmd_volup
2186   0AFD AD 69       	cmp	y, #105	
2187   0AFF 90 3A       	bcc	vcmd_voldown
2188   0B01 AD C1       	cmp	y, #193	
2189   0B03 B0 04       	bcs	vcmd_invalid
2190   0B05 AD 80       	cmp	y, #128
2191   0B07 B0 3C       	bcs	vcmd_pan
2192   0B09             vcmd_invalid:
2193   0B09 6F          	ret
2194   0B0A             
2195   0B0A             ;-----------------------------------------------------------------------------
2196   0B0A             ; 00-64 set volume
2197   0B0A             ;-----------------------------------------------------------------------------
2198   0B0A             vcmd_setvol:
2199   0B0A 78 00 12    	cmp	mod_tick, #0		; a = volume
2200   0B0D D0 01       	bne	exit_vcmd		;
2201   0B0F DD          	mov	a, y			;
2202   0B10             exit_vcmd:				;
2203   0B10 6F          	ret				;
2204   0B11             
2205   0B11             ;-----------------------------------------------------------------------------
2206   0B11             ; 65-74 fine vol up
2207   0B11             ;-----------------------------------------------------------------------------
2208   0B11             vcmd_finevolup:
2209   0B11 B8 41 00    	sbc	m0, #65			; m0 = rate (-1)
2210   0B14 78 00 12    	cmp	mod_tick, #0
2211   0B17 D0 F7       	bne	exit_vcmd
2212   0B19             
2213   0B19             _vcmd_add_sat64:
2214   0B19 84 00       	adc	a, m0			; a += rate (+1)
2215   0B1B 68 41       	cmp	a, #DEFAULT_VOL_SAT+1	; saturate to DEFAULT_VOL_SAT
2216   0B1D 90 F1       	bcc	exit_vcmd		;
2217   0B1F E8 40       	mov	a, #DEFAULT_VOL_SAT	;
2218   0B21 6F          	ret				;
2219   0B22             
2220   0B22             ;-----------------------------------------------------------------------------
2221   0B22             ; 75-84 fine vol down
2222   0B22             ;-----------------------------------------------------------------------------
2223   0B22             vcmd_finevoldown:
2224   0B22 B8 4A 00    	sbc	m0, #75-1		; m0 = rate [carry is cleared]
2225   0B25 78 00 12    	cmp	mod_tick, #0
2226   0B28 D0 E6       	bne	exit_vcmd
2227   0B2A             
2228   0B2A             _vcmd_sub_sat0:	
2229   0B2A A4 00       	sbc	a, m0			; a -= rate
2230   0B2C B0 E2       	bcs	exit_vcmd		; saturate lower bound to 0
2231   0B2E E8 00       	mov	a, #0			;
2232   0B30 6F          	ret				;
2233   0B31             
2234   0B31             ;-----------------------------------------------------------------------------
2235   0B31             ; 85-94 vol up
2236   0B31             ;-----------------------------------------------------------------------------
2237   0B31             vcmd_volup:
2238   0B31 B8 55 00    	sbc	m0, #85			; m0 = rate (-1)
2239   0B34 78 00 12    	cmp	mod_tick, #0
2240   0B37 F0 D7       	beq	exit_vcmd
2241   0B39 2F DE       	bra	_vcmd_add_sat64
2242   0B3B             
2243   0B3B             ;-----------------------------------------------------------------------------
2244   0B3B             ; 95-104 vol down
2245   0B3B             ;-----------------------------------------------------------------------------
2246   0B3B             vcmd_voldown:
2247   0B3B B8 5E 00    	sbc	m0, #95-1
2248   0B3E 78 00 12    	cmp	mod_tick, #0
2249   0B41 F0 CD       	beq	exit_vcmd
2250   0B43 2F E5       	bra	_vcmd_sub_sat0
2251   0B45             
2252   0B45             ;-----------------------------------------------------------------------------
2253   0B45             ; 128-192 set pan
2254   0B45             ;-----------------------------------------------------------------------------
2255   0B45             vcmd_pan:
2256   0B45 78 00 12    	cmp	mod_tick, #0		; set panning
2257   0B48 D0 C6       	bne	exit_vcmd		;
2258   0B4A             					;
2259   0B4A 2D          	push	a			;
2260   0B4B             					;
2261   0B4B DD          	mov	a, y			;
2262   0B4C A8 80       	sbc	a, #128			;
2263   0B4E 3F 52 12    	call	Command_SetPanningb	; Bugfix by KungFuFurby 12/20/15
2264   0B51 D4 34       	mov	ch_panning+x, a		;
2265   0B53             
2266   0B53 AE          	pop	a
2267   0B54             
2268   0B54 6F          	ret
2269   0B55             
2270   0B55             
2271   0B55             ;-----------------------------------------------------------------------------
2272   0B55             COMMAND_MEMORY_MAP:
2273   0B55             ;-----------------------------------------------------------------------------
2274   0B55 000000102020	.byte 00h, 00h, 00h, 10h, 20h, 20h, 30h, 70h, 00h
2274   0B5B 307000
2275   0B5E             	;       A    B    C    D    E    F    G    H    I
2276   0B5E 401000000000	.byte 40h, 10h, 00h, 00h, 00h, 00h, 10h, 80h, 70h
2276   0B64 108070
2277   0B67             	;       J    K    L    M    N    O    P    Q    R
2278   0B67 600000001000	.byte 60h, 00h, 00h, 00h, 10h, 00h, 00h, 00h
2278   0B6D 0000
2279   0B6F             	;       S    T    U    V    W    X    Y    Z
2280   0B6F             ;-----------------------------------------------------------------------------
2281   0B6F             
2282   0B6F             
2283   0B6F             ;********************************************************
2284   0B6F             Channel_ProcessCommandMemory:
2285   0B6F             ;********************************************************
2286   0B6F FB 5C       	mov	y, ch_command+x
2287   0B71 F6 54 0B    	mov	a, !COMMAND_MEMORY_MAP-1+y
2288   0B74 F0 3E       	beq	_cpc_quit		; 0 = no memory!
2289   0B76 D8 00       	mov	m0, x
2290   0B78 60          	clrc
2291   0B79 84 00       	adc	a, m0
2292   0B7B FD          	mov	y, a
2293   0B7C AD 70       	cmp	y, #70h			; <7 : single param
2294   0B7E 90 27       	bcc	_cpcm_single		;
2295   0B80             ;-----------------------------------------------------------------------------
2296   0B80             _cpcm_double:				; >=7: double param
2297   0B80             ;-----------------------------------------------------------------------------
2298   0B80 F6 F0 02    	mov	a, !PatternMemory-10h+y
2299   0B83 C4 00       	mov	m0, a
2300   0B85 F4 64       	mov	a, ch_param+x
2301   0B87 68 10       	cmp	a, #10h
2302   0B89 90 09       	bcc	_cpcmd_h_clr
2303   0B8B             
2304   0B8B 2D          	push	a
2305   0B8C             
2306   0B8C 38 0F 00    	and	m0, #0Fh
2307   0B8F 04 00       	or	a, m0
2308   0B91 C4 00       	mov	m0, a
2309   0B93             
2310   0B93 AE          	pop	a
2311   0B94             
2312   0B94             _cpcmd_h_clr:
2313   0B94 28 0F       	and	a, #0Fh
2314   0B96 F0 07       	beq	_cpcmd_l_clr
2315   0B98 38 F0 00    	and	m0, #0F0h
2316   0B9B 04 00       	or	a, m0
2317   0B9D C4 00       	mov	m0, a
2318   0B9F             
2319   0B9F             _cpcmd_l_clr:
2320   0B9F E4 00       	mov	a, m0
2321   0BA1 D4 64       	mov	ch_param+x, a
2322   0BA3 D6 F0 02    	mov	!PatternMemory-10h+y, a
2323   0BA6 6F          	ret
2324   0BA7             ;-----------------------------------------------------------------------------
2325   0BA7             _cpcm_single:
2326   0BA7             ;-----------------------------------------------------------------------------
2327   0BA7 F4 64       	mov	a, ch_param+x
2328   0BA9 F0 04       	beq	_cpcms_clear
2329   0BAB D6 F0 02    	mov	!PatternMemory-10h+y, a
2330   0BAE 6F          	ret
2331   0BAF             
2332   0BAF             _cpcms_clear:
2333   0BAF F6 F0 02    	mov	a, !PatternMemory-10h+y
2334   0BB2 D4 64       	mov	ch_param+x, a	
2335   0BB4             _cpc_quit:
2336   0BB4 6F          	ret
2337   0BB5             
2338   0BB5             ;********************************************************
2339   0BB5             Channel_ProcessCommand:
2340   0BB5             ;********************************************************
2341   0BB5 F4 5C       	mov	a, ch_command+x		; exit if cmd = 0 
2342   0BB7 F0 FB       	beq	_cpc_quit		;
2343   0BB9             
2344   0BB9 78 00 12    	cmp	mod_tick, #0		; process MEMORY on t0
2345   0BBC D0 03       	bne	_cpc_nott0		;
2346   0BBE 3F 6F 0B    	call	Channel_ProcessCommandMemory
2347   0BC1             
2348   0BC1             _cpc_nott0:
2349   0BC1 FB 5C       	mov	y, ch_command+x		; setup jump address
2350   0BC3 F6 D5 0B    	mov	a, !CMD_JUMPTABLE_L-1+y	;
2351   0BC6 C5 D4 0B    	mov	!cpc_jump+1, a		;
2352   0BC9 F6 EF 0B    	mov	a, !CMD_JUMPTABLE_H-1+y	;
2353   0BCC C5 D5 0B    	mov	!cpc_jump+2, a		;
2354   0BCF             
2355   0BCF F4 64       	mov	a, ch_param+x		; preload data
2356   0BD1 EB 12       	mov	y, mod_tick		;
2357   0BD3             
2358   0BD3             	;-------------------------------
2359   0BD3             	; a = param
2360   0BD3             	; y = tick
2361   0BD3             	; Z = tick=0
2362   0BD3             	;-------------------------------
2363   0BD3             	
2364   0BD3             cpc_jump:
2365   0BD3 5F 11 00    	jmp	0011h
2366   0BD6             	
2367   0BD6             ; note: tasm has some kind of bug that removes the 16th character
2368   0BD6             ; in macro args (...?)
2369   0BD6             ;-----------------------------------------------------------------------------
2370   0BD6             CMD_JUMPTABLE_L:
2371   0BD6             ;-----------------------------------------------------------------------------
2372   0BD6 0A          	.byte	LBYTE(Command_SetSpeed)			; Axx
2373   0BD7 13          	.byte	LBYTE(Command_SetPositXion)		; Bxx
2374   0BD8 1B          	.byte	LBYTE(Command_SetSR)			; Cxx disable pattern break cmd
2375   0BD9 29          	.byte	LBYTE(Command_VolumeSlXide)		; Dxy
2376   0BDA 37          	.byte	LBYTE(Command_PitchSliXdeDown)		; Exy
2377   0BDB 52          	.byte	LBYTE(Command_PitchSliXdeUp)		; Fxy
2378   0BDC 6D          	.byte	LBYTE(Command_GlissandXo)		; Gxx
2379   0BDD B5          	.byte	LBYTE(Command_Vibrato)			; Hxy
2380   0BDE 2C          	.byte	LBYTE(Command_EchoFeedXback)		; Ixx was Tremor
2381   0BDF 36          	.byte	LBYTE(Command_Arpeggio)			; Jxy
2382   0BE0 22          	.byte	LBYTE(Command_VolumeSlXideVibrato)	; Kxy
2383   0BE1 6A          	.byte	LBYTE(Command_VolumeSlXideGlissando)	; Lxx
2384   0BE2 6A          	.byte	LBYTE(Command_SetAD)			; Mxx was Command_SetChannXelVolume
2385   0BE3 BC          	.byte	LBYTE(Command_NoiseSetXtings)		; Nxx
2386   0BE4 E2          	.byte	LBYTE(Command_EVOLMinMXax)		; Oxx was Command_SampleOfXfset
2387   0BE5 F9          	.byte	LBYTE(Command_PanningSXlide)		; Pxy
2388   0BE6 08          	.byte	LBYTE(Command_RetriggeXrNote)		; Qxy
2389   0BE7 AF          	.byte	LBYTE(Command_Tremolo)			; Rxy
2390   0BE8 D5          	.byte	LBYTE(Command_Extended)			; Sxy
2391   0BE9 0D          	.byte	LBYTE(Command_Tempo)			; Txy
2392   0BEA 38          	.byte	LBYTE(Command_SetFilteXrSpeed)		; Uxx was Command_FineVibrXato
2393   0BEB 3D          	.byte	LBYTE(Command_MasterVoXlume)		; Vxx was Command_SetGlobaXlVolume
2394   0BEC 1A          	.byte	LBYTE(SCommand_Null)			; Wxx was Command_GlobalVoXlumeSlide
2395   0BED 4C          	.byte	LBYTE(Command_SetPanniXng)		; Xxx Command_SetPanniXng
2396   0BEE 5E          	.byte	LBYTE(Command_EchoVoluXme)		; Yxx was Command_PanbrellXo
2397   0BEF 88          	.byte	LBYTE(Command_SetParamXeter)		; Zxx
2398   0BF0             ;-----------------------------------------------------------------------------
2399   0BF0             CMD_JUMPTABLE_H:
2400   0BF0             ;-----------------------------------------------------------------------------
2401   0BF0 0C          	.byte	HBYTE(Command_SetSpeed)			; Axx
2402   0BF1 0C          	.byte	HBYTE(Command_SetPositXion)		; Bxx
2403   0BF2 0C          	.byte	HBYTE(Command_SetSR)			; Cxx
2404   0BF3 0C          	.byte	HBYTE(Command_VolumeSlXide)		; Dxy
2405   0BF4 0C          	.byte	HBYTE(Command_PitchSliXdeDown)		; Exy
2406   0BF5 0C          	.byte	HBYTE(Command_PitchSliXdeUp)		; Fxy
2407   0BF6 0C          	.byte	HBYTE(Command_GlissandXo)		; Gxx
2408   0BF7 0C          	.byte	HBYTE(Command_Vibrato)			; Hxy
2409   0BF8 0E          	.byte	HBYTE(Command_EchoFeedXback)		; Ixx
2410   0BF9 0E          	.byte	HBYTE(Command_Arpeggio)			; Jxy
2411   0BFA 0C          	.byte	HBYTE(Command_VolumeSlXideVibrato)	; Kxy
2412   0BFB 0C          	.byte	HBYTE(Command_VolumeSlXideGlissando)	; Lxx
2413   0BFC 0E          	.byte	HBYTE(Command_SetAD)			; Mxx Command_SetChannXelVolume
2414   0BFD 0E          	.byte	HBYTE(Command_NoiseSetXtings)		; Nxx
2415   0BFE 0E          	.byte	HBYTE(Command_EVOLMinMXax)		; Oxx
2416   0BFF 0E          	.byte	HBYTE(Command_PanningSXlide)		; Pxy
2417   0C00 0F          	.byte	HBYTE(Command_RetriggeXrNote)		; Qxy
2418   0C01 0C          	.byte	HBYTE(Command_Tremolo)			; Rxy
2419   0C02 0F          	.byte	HBYTE(Command_Extended)			; Sxy
2420   0C03 12          	.byte	HBYTE(Command_Tempo)			; Txy
2421   0C04 12          	.byte	HBYTE(Command_SetFilteXrSpeed)		; Uxx
2422   0C05 12          	.byte	HBYTE(Command_MasterVoXlume)		; Vxx was Command_SetGlobaXlVolume
2423   0C06 10          	.byte	HBYTE(SCommand_Null)			; Wxx was Command_GlobalVoXlumeSlide
2424   0C07 12          	.byte	HBYTE(Command_SetPanniXng)		; Xxx
2425   0C08 12          	.byte	HBYTE(Command_EchoVoluXme)		; Yxx
2426   0C09 12          	.byte	HBYTE(Command_SetParamXeter)		; Zxx
2427   0C0A             
2428   0C0A             ;=======================================================================
2429   0C0A             Command_SetSpeed:				; axx	9 bytes
2430   0C0A             ;=======================================================================
2431   0C0A D0 06       	bne	cmd_exit1			;on tick0:
2432   0C0C 68 00       	cmp	a, #0				; if param != 0
2433   0C0E F0 02       	beq	cmd_exit1			; mod_speed = param
2434   0C10 C4 10       	mov	mod_speed, a			;
2435   0C12             cmd_exit1:					;
2436   0C12 6F          	ret	
2437   0C13             ;=======================================================================
2438   0C13             Command_SetPosition:				; bxx
2439   0C13             ;=======================================================================
2440   0C13 D0 FD       	bne	cmd_exit1			;on tick0:
2441   0C15             ;=======================================================================
2442   0C15             DoSetPosition:
2443   0C15             ;=======================================================================
2444   0C15 C4 1A       	mov	pattjump_index, a		; set jump index
2445   0C17 18 10 E1    	or	mod_special, #MS_PATTERNJUMP	;
2446   0C1A 6F          	ret					;
2447   0C1B             ;=======================================================================
2448   0C1B             ;Command_PatternBreak:				; cxx
2449   0C1B             ;=======================================================================
2450   0C1B             	;ret
2451   0C1B             ;=======================================================================
2452   0C1B             Command_SetSR:					; cxx
2453   0C1B             ;=======================================================================
2454   0C1B C8 03       	cmp	x, #MAX_ADSR_CHANNELS
2455   0C1D B0 F3       	bcs	cmd_exit1
2456   0C1F D4 B7       	mov	ch_sr+x, a
2457   0C21 6F          	ret
2458   0C22             ;=======================================================================
2459   0C22             Command_VolumeSlideVibrato:			; kxy
2460   0C22             ;=======================================================================
2461   0C22 3F B5 0C    	call	Command_Vibrato	
2462   0C25             ;=======================================================================
2463   0C25             Setup_VolumeSlide:
2464   0C25             ;=======================================================================
2465   0C25 F4 64       	mov	a, ch_param+x
2466   0C27 EB 12       	mov	y, mod_tick
2467   0C29             ;=======================================================================
2468   0C29             Command_VolumeSlide:				; dxy
2469   0C29             ;=======================================================================
2470   0C29 FA BD 00    	mov	m0, t_volume			; slide volume
2471   0C2C 8F 40 01    	mov	m0+1, #DEFAULT_VOL_SAT		;
2472   0C2F             						;
2473   0C2F 3F A2 12    	call	DoVolumeSlide			;
2474   0C32             						;
2475   0C32 C4 BD       	mov	t_volume, a			;
2476   0C34 D4 2C       	mov	ch_volume+x, a			;
2477   0C36 6F          	ret					;
2478   0C37             ;=======================================================================
2479   0C37             Command_PitchSlideDown:
2480   0C37             ;=======================================================================
2481   0C37 3F 9C 0F    	call	PitchSlide_Load			; m0 = slide amount
2482   0C3A             						;
2483   0C3A BA BF       	movw	ya, t_pitch			; pitch -= m0
2484   0C3C 9A 00       	subw	ya, m0				;
2485   0C3E 30 07       	bmi	_exx_zero			; saturate lower to 0
2486   0C40 DA BF       _ps:	movw	t_pitch, ya			;
2487   0C42 D4 1C       	mov	ch_pitch_l+x, a			;
2488   0C44 DB 24       	mov	ch_pitch_h+x, y			;
2489   0C46 6F          	ret					;
2490   0C47             ;---------------------------------------------------------------------
2491   0C47             _exx_zero:
2492   0C47             ;---------------------------------------------------------------------
2493   0C47 E8 00       	mov	a, #0				; zero pitch
2494   0C49 8D 00       	mov	y, #0				;
2495   0C4B DA BF       	movw	t_pitch, ya			;
2496   0C4D D4 1C       	mov	ch_pitch_l+x, a			;
2497   0C4F D4 24       	mov	ch_pitch_h+x, a			;
2498   0C51 6F          	ret					;
2499   0C52             ;=======================================================================
2500   0C52             Command_PitchSlideUp:
2501   0C52             ;=======================================================================
2502   0C52 3F 9C 0F    	call	PitchSlide_Load			; m0 = slide amount
2503   0C55 BA BF       	movw	ya, t_pitch			;
2504   0C57 7A 00       	addw	ya, m0				;
2505   0C59 AD 1A       	cmp	y, #01Ah			;
2506   0C5B B0 02       	bcs	_fxx_max			; clamp upper bound to 1A00H
2507   0C5D 2F E1       	bra	_ps
2508   0C5F             ;-----------------------------------------------------------------------------
2509   0C5F             _fxx_max:
2510   0C5F             ;-----------------------------------------------------------------------------
2511   0C5F 8D 1A       	mov	y, #01Ah			; max pitch
2512   0C61 E8 00       	mov	a, #0				;
2513   0C63 DA BF       	movw	t_pitch, ya			;
2514   0C65 D4 1C       	mov	ch_pitch_l+x, a			;
2515   0C67 DB 24       	mov	ch_pitch_h+x, y			;
2516   0C69 6F          	ret					;
2517   0C6A             ;=======================================================================
2518   0C6A             Command_VolumeSlideGlissando:			; lxx
2519   0C6A             ;=======================================================================
2520   0C6A 18 20 E0    	or	mod_mode, #MO_GXXVOL		;
2521   0C6D             ;=======================================================================
2522   0C6D             Command_Glissando:				; gxx
2523   0C6D             ;=======================================================================
2524   0C6D F0 A3       	beq	cmd_exit1			; on tickn:
2525   0C6F             
2526   0C6F 3F A8 0F    	call	Amult4_M0			; m0 = xx*4 (slide amount)
2527   0C72             
2528   0C72 F4 44       	mov	a, ch_note+x			; m1 = slide target
2529   0C74 8F 00 02    	mov	m1, #0				;
2530   0C77 5C          	lsr	a				;
2531   0C78 6B 02       	ror	m1				;
2532   0C7A 5C          	lsr	a				;
2533   0C7B 6B 02       	ror	m1				;
2534   0C7D C4 03       	mov	m1+1, a				;
2535   0C7F             
2536   0C7F BA BF       	movw	ya, t_pitch			; test slide direction
2537   0C81 5A 02       	cmpw	ya, m1				;
2538   0C83 90 1E       	bcc	_gxx_slideup
2539   0C85             ;-----------------------------------------------
2540   0C85             _gxx_slidedown:
2541   0C85             ;-----------------------------------------------
2542   0C85 9A 00       	subw	ya, m0				; subtract xx*4 from pitch
2543   0C87 30 22       	bmi	_gxx_set			; saturate lower to target pitch
2544   0C89 5A 02       	cmpw	ya, m1				;
2545   0C8B 90 1E       	bcc	_gxx_set			;
2546   0C8D             _gxx_set2:					;
2547   0C8D DA BF       	movw	t_pitch, ya			;
2548   0C8F D4 1C       	mov	ch_pitch_l+x, a			;
2549   0C91 DB 24       	mov	ch_pitch_h+x, y			;
2550   0C93             ;-----------------------------------------------;
2551   0C93 53 E1 03    	bbc2	mod_special, _skip_vibrato	; test MS_GXXVIB
2552   0C96 3F B5 0C    	call	Command_Vibrato			;
2553   0C99             ;-----------------------------------------------
2554   0C99             _skip_vibrato:
2555   0C99             ;-----------------------------------------------
2556   0C99 B3 E0 06    	bbc5    mod_mode, _skip_gxx_vol		; test MO_GXXVOL
2557   0C9C 3F 25 0C    	call	Setup_VolumeSlide		;
2558   0C9F 38 DF E0    	and	mod_mode, #~MO_GXXVOL		;
2559   0CA2             ;-----------------------------------------------;
2560   0CA2             _skip_gxx_vol:
2561   0CA2             ;-----------------------------------------------;
2562   0CA2 6F          	ret					;
2563   0CA3             ;-----------------------------------------------
2564   0CA3             _gxx_slideup:
2565   0CA3             ;-----------------------------------------------
2566   0CA3 7A 00       	addw	ya, m0				; add xx*4 to pitch
2567   0CA5 5A 02       	cmpw	ya, m1				; saturate upper to target pitch
2568   0CA7 B0 02       	bcs	_gxx_set			;
2569   0CA9 2F E2       	bra	_gxx_set2			;
2570   0CAB             ;-----------------------------------------------
2571   0CAB             _gxx_set:					; pitch = target
2572   0CAB             ;-----------------------------------------------
2573   0CAB BA 02       	movw	ya, m1				;
2574   0CAD 2F DE       	bra	_gxx_set2			;
2575   0CAF             
2576   0CAF             ;=======================================================================
2577   0CAF             ;Command_Panbrello:				; yxy
2578   0CAF             ;=======================================================================
2579   0CAF             	;or	mod_special, #MS_PANBRELLO
2580   0CAF             	;bra	_skip_pan_trem_disable
2581   0CAF             ;=======================================================================
2582   0CAF             Command_Tremolo:				; rxy
2583   0CAF             ;=======================================================================
2584   0CAF 18 80 E1    	or	mod_special, #MS_TREMOLO
2585   0CB2 2F 04       	bra	_skip_pan_trem_disable
2586   0CB4 6F          fmexit:	ret
2587   0CB5             ;=======================================================================
2588   0CB5             Command_Vibrato:				; hxy
2589   0CB5             ;=======================================================================
2590   0CB5 38 7F E1    	and	mod_special, #~MS_TREMOLO	;
2591   0CB8             ;-----------------------------------------------
2592   0CB8             _skip_pan_trem_disable:
2593   0CB8             ;-----------------------------------------------
2594   0CB8 E8 70       	mov	a, #70h				;
2595   0CBA D8 00       	mov	m0, x				; m0=channel
2596   0CBC 60          	clrc					;
2597   0CBD 84 00       	adc	a, m0				; 70h+channel
2598   0CBF FD          	mov	y, a				;
2599   0CC0 F6 F0 02    	mov	a, !PatternMemory-10h+y		;
2600   0CC3             						;
2601   0CC3 C4 00       	mov	m0, a				; m0=speed|depth
2602   0CC5 C4 05       	mov	m2+1, a				; 
2603   0CC7 38 0F 00    	and	m0, #0Fh			; m0=depth
2604   0CCA             						;
2605   0CCA F4 9C       	mov	a, ch_env_vib+x			;
2606   0CCC 68 08       	cmp	a, #08h				;
2607   0CCE 90 59       	bcc	_skip_fm			;
2608   0CD0             ;-----------------------------------------------
2609   0CD0 FA 00 DD    	mov	fm_mod_freq, m0			; carrier frequency
2610   0CD3 FA 05 D9    	mov	fm_car_freq, m2+1		;
2611   0CD6 38 F0 D9    	and	fm_car_freq, #0F0h		; modulation frequency
2612   0CD9 33 E1 4D    	bbc1	mod_special, _skip_fm		; test MS_FM_ACTIVE
2613   0CDC             ;-----------------------------------------------------------------------------
2614   0CDC             _fm_synth:					; fm synth by psychopathicteen
2615   0CDC             ;-----------------------------------------------------------------------------
2616   0CDC 8F 02 01    	mov	m0+1, #02h			;
2617   0CDF EB D8       	mov	y, fm_blocks			; setup index
2618   0CE1 AD 24       	cmp	y, #FM_WAVEFORM_END-FM_WAVEFORM	;
2619   0CE3 90 02       	bcc	_no_index_reset
2620   0CE5             ;-----------------------------------------------------------------------
2621   0CE5 8D 01       	mov	y, #01h				; reset index
2622   0CE7             ;-----------------------------------------------------------------------
2623   0CE7             _no_index_reset:
2624   0CE7             ;-----------------------------------------------------------------------
2625   0CE7 18 02 E7    	or	special, #SF_FMWAVEFORM		;
2626   0CEA             ;-----------------------------------------------------------------------
2627   0CEA             _make_brr:
2628   0CEA             ;-----------------------------------------------------------------------------
2629   0CEA 8F 08 03    	mov	m1+1, #08h			; number of samples per block
2630   0CED             ;-----------------------------------------------------------------------------
2631   0CED             _make_block:
2632   0CED             ;-----------------------------------------------------------------------------
2633   0CED CB 04       	mov	m2, y				; wavetable index
2634   0CEF 3F 05 0E    	call	_add_mod_freq			;
2635   0CF2 89 D9 DA    	adc	fm_car_phase, fm_car_freq	; add carrier frequency to carrier
2636   0CF5 DD          	mov	a, y				; phase
2637   0CF6 60          	clrc					;
2638   0CF7 84 DA       	adc	a, fm_car_phase			; take the carrier phase and add
2639   0CF9 FD          	mov	y, a				; the current modulation height
2640   0CFA 3F 39 0D    	call	_get_waveform			;
2641   0CFD C4 DF       	mov	fm_wave, a			; store current carrier wave
2642   0CFF 3F 05 0E    	call	_add_mod_freq			;
2643   0D02 89 DD DE    	adc	fm_mod_phase, fm_mod_freq	; add mod freq to mod phase
2644   0D05 DD          	mov	a, y				;
2645   0D06 60          	clrc					;
2646   0D07 84 DA       	adc	a, fm_car_phase			; take the carrier phase and add
2647   0D09 FD          	mov	y, a				; the current modulation height
2648   0D0A E4 DF       	mov	a, fm_wave			;
2649   0D0C 9F          	xcn	a				; grab previous sample, swap nibbles
2650   0D0D 3F 39 0D    	call	_get_waveform			;
2651   0D10 14 DF       	or	a, fm_wave+x			; two samples in one byte
2652   0D12 EB 04       	mov	y, m2				; get index
2653   0D14 D6 34 1A    	mov	!FM_WAVEFORM+y, a		;
2654   0D17 FC          	inc	y				;
2655   0D18 8B 03       	dec	m1+1				; decrease sample count
2656   0D1A D0 D1       	bne	_make_block			;
2657   0D1C             ;-----------------------------------------------;
2658   0D1C FC          	inc	y				; skip header
2659   0D1D 8B 01       	dec	m0+1				; decrease block count
2660   0D1F D0 C9       	bne	_make_brr			;
2661   0D21             ;-----------------------------------------------;
2662   0D21 CB D8       	mov	fm_blocks, y			; store brr index
2663   0D23 38 FD E7    	and	special, #~SF_FMWAVEFORM	;
2664   0D26 73 E1 8B    	bbc3	mod_special, fmexit		; test MS_FM_VIBRATO
2665   0D29             ;-----------------------------------------------------------------------------
2666   0D29             _skip_fm:					;
2667   0D29             ;-----------------------------------------------------------------------------
2668   0D29 E4 05       	mov	a, m2+1				;
2669   0D2B 5C          	lsr	a				; cmem += x*4
2670   0D2C 5C          	lsr	a				;
2671   0D2D 28 3C       	and	a, #111100b			;
2672   0D2F 60          	clrc					;
2673   0D30 94 3C       	adc	a, ch_cmem+x			;
2674   0D32 D4 3C       	mov	ch_cmem+x, a			;
2675   0D34             						;
2676   0D34 FD          	mov	y, a				; a = sine[cmem]
2677   0D35             						;
2678   0D35 F4 A4       	mov	a, ch_vib_wav+x			;
2679   0D37 C4 02       	mov	m1, a				; m1 = waveform value
2680   0D39             ;-----------------------------------------------;
2681   0D39             _get_waveform:					;
2682   0D39             ;-----------------------------------------------;
2683   0D39 F4 9C       	mov	a, ch_env_vib+x			; a = vibrato waveform type
2684   0D3B             ;-----------------------------------------------
2685   0D3B             _hxx_cmp:
2686   0D3B             ;-----------------------------------------------
2687   0D3B 68 08       	cmp	a, #8
2688   0D3D B0 5B       	bcs	_hxx_sub8
2689   0D3F 68 01       	cmp	a, #1
2690   0D41 F0 1D       	beq	_hxx_ramp_down
2691   0D43 68 02       	cmp	a, #2
2692   0D45 F0 27       	beq	_hxx_sq
2693   0D47 68 03       	cmp	a, #3
2694   0D49 F0 29       	beq	_hxx_tri_sq
2695   0D4B 68 04       	cmp	a, #4
2696   0D4D F0 29       	beq	_hxx_tri
2697   0D4F 68 05       	cmp	a, #5
2698   0D51 F0 4F       	beq	_hxx_ramp_up
2699   0D53 68 06       	cmp	a, #6
2700   0D55 F0 2B       	beq	_hxx_sq2
2701   0D57 68 07       	cmp	a, #7
2702   0D59 F0 33       	beq	_hxx_sq3
2703   0D5B             ;-----------------------------------------------
2704   0D5B             _hxx_sine:					; s30
2705   0D5B             ;-----------------------------------------------
2706   0D5B 3F 13 0E    	call	Sine
2707   0D5E 2F 56       	bra	_hxx_bpl
2708   0D60             ;-----------------------------------------------
2709   0D60             _hxx_ramp_down:					; s31
2710   0D60             ;-----------------------------------------------
2711   0D60 AD 00       	cmp	y, #0
2712   0D62 D0 03       	bne	_hxx_chk_ramp
2713   0D64             ;-----------------------------------------------
2714   0D64             _hxx_res_ramp:
2715   0D64             ;-----------------------------------------------
2716   0D64 8F 40 02    	mov	m1, #DEFAULT_RAMP_POS
2717   0D67             ;-----------------------------------------------
2718   0D67             _hxx_chk_ramp:
2719   0D67             ;-----------------------------------------------
2720   0D67 78 BF 02    	cmp	m1, #DEFAULT_RAMP_NEG
2721   0D6A F0 F8       	beq	_hxx_res_ramp
2722   0D6C             ;-----------------------------------------------
2723   0D6C             _hxx_dec_ramp:
2724   0D6C             ;-----------------------------------------------
2725   0D6C 2F 44       	bra	_dec_m1_hxx_bpl
2726   0D6E             ;-----------------------------------------------
2727   0D6E             _hxx_sq:					; s32
2728   0D6E             ;-----------------------------------------------
2729   0D6E AD 80       	cmp	y, #080h
2730   0D70 B0 18       	bcs	_hxx_neg_sq
2731   0D72 2F 22       	bra	_hxx_pos_sq
2732   0D74             ;-----------------------------------------------
2733   0D74             _hxx_tri_sq:					; s33
2734   0D74             ;-----------------------------------------------
2735   0D74 AD 80       	cmp	y, #080h
2736   0D76 B0 1E       	bcs	_hxx_pos_sq
2737   0D78             ;-----------------------------------------------
2738   0D78             _hxx_tri:					; s34
2739   0D78             ;-----------------------------------------------
2740   0D78 AD C0       	cmp	y, #0C0h
2741   0D7A B0 32       	bcs	_inc_m1_hxx_bpl
2742   0D7C AD 40       	cmp	y, #040h
2743   0D7E B0 32       	bcs	_dec_m1_hxx_bpl
2744   0D80 2F 2C       	bra	_inc_m1_hxx_bpl
2745   0D82             ;-----------------------------------------------
2746   0D82             _hxx_sq2:					; s36
2747   0D82             ;-----------------------------------------------
2748   0D82 AD C0       	cmp	y, #0C0h
2749   0D84 B0 10       	bcs	_hxx_pos_sq
2750   0D86 AD 80       	cmp	y, #080h
2751   0D88 B0 28       	bcs	_dec_m1_hxx_bpl
2752   0D8A             ;-----------------------------------------------
2753   0D8A             _hxx_neg_sq:
2754   0D8A             ;-----------------------------------------------
2755   0D8A E8 C7       	mov	a, #DEFAULT_SQ_NEG
2756   0D8C 2F 28       	bra	_hxx_bpl
2757   0D8E             ;-----------------------------------------------
2758   0D8E             _hxx_sq3:
2759   0D8E             ;-----------------------------------------------
2760   0D8E AD 94       	cmp	y, #094h
2761   0D90 B0 F8       	bcs	_hxx_neg_sq
2762   0D92 AD 28       	cmp	y, #028h
2763   0D94 B0 1C       	bcs	_dec_m1_hxx_bpl
2764   0D96             ;-----------------------------------------------
2765   0D96             _hxx_pos_sq:
2766   0D96             ;-----------------------------------------------
2767   0D96 E8 38       	mov	a, #DEFAULT_SQ_POS
2768   0D98 2F 1C       	bra	_hxx_bpl
2769   0D9A             ;-----------------------------------------------
2770   0D9A             _hxx_sub8:
2771   0D9A             ;-----------------------------------------------
2772   0D9A FA DF 02    	mov	m1, fm_wave
2773   0D9D 80                  setc
2774   0D9E A8 08               sbc     a, #08h
2775   0DA0 2F 99               bra     _hxx_cmp
2776   0DA2             ;-----------------------------------------------
2777   0DA2             _hxx_ramp_up:					; s35
2778   0DA2             ;-----------------------------------------------
2779   0DA2 AD 00       	cmp	y, #0
2780   0DA4 D0 03       	bne	_hex_chk_ramp2
2781   0DA6             ;-----------------------------------------------
2782   0DA6             _hex_res_ramp2:
2783   0DA6             ;-----------------------------------------------
2784   0DA6 8F BF 02    	mov	m1, #DEFAULT_RAMP_NEG
2785   0DA9             ;-----------------------------------------------
2786   0DA9             _hex_chk_ramp2:
2787   0DA9             ;-----------------------------------------------
2788   0DA9 78 40 02    	cmp	m1, #DEFAULT_RAMP_POS
2789   0DAC F0 F8       	beq	_hex_res_ramp2
2790   0DAE             ;-----------------------------------------------
2791   0DAE             _inc_m1_hxx_bpl:
2792   0DAE             ;-----------------------------------------------
2793   0DAE AB 02       	inc	m1
2794   0DB0 2F 02       	bra	_hxx_bpl_movm1a
2795   0DB2             ;-----------------------------------------------
2796   0DB2             _dec_m1_hxx_bpl:
2797   0DB2             ;-----------------------------------------------
2798   0DB2 8B 02       	dec	m1
2799   0DB4             ;-----------------------------------------------
2800   0DB4             _hxx_bpl_movm1a:
2801   0DB4             ;-----------------------------------------------
2802   0DB4 E4 02       	mov	a, m1
2803   0DB6             ;-----------------------------------------------
2804   0DB6             _hxx_bpl:
2805   0DB6             ;-----------------------------------------------
2806   0DB6 23 E7 2D    	bbs1	special, _hexit			; test SF_FMWAVEFORM
2807   0DB9 D4 A4       	mov	ch_vib_wav+x, a
2808   0DBB 10 1D       	bpl	_hxx_plus
2809   0DBD             ;-----------------------------------------------
2810   0DBD             _hxx_neg:
2811   0DBD             ;-----------------------------------------------
2812   0DBD 48 FF       	eor	a, #255
2813   0DBF BC          	inc	a
2814   0DC0             
2815   0DC0 3F F8 0D    	call	_hxx_mulya
2816   0DC3 C4 00       	mov	m0, a
2817   0DC5 E3 E1 08    	bbs7	mod_special, _hxx_subw_volume	; MS_TREMOLO
2818   0DC8             	;bbs6   mod_special, _hxx_subw_panning ; MS_PANBRELLO
2819   0DC8             ;-----------------------------------------------
2820   0DC8             _hxx_subw:
2821   0DC8             ;-----------------------------------------------
2822   0DC8 BA BF       	movw	ya, t_pitch
2823   0DCA 9A 00       	subw	ya, m0
2824   0DCC 30 1F       	bmi	_hxx_zero
2825   0DCE 2F 14       	bra	_store_pitch
2826   0DD0             ;-----------------------------------------------
2827   0DD0             _hxx_subw_volume:
2828   0DD0             ;-----------------------------------------------
2829   0DD0 E4 BD       	mov	a, t_volume
2830   0DD2 8D 00       	mov	y, #0
2831   0DD4 9A 00       	subw	ya, m0
2832   0DD6 30 1C       	bmi	_hxx_zvolume
2833   0DD8 2F 0D       	bra	_store_volume
2834   0DDA             ;-----------------------------------------------
2835   0DDA             ;_hxx_subw_panning:
2836   0DDA             ;-----------------------------------------------
2837   0DDA             	;mov	a, t_panning
2838   0DDA             	;mov	y, #0
2839   0DDA             	;subw	ya, m0
2840   0DDA             	;bmi	_hxx_zpanning
2841   0DDA             	;bra	_store_panning
2842   0DDA             ;-----------------------------------------------
2843   0DDA             _hxx_plus:
2844   0DDA             ;-----------------------------------------------
2845   0DDA 3F F8 0D    	call	_hxx_mulya
2846   0DDD EB 01       	mov	y, m0+1
2847   0DDF E3 E1 05    	bbs7	mod_special, _store_volume	; MS_TREMOLO
2848   0DE2             	;bbs6	mod_special, _store_panning	; MS_PANBRELLO
2849   0DE2             _hxx_addw:
2850   0DE2 7A BF       	addw	ya, t_pitch			; warning: might break something on highest note
2851   0DE4             ;-----------------------------------------------
2852   0DE4             _store_pitch:
2853   0DE4             ;-----------------------------------------------
2854   0DE4 DA BF       	movw	t_pitch, ya
2855   0DE6 6F          _hexit:	ret
2856   0DE7             ;-----------------------------------------------
2857   0DE7             _store_volume:
2858   0DE7             ;-----------------------------------------------
2859   0DE7 60          	clrc
2860   0DE8 84 BD       	adc	a, t_volume
2861   0DEA C4 BD       	mov	t_volume, a
2862   0DEC             	;bra	_disable_tremolo
2863   0DEC 6F          	ret
2864   0DED             ;-----------------------------------------------
2865   0DED             ;_store_panning:
2866   0DED             ;-----------------------------------------------
2867   0DED             	;clrc
2868   0DED             	;adc	a, t_panning
2869   0DED             	;mov	t_panning, a
2870   0DED             	;bra	_disable_panbrello
2871   0DED             ;-----------------------------------------------
2872   0DED             _hxx_zero:
2873   0DED             ;-----------------------------------------------
2874   0DED 8F 00 BF    	mov	t_pitch, #0
2875   0DF0 8F 00 C0    	mov	t_pitch+1, #0
2876   0DF3 6F          	ret
2877   0DF4             ;-----------------------------------------------
2878   0DF4             _hxx_zvolume:
2879   0DF4             ;-----------------------------------------------
2880   0DF4 8F 00 BD    	mov	t_volume, #0
2881   0DF7             _disable_tremolo:
2882   0DF7             	;and	mod_special, #~MS_TREMOLO
2883   0DF7 6F          	ret
2884   0DF8             ;-----------------------------------------------
2885   0DF8             ;_hxx_zpanning
2886   0DF8             ;-----------------------------------------------
2887   0DF8             	;mov	t_panning, #0
2888   0DF8             ;_disable_panbrello:
2889   0DF8             	;and	mod_special, #~MS_PANBRELLO
2890   0DF8             	;ret
2891   0DF8             ;-----------------------------------------------
2892   0DF8             _hxx_mulya:
2893   0DF8             ;-----------------------------------------------
2894   0DF8 EB 00       	mov	y, m0
2895   0DFA CF          	mul	ya
2896   0DFB CB 01       	mov	m0+1, y
2897   0DFD 8D 04       	mov	y, #4
2898   0DFF             _hxx_div:
2899   0DFF 4B 01       	lsr	m0+1
2900   0E01 7C          	ror	a
2901   0E02 FE FB       	dbnz	y, _hxx_div
2902   0E04 6F          	ret
2903   0E05             ;-----------------------------------------------------------------------------
2904   0E05             _add_mod_freq:
2905   0E05             ;-----------------------------------------------------------------------------
2906   0E05 60          	clrc					;
2907   0E06 89 DD DE    	adc	fm_mod_phase, fm_mod_freq	; add modulator frequency to phase
2908   0E09 EB DE       	mov	y, fm_mod_phase			; use modulator phase
2909   0E0B 3F 13 0E    	call	Sine				;
2910   0E0E EB DC       	mov	y, fm_mod_amp			;
2911   0E10 CF          	mul	ya				; multiply the sine
2912   0E11 60          	clrc					;
2913   0E12 6F          	ret					;
2914   0E13             ;-----------------------------------------------------------------------------
2915   0E13             Sine:
2916   0E13             ;-----------------------------------------------------------------------------
2917   0E13 AD 80       	cmp	y, #80h				;
2918   0E15 B0 04       	bcs	_sine_neg			;
2919   0E17 F6 58 1A    	mov	a, !IT_FINE_SINE_DATA+y		; copy positive values
2920   0E1A 6F          	ret					;
2921   0E1B             ;-----------------------------------------------------------------------------
2922   0E1B             _sine_neg:
2923   0E1B             ;-----------------------------------------------------------------------------
2924   0E1B DD          	mov	a, y				; IT_FINE_SINE_DATA is only 128
2925   0E1C 60          	clrc					; bytes long, once the end is
2926   0E1D A8 7F       	sbc	a, #127				; reached reset to the start
2927   0E1F FD          	mov	y, a				;
2928   0E20 F6 58 1A    	mov	a, !IT_FINE_SINE_DATA+y		; copy positive values
2929   0E23 48 FF       	eor	a, #0FFh			; ...and make them negative
2930   0E25 BC          	inc	a				;
2931   0E26 6F          	ret
2932   0E27             
2933   0E27             ;=======================================================================
2934   0E27             ;Command_Tremor:					; unimplemented
2935   0E27             ;=======================================================================
2936   0E27             ;	ret
2937   0E27             
2938   0E27             ;-----------------------------------------------------------------------
2939   0E27             ResetEchoFeedback:
2940   0E27             ;-----------------------------------------------------------------------
2941   0E27 E5 10 1B    	mov	a, !MODULE+MOD_EFB
2942   0E2A C4 CB       	mov	evol_fb, a
2943   0E2C             ;=======================================================================
2944   0E2C             Command_EchoFeedback:				; ixx
2945   0E2C             ;=======================================================================
2946   0E2C 68 80       	cmp	a, #80h
2947   0E2E F0 F7       	beq	ResetEchoFeedback
2948   0E30 8F 0D F2    	mov	SPC_DSPA, #DSP_EFB
2949   0E33 C4 F3       	mov	SPC_DSPD, a
2950   0E35 6F          	ret
2951   0E36             ;=============================================================================
2952   0E36             Command_Arpeggio:				; jxy
2953   0E36             ;=============================================================================
2954   0E36 D0 05       	bne	_jxx_other
2955   0E38 E8 00       	mov	a, #0
2956   0E3A D4 3C       	mov	ch_cmem+x, a
2957   0E3C 6F          	ret
2958   0E3D             
2959   0E3D             _jxx_other:
2960   0E3D F4 3C       	mov	a, ch_cmem+x
2961   0E3F BC          	inc	a
2962   0E40 68 03       	cmp	a, #3
2963   0E42 90 02       	bcc	_jxx_less3
2964   0E44 E8 00       	mov	a, #0
2965   0E46             
2966   0E46             _jxx_less3:
2967   0E46 D4 3C       	mov	ch_cmem+x, a
2968   0E48 68 01       	cmp	a, #1
2969   0E4A F0 03       	beq	_jxx_x
2970   0E4C B0 17       	bcs	_jxx_y
2971   0E4E 6F          	ret
2972   0E4F             
2973   0E4F F4 64       _jxx_x:	mov	a, ch_param+x
2974   0E51             
2975   0E51             _jxx_add:
2976   0E51 28 F0       	and	a, #0F0h
2977   0E53 1C          	asl	a
2978   0E54 8F 00 01    	mov	m0+1, #0
2979   0E57 2B 01       	rol	m0+1
2980   0E59 1C          	asl	a
2981   0E5A 2B 01       	rol	m0+1
2982   0E5C C4 00       	mov	m0, a
2983   0E5E BA BF       	movw	ya, t_pitch
2984   0E60 7A 00       	addw	ya, m0
2985   0E62 DA BF       	movw	t_pitch, ya
2986   0E64 6F          	ret
2987   0E65             
2988   0E65             _jxx_y:
2989   0E65 F4 64       	mov	a, ch_param+x
2990   0E67 9F          	xcn	a
2991   0E68 2F E7       	bra	_jxx_add
2992   0E6A             ;=======================================================================
2993   0E6A             ;Command_SetChannelVolume:			; mxx
2994   0E6A             ;=======================================================================
2995   0E6A             	;bne	cmd_exit2			; on tick0:
2996   0E6A             	;cmp	a, #80h				;
2997   0E6A             	;bne	SetChannelVolume		;
2998   0E6A             	;mov	a, !MODULE+MOD_CV+x		;
2999   0E6A             	;cmp	a, #65				;  cvolume = param > 64 ? 64 : param
3000   0E6A             	;bcc	cscv_under65			;
3001   0E6A             	;mov	a, #64				;
3002   0E6A             ;cscv_under65:					;
3003   0E6A             ;SetChannelVolume:
3004   0E6A             	;mov	ch_cvolume+x, a			;
3005   0E6A             ;cmd_exit2:
3006   0E6A             	;ret					;
3007   0E6A             
3008   0E6A             ;=======================================================================
3009   0E6A             Command_SetAD:					; mxx
3010   0E6A             ;=======================================================================
3011   0E6A D0 75       	bne	cmd_exit2			; on tick0
3012   0E6C 68 40       	cmp	a, #40h
3013   0E6E 90 37       	bcc	_set_wt_time
3014   0E70 68 48       	cmp	a, #48h
3015   0E72 90 42       	bcc	_set_wt_min
3016   0E74 68 50       	cmp	a, #50h
3017   0E76 90 38       	bcc	_set_wt_max
3018   0E78 68 70       	cmp	a, #70h
3019   0E7A 90 0B       	bcc	_evol_speed
3020   0E7C 68 7F       	cmp	a, #7fh
3021   0E7E 90 0D       	bcc	_swing_tempo_on_off
3022   0E80             ;-----------------------------------------------;
3023   0E80 C8 03       	cmp	x, #MAX_ADSR_CHANNELS
3024   0E82 B0 5D       	bcs	cmd_exit2
3025   0E84 D4 B4       	mov	ch_ad+x, a
3026   0E86 6F          	ret
3027   0E87             ;-----------------------------------------------;
3028   0E87             _evol_speed:
3029   0E87             ;-----------------------------------------------;
3030   0E87 80          	setc
3031   0E88 A8 50       	sbc	a, #50h
3032   0E8A C4 CE       	mov	evol_time, a
3033   0E8C 6F          	ret
3034   0E8D             ;-----------------------------------------------;
3035   0E8D             _swing_tempo_on_off:
3036   0E8D             ;-----------------------------------------------;
3037   0E8D 80          	setc
3038   0E8E A8 70       	sbc	a, #70h
3039   0E90 68 00       	cmp	a, #0
3040   0E92 F0 0C       	beq	_set_swing_tempo_off
3041   0E94             ;-----------------------------------------------;
3042   0E94             _set_swing_tempo_on:
3043   0E94             ;-----------------------------------------------;
3044   0E94 C4 E8       	mov	swing_tempo_mod, a		;
3045   0E96 18 40 E1    	or	mod_special, #MS_SWINGTEMPO	;
3046   0E99 38 DF E1    	and	mod_special, #~MS_SWINGODD	; always start at 0
3047   0E9C FA 10 11    	mov	mod_speed_bk, mod_speed		; back up speed
3048   0E9F 6F          	ret					;
3049   0EA0             ;-----------------------------------------------;
3050   0EA0             _set_swing_tempo_off:
3051   0EA0             ;-----------------------------------------------;
3052   0EA0 38 BF E1    	and	mod_special, #~MS_SWINGTEMPO	;
3053   0EA3 FA 11 10    	mov	mod_speed, mod_speed_bk		; restore speed
3054   0EA6 6F          	ret					;
3055   0EA7             ;-----------------------------------------------;
3056   0EA7             _set_wt_time:	; 00-3f
3057   0EA7             ;-----------------------------------------------;
3058   0EA7 3F A8 0F    	call	Amult4_M0
3059   0EAA C4 EC       	mov	wt_time, a
3060   0EAC 8F 00 CA    	mov	current_wt_time, #0
3061   0EAF 6F          	ret
3062   0EB0             ;-----------------------------------------------;
3063   0EB0             _set_wt_max:	; 48-4f
3064   0EB0             ;-----------------------------------------------;
3065   0EB0 80          	setc
3066   0EB1 A8 48       	sbc	a, #48h
3067   0EB3 C4 EA       	mov	wt_max, a
3068   0EB5 6F          	ret
3069   0EB6             ;-----------------------------------------------;
3070   0EB6             _set_wt_min:	; 40-47
3071   0EB6             ;-----------------------------------------------;
3072   0EB6 80          	setc	
3073   0EB7 A8 40       	sbc	a, #40h
3074   0EB9 C4 EB       	mov	wt_min, a
3075   0EBB 6F          	ret
3076   0EBC             ;=======================================================================
3077   0EBC             ;Command_ChannelVolumeSlide:			; nxx 15 bytes
3078   0EBC             ;=======================================================================
3079   0EBC             	;mov	a, ch_cvolume+x			; slide channel volume
3080   0EBC             	;mov	m0, a				; 
3081   0EBC             	;mov	m0+1, #64			;
3082   0EBC             	;mov	a, ch_param+x			;
3083   0EBC             	;call	DoVolumeSlide			;
3084   0EBC             	;mov	ch_cvolume+x, a			;
3085   0EBC             	;ret					;
3086   0EBC             ;=======================================================================
3087   0EBC             Command_NoiseSettings:				; nxx
3088   0EBC             ;=======================================================================
3089   0EBC 68 20       	cmp	a, #20h				; 00h-1Fh min noise freq
3090   0EBE 90 19       	bcc	_set_min_noise_value		;
3091   0EC0 68 40       	cmp	a, #40h				; 20h-3Fh max noise freq
3092   0EC2 90 18       	bcc	_set_max_noise_value		;
3093   0EC4 68 80       	cmp	a, #80h
3094   0EC6 B0 19       	bcs	cmd_exit2
3095   0EC8             
3096   0EC8 80          	setc					; 40-7fh speed
3097   0EC9 A8 40       	sbc	a, #40h
3098   0ECB 68 00       	cmp	a, #0
3099   0ECD F0 06       	beq	_disable_noise_sweep
3100   0ECF 3F A8 0F    	call	Amult4_M0
3101   0ED2 C4 E5       	mov	noise_time, a
3102   0ED4 6F          	ret
3103   0ED5             
3104   0ED5             _disable_noise_sweep:
3105   0ED5 38 DF E7    	and	special, #~SF_NOISESWEEP
3106   0ED8 6F          	ret
3107   0ED9             
3108   0ED9             _set_min_noise_value:
3109   0ED9 C4 E3       	mov	noise_sweep_endmin, a
3110   0EDB 6F          	ret
3111   0EDC             _set_max_noise_value:
3112   0EDC 80          	setc
3113   0EDD A8 20       	sbc	a, #20h
3114   0EDF C4 E2       	mov	noise_sweep_endmax, a
3115   0EE1             cmd_exit2:
3116   0EE1 6F          	ret
3117   0EE2             
3118   0EE2             ;=======================================================================
3119   0EE2             ;Command_SampleOffset:				; oxx
3120   0EE2             ;=======================================================================
3121   0EE2             	;bne	cmd_exit2			; on tick0:
3122   0EE2             	;mov	t_sampoff, a			;   set sampoff data
3123   0EE2             	;ret					;
3124   0EE2             
3125   0EE2             ;=======================================================================
3126   0EE2             Command_EVOLMinMax:				; oxx
3127   0EE2             ;=======================================================================
3128   0EE2 68 80       	cmp	a, #80h
3129   0EE4 F0 FB       	beq	cmd_exit2
3130   0EE6 B0 07       	bcs	_set_evol_max
3131   0EE8 64 CC       	cmp	a, evol_max
3132   0EEA B0 F5       	bcs	cmd_exit2
3133   0EEC C4 CD       	mov	evol_min, a
3134   0EEE 6F          	ret
3135   0EEF             ;-----------------------------------------------;
3136   0EEF             _set_evol_max:
3137   0EEF             ;-----------------------------------------------;
3138   0EEF 80          	setc
3139   0EF0 A8 80       	sbc	a, #80h
3140   0EF2 64 CD       	cmp	a, evol_min
3141   0EF4 90 EB       	bcc	cmd_exit2
3142   0EF6 C4 CC       	mov	evol_max, a
3143   0EF8 6F          	ret
3144   0EF9             
3145   0EF9             ;=======================================================================
3146   0EF9             Command_PanningSlide:				; pxy
3147   0EF9             ;=======================================================================
3148   0EF9 9F          	xcn	a
3149   0EFA FA BE 00    	mov	m0, t_panning			; slide panning
3150   0EFD 8F 40 01    	mov	m0+1, #64			;
3151   0F00 3F A2 12    	call	DoVolumeSlide			;
3152   0F03 C4 BE       	mov	t_panning, a			;
3153   0F05 D4 34       	mov	ch_panning+x, a			;
3154   0F07 6F          	ret					;
3155   0F08             ;=============================================================================
3156   0F08             Command_RetriggerNote:				; qxy
3157   0F08             ;=============================================================================
3158   0F08 28 0F       	and	a, #0Fh				; m0 = y == 0 ? 1 : x
3159   0F0A D0 01       	bne	_crn_x1				;
3160   0F0C BC          	inc	a				;
3161   0F0D             _crn_x1:					;	
3162   0F0D C4 00       	mov	m0, a				;
3163   0F0F             
3164   0F0F F4 3C       	mov	a, ch_cmem+x			;if cmem is 0:
3165   0F11 D0 05       	bne	_crn_cmem_n0			;  cmem = m0
3166   0F13 E4 00       	mov	a, m0				;
3167   0F15             _crn_count_ret:
3168   0F15 D4 3C       	mov	ch_cmem+x, a			;
3169   0F17 6F          	ret					;	
3170   0F18             _crn_cmem_n0:					;else:
3171   0F18 9C          	dec	a				; dec cmem until 0
3172   0F19 D0 FA       	bne	_crn_count_ret			;
3173   0F1B             						;RETRIGGER NOTE:
3174   0F1B E4 00       	mov	a, m0				; cmem = m0
3175   0F1D D4 3C       	mov	ch_cmem+x, a			;
3176   0F1F             	;----------------------------------------
3177   0F1F             	; affect volume
3178   0F1F             	;----------------------------------------
3179   0F1F F4 64       	mov	a, ch_param+x
3180   0F21 9F          	xcn	a
3181   0F22 28 0F       	and	a, #0Fh
3182   0F24 C4 02       	mov	m1, a
3183   0F26 1C          	asl	a
3184   0F27 4D          	push	x
3185   0F28 5D          	mov	x, a
3186   0F29 E4 BD       	mov	a, t_volume
3187   0F2B 60          	clrc
3188   0F2C 1F 2F 0F    	jmp	[RNVTABLE+x]
3189   0F2F             ;-----------------------------------------------------------------------------
3190   0F2F             RNVTABLE:
3191   0F2F             ;-----------------------------------------------------------------------------
3192   0F2F 690F4F0F520F	.word	rnv_0, rnv_1, rnv_2, rnv_3, rnv_4, rnv_5, rnv_6, rnv_7
3192   0F35 560F5A0F5E0F620F680F
3193   0F3F 690F6B0F6E0F	.word	rnv_8, rnv_9, rnv_A, rnv_B, rnv_C, rnv_D, rnv_E, rnv_F
3193   0F45 720F760F7A0F7E0F840F
3194   0F4F             ;-----------------------------------------------------------------------------
3195   0F4F 9C          rnv_1:	dec	a
3196   0F50 2F 35       	bra	_rnv_sat0
3197   0F52 A8 01       rnv_2:	sbc	a, #2-1
3198   0F54 2F 31       	bra	_rnv_sat0
3199   0F56 A8 03       rnv_3:	sbc	a, #4-1
3200   0F58 2F 2D       	bra	_rnv_sat0
3201   0F5A A8 07       rnv_4:	sbc	a, #8-1
3202   0F5C 2F 29       	bra	_rnv_sat0
3203   0F5E A8 0F       rnv_5:	sbc	a, #16-1
3204   0F60 2F 25       	bra	_rnv_sat0
3205   0F62 8D AA       rnv_6:	mov	y, #170
3206   0F64 CF          	mul	ya
3207   0F65 DD          	mov	a, y
3208   0F66 2F 2B       	bra	_rnv_set
3209   0F68 5C          rnv_7:	lsr	a
3210   0F69             rnv_8:
3211   0F69 2F 28       rnv_0:	bra	_rnv_set
3212   0F6B BC          rnv_9:	inc	a
3213   0F6C 2F 1F       	bra	_rnv_sat64
3214   0F6E 88 02       rnv_A:	adc	a, #2
3215   0F70 2F 1B       	bra	_rnv_sat64
3216   0F72 88 04       rnv_B:	adc	a, #4
3217   0F74 2F 17       	bra	_rnv_sat64
3218   0F76 88 08       rnv_C:	adc	a, #8
3219   0F78 2F 13       	bra	_rnv_sat64
3220   0F7A 88 10       rnv_D:	adc	a, #16
3221   0F7C 2F 0F       	bra	_rnv_sat64
3222   0F7E 8D 03       rnv_E:	mov	y, #3
3223   0F80 CF          	mul	ya
3224   0F81 5C          	lsr	a
3225   0F82 2F 09       	bra	_rnv_sat64
3226   0F84 1C          rnv_F:	asl	a
3227   0F85 2F 06       	bra	_rnv_sat64
3228   0F87             
3229   0F87             _rnv_sat0:
3230   0F87 10 0A       	bpl	_rnv_set
3231   0F89 E8 00       	mov	a, #0
3232   0F8B 2F 06       	bra	_rnv_set
3233   0F8D             _rnv_sat64:
3234   0F8D 68 41       	cmp	a, #65
3235   0F8F 90 02       	bcc	_rnv_set
3236   0F91 E8 40       	mov	a, #64
3237   0F93             _rnv_set:
3238   0F93 CE          	pop	x
3239   0F94 C4 BD       	mov	t_volume, a
3240   0F96 D4 2C       	mov	ch_volume+x, a
3241   0F98 18 80 C1    	or	t_flags, #TF_START
3242   0F9B             
3243   0F9B 6F          	ret
3244   0F9C             ;=======================================================================
3245   0F9C             ; a = param
3246   0F9C             ; y = tick
3247   0F9C             ; return m0:word = slide amount
3248   0F9C             ;=======================================================================
3249   0F9C             PitchSlide_Load:
3250   0F9C             ;=======================================================================
3251   0F9C 68 F0       	cmp	a, #0F0h			; Fx: fine slide
3252   0F9E B0 14       	bcs	_psl_fine			;
3253   0FA0 68 E0       	cmp	a, #0E0h			; Ex: extra fine slide
3254   0FA2 B0 1E       	bcs	_psl_exfine			;
3255   0FA4             ;-----------------------------------------------------------------------------
3256   0FA4             _psl_normal:
3257   0FA4             ;-----------------------------------------------------------------------------
3258   0FA4 AD 00       	cmp	y, #0				; no slide on tick0
3259   0FA6 F0 26       	beq	_psl_zero			;
3260   0FA8             ;=======================================================================
3261   0FA8             Amult4_M0:
3262   0FA8             ;=======================================================================
3263   0FA8 8F 00 01    	mov	m0+1, #0			; m0 = a*4
3264   0FAB 1C          	asl	a				;	
3265   0FAC 2B 01       	rol	m0+1				;
3266   0FAE 1C          	asl	a				;
3267   0FAF 2B 01       	rol	m0+1				;
3268   0FB1 C4 00       	mov	m0, a				;
3269   0FB3 6F          	ret					;
3270   0FB4             ;-----------------------------------------------------------------------
3271   0FB4             _psl_fine:
3272   0FB4             ;-----------------------------------------------------------------------
3273   0FB4 AD 00       	cmp	y, #0				; no slide on not tick0
3274   0FB6 D0 16       	bne	_psl_zero			;
3275   0FB8 8F 00 01    	mov	m0+1, #0			; m0 = y*4
3276   0FBB 28 0F       	and	a, #0Fh				;	
3277   0FBD 1C          	asl	a				;
3278   0FBE 1C          	asl	a				;
3279   0FBF C4 00       	mov	m0, a				;
3280   0FC1 6F          	ret					;
3281   0FC2             ;-----------------------------------------------------------------------
3282   0FC2             _psl_exfine:
3283   0FC2             ;-----------------------------------------------------------------------
3284   0FC2 AD 00       	cmp	y, #0				; no slide on not tick0
3285   0FC4 D0 08       	bne	_psl_zero			;
3286   0FC6 8F 00 01    	mov	m0+1, #0			; m0 = y
3287   0FC9 28 0F       	and	a, #0Fh				;	
3288   0FCB C4 00       	mov	m0, a				;
3289   0FCD 6F          	ret					;
3290   0FCE             ;-----------------------------------------------------------------------------
3291   0FCE             _psl_zero:
3292   0FCE             ;-----------------------------------------------------------------------------
3293   0FCE 8F 00 00    	mov	m0, #0
3294   0FD1 8F 00 01    	mov	m0+1, #0
3295   0FD4 6F          	ret
3296   0FD5             
3297   0FD5             ;=======================================================================
3298   0FD5             Command_Extended:
3299   0FD5             ;=======================================================================
3300   0FD5 9F          	xcn	a				; setup jump to:
3301   0FD6 28 0F       	and	a, #0Fh				; CmdExTab[x]
3302   0FD8 FD          	mov	y, a				;
3303   0FD9 F6 EE 0F    	mov	a, !CmdExTab_L+y		;
3304   0FDC C5 EC 0F    	mov	!cmdex_jmp+1, a			;
3305   0FDF F6 FE 0F    	mov	a, !CmdExTab_H+y		;
3306   0FE2 C5 ED 0F    	mov	!cmdex_jmp+2, a			;
3307   0FE5             
3308   0FE5 F4 64       	mov	a, ch_param+x			; a = y
3309   0FE7 28 0F       	and	a, #0Fh				; y = tick
3310   0FE9 EB 12       	mov	y, mod_tick			; z = tick0
3311   0FEB             
3312   0FEB             cmdex_jmp:
3313   0FEB 5F 0B 0A    	jmp	0a0bh
3314   0FEE             
3315   0FEE             
3316   0FEE             
3317   0FEE             ;-----------------------------------------------------------------------------
3318   0FEE             CmdExTab_L:
3319   0FEE             ;-----------------------------------------------------------------------------
3320   0FEE 3D          	.byte	LBYTE(SCommand_EPN)		; S0x 0-4 Echo; 5-8 Pitch, 9-c Noise
3321   0FEF 24          	.byte	LBYTE(SCommand_NoiseFrXeq1)	; S1x
3322   0FF0 21          	.byte	LBYTE(SCommand_NoiseFrXeq2)	; S2x
3323   0FF1 8B          	.byte	LBYTE(SCommand_VibratoXWav)	; S3x 0-3 Vib. waveform
3324   0FF2 92          	.byte	LBYTE(SCommand_TremoloXWav)	; S4x set special, was tremolo waveform
3325   0FF3 19          	.byte	LBYTE(SCommand_NoiseFrXeq3)	; S5x noise freq sweep, was panbrello
3326   0FF4 1A           	.byte	LBYTE(SCommand_Null)		; S6x pattern delay
3327   0FF5 E5          	.byte	LBYTE(SCommand_Drop)		; S7x NNA S77 vol env off S78 vol env on
3328   0FF6 35          	.byte	LBYTE(SCommand_Panning)		; S8x
3329   0FF7 9A          	.byte	LBYTE(SCommand_SoundCoXntrol)	; S9x
3330   0FF8 1A          	.byte	LBYTE(SCommand_Null)		; SAx
3331   0FF9 1A          	.byte	LBYTE(SCommand_Null)		; SBx set loopback point
3332   0FFA E8          	.byte	LBYTE(SCommand_NoteCut)		; SCx
3333   0FFB F3          	.byte	LBYTE(SCommand_NoteDelXay)	; SDx
3334   0FFC 0E          	.byte	LBYTE(SCommand_EchoDelXay)	; SEx
3335   0FFD 02          	.byte	LBYTE(SCommand_Cue)		; SFx
3336   0FFE             ;-----------------------------------------------------------------------------
3337   0FFE             
3338   0FFE             
3339   0FFE             ;-----------------------------------------------------------------------------
3340   0FFE             CmdExTab_H:
3341   0FFE             ;-----------------------------------------------------------------------------
3342   0FFE 10          	.byte	HBYTE(SCommand_EPN)
3343   0FFF 11          	.byte	HBYTE(SCommand_NoiseFrXeq1)
3344   1000 11          	.byte	HBYTE(SCommand_NoiseFrXeq2)
3345   1001 10          	.byte	HBYTE(SCommand_VibratoXWav)
3346   1002 10          	.byte	HBYTE(SCommand_TremoloXWav)
3347   1003 11          	.byte	HBYTE(SCommand_NoiseFrXeq3)
3348   1004 10          	.byte	HBYTE(SCommand_Null)
3349   1005 1A          	.byte	HBYTE(SCommand_Drop)
3350   1006 11          	.byte	HBYTE(SCommand_Panning)
3351   1007 11          	.byte	HBYTE(SCommand_SoundCoXntrol)
3352   1008 10          	.byte	HBYTE(SCommand_Null)
3353   1009 10          	.byte	HBYTE(SCommand_Null)
3354   100A 11          	.byte	HBYTE(SCommand_NoteCut)
3355   100B 11          	.byte	HBYTE(SCommand_NoteDelXay)
3356   100C 10          	.byte	HBYTE(SCommand_EchoDelXay)
3357   100D 12          	.byte	HBYTE(SCommand_Cue)
3358   100E             ;-----------------------------------------------------------------------------
3359   100E             
3360   100E             
3361   100E             ;=======================================================================
3362   100E             SCommand_EchoDelay:				; sex
3363   100E             ;=======================================================================
3364   100E 65 0F 1B    	cmp	a, !MODULE+MOD_EDL
3365   1011 F0 02       	beq	SetEchoDelay
3366   1013 B0 06       	bcs	_reset_echo_delay		; anything else reset
3367   1015             SetEchoDelay:
3368   1015 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; otherwise fuck around with it
3369   1018 C4 F3       	mov	SPC_DSPD, a			;
3370   101A             ;=======================================================================
3371   101A             SCommand_Null:
3372   101A             ;=======================================================================
3373   101A 6F          	ret
3374   101B             ;-----------------------------------------------------------------------------
3375   101B             _reset_echo_delay:
3376   101B             ;-----------------------------------------------------------------------------
3377   101B 8F 7D F2    	mov	SPC_DSPA, #DSP_EDL		; defined in the header
3378   101E E5 0F 1B    	mov	a, !MODULE+MOD_EDL		;
3379   1021 C4 F3       	mov	SPC_DSPD, a			;
3380   1023 6F          	ret					;
3381   1024             ;-----------------------------------------------------------------------------
3382   1024             _echo_write:
3383   1024             ;-----------------------------------------------------------------------------
3384   1024 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG		;
3385   1027 68 0E       	cmp	a, #0Eh				;
3386   1029 F0 04       	beq	_enable_echo_write		;
3387   102B 18 20 F3    	or	SPC_DSPD, #FLG_ECEN		; disable echo write
3388   102E 6F          	ret					;
3389   102F             _enable_echo_write:				;
3390   102F 38 DF F3    	and	SPC_DSPD, #~FLG_ECEN		;
3391   1032 6F          	ret					;
3392   1033             ;-----------------------------------------------------------------------------
3393   1033             ;=======================================================================
3394   1033             ResetAll:					; s0f
3395   1033             ;=======================================================================
3396   1033 3F 5B 12    	call	ResetEchoVolume
3397   1036 3F 98 12    	call	ResetEFIR_FS
3398   1039 3F 27 0E    	call	ResetEchoFeedback
3399   103C 6F          	ret
3400   103D             ;=======================================================================
3401   103D             SCommand_EPN:	; Echo / Pitchmod / Noise ; This part added by KFF for noise & pitch modulation
3402   103D             ;=======================================================================
3403   103D 68 0F       	cmp	a, #0Fh
3404   103F F0 F2       	beq	ResetAll
3405   1041 68 0D       	cmp	a, #0Dh
3406   1043 B0 DF       	bcs	_echo_write
3407   1045 68 09       	cmp	a, #09h
3408   1047 90 08       	bcc	_pitch_mod
3409   1049             
3410   1049 8F 3D F2    	mov	SPC_DSPA, #DSP_NON
3411   104C 60          	clrc
3412   104D A8 07       	sbc	a, #7
3413   104F 2F 0F       	bra	skip_dsp_eon		; preserve DSP_NON in SPC_DSPA
3414   1051             ;-----------------------------------------------------------------------------
3415   1051             _pitch_mod:
3416   1051             ;-----------------------------------------------------------------------------
3417   1051 68 05       	cmp	a, #5			; do we need to do something with pitchmod?
3418   1053 90 08       	bcc	SCommand_Echo
3419   1055 8F 2D F2    	mov	SPC_DSPA, #DSP_PMON
3420   1058 60          	clrc
3421   1059 A8 03       	sbc	a, #3
3422   105B 2F 03       	bra	skip_dsp_eon		; preserve DSP_PMON in SPC_DSPA
3423   105D             ;=======================================================================
3424   105D             SCommand_Echo:
3425   105D             ;=======================================================================
3426   105D 8F 4D F2    	mov	SPC_DSPA, #DSP_EON
3427   1060             skip_dsp_eon:
3428   1060 68 01       	cmp	a, #1
3429   1062 F0 0D       	beq	_sce_enable_one
3430   1064 90 0A       	bcc	cmd_exit3
3431   1066 68 03       	cmp	a, #3
3432   1068 90 0F       	bcc	_sce_disable_one
3433   106A F0 17       	beq	_sce_enable_all
3434   106C 68 04       	cmp	a, #4
3435   106E F0 17       	beq	_sce_disable_all
3436   1070             cmd_exit3:
3437   1070 6F          	ret
3438   1071             ;-----------------------------------------------------------------------------
3439   1071             _sce_enable_one:
3440   1071             ;-----------------------------------------------------------------------------
3441   1071 F5 24 1A    	mov	a, !BITS+x
3442   1074 04 F3       	or	a, SPC_DSPD
3443   1076 C4 F3       	mov	SPC_DSPD, a
3444   1078 6F          	ret
3445   1079             ;-----------------------------------------------------------------------------
3446   1079             _sce_disable_one:
3447   1079             ;-----------------------------------------------------------------------------
3448   1079 F5 24 1A    	mov	a, !BITS+x
3449   107C 48 FF       	eor	a, #255
3450   107E 24 F3       	and	a, SPC_DSPD
3451   1080 C4 F3       	mov	SPC_DSPD, a
3452   1082 6F          	ret
3453   1083             ;-----------------------------------------------------------------------------
3454   1083             _sce_enable_all:
3455   1083             ;-----------------------------------------------------------------------------
3456   1083 8F FF F3    	mov	SPC_DSPD, #0FFh
3457   1086 6F          	ret
3458   1087             ;-----------------------------------------------------------------------------
3459   1087             _sce_disable_all:
3460   1087             ;-----------------------------------------------------------------------------
3461   1087 8F 00 F3    	mov	SPC_DSPD, #0
3462   108A 6F          	ret
3463   108B             
3464   108B             ;=======================================================================
3465   108B             SCommand_VibratoWav:				; s3x
3466   108B             ;=======================================================================
3467   108B D4 9C       	mov	ch_env_vib+x, a			; set waveform type
3468   108D E8 00       	mov	a, #0
3469   108F D4 A4       	mov	ch_vib_wav+x, a			; reset waveform position
3470   1091 6F          	ret
3471   1092             	
3472   1092             ;=======================================================================
3473   1092             SCommand_TremoloWav:				; s4x
3474   1092             ;=======================================================================
3475   1092 FD          	mov	y, a
3476   1093 F6 9C 10    	mov	a, !S4xTab_L+y
3477   1096 C5 9A 10    	mov	!s4xjmp+1, a
3478   1099             	;mov	a, !S4xTab_H+y		; all s4x commands are at 10xx
3479   1099             	;mov	!s4xjmp+2, a		; so no need for a high table
3480   1099 5F 00 10    s4xjmp:	jmp	1000h
3481   109C             
3482   109C             ;-----------------------------------------------------------------------------
3483   109C             S4xTab_L:
3484   109C             ;-----------------------------------------------------------------------------
3485   109C 8B          	.byte	LBYTE(SCommand_VibratoXWav)
3486   109D 8B          	.byte	LBYTE(SCommand_VibratoXWav)
3487   109E 8B          	.byte	LBYTE(SCommand_VibratoXWav)
3488   109F 8B          	.byte	LBYTE(SCommand_VibratoXWav)
3489   10A0 E2          	.byte	LBYTE(EVOL_MaxMin)
3490   10A1 DB          	.byte	LBYTE(EVOL_MinMax)		; default
3491   10A2 D7          	.byte	LBYTE(_set_gxx_vibrato)
3492   10A3 D3          	.byte	LBYTE(_set_gxx_standarXd)	; default
3493   10A4 CC          	.byte	LBYTE(_enable_wavetablXe)
3494   10A5 C8          	.byte	LBYTE(_disable_wavetabXle)	; default
3495   10A6 C3          	.byte	LBYTE(_set_noise_sweepX_inc)
3496   10A7 BC          	.byte	LBYTE(_set_noise_sweepX_dec)	; default
3497   10A8 B8          	.byte	LBYTE(_set_noise_repeaXt_on)
3498   10A9 B4          	.byte	LBYTE(_set_noise_repeaXt_off)	; default
3499   10AA B0          	.byte	LBYTE(_set_noise_pingpXong_on)
3500   10AB AC          	.byte	LBYTE(_set_noise_pingpXong_off)	; default
3501   10AC             ;-----------------------------------------------------------------------------
3502   10AC             
3503   10AC             
3504   10AC             ;-----------------------------------------------------------------------------
3505   10AC             _set_noise_pingpong_off:			; s4f
3506   10AC             ;-----------------------------------------------------------------------------
3507   10AC 38 F7 E7    	and	special, #~SF_NOISEMODE
3508   10AF 6F          	ret
3509   10B0             ;-----------------------------------------------------------------------------
3510   10B0             _set_noise_pingpong_on:				; s4e
3511   10B0             ;-----------------------------------------------------------------------------
3512   10B0 18 08 E7    	or	special, #SF_NOISEMODE
3513   10B3 6F          S4Exit:	ret
3514   10B4             ;-----------------------------------------------------------------------------
3515   10B4             _set_noise_repeat_off:				; s4d
3516   10B4             ;-----------------------------------------------------------------------------
3517   10B4 38 EF E7    	and	special, #~SF_NOISEREPEAT
3518   10B7 6F          	ret
3519   10B8             ;-----------------------------------------------------------------------------
3520   10B8             _set_noise_repeat_on:				; s4c
3521   10B8             ;-----------------------------------------------------------------------------
3522   10B8 18 10 E7    	or	special, #SF_NOISEREPEAT
3523   10BB 6F          	ret
3524   10BC             ;-----------------------------------------------------------------------------
3525   10BC             _set_noise_sweep_dec:				; s4b
3526   10BC             ;-----------------------------------------------------------------------------
3527   10BC 38 FB E7    	and	special, #~SF_NOISEINC
3528   10BF 38 F7 E7    _s4xit:	and	special, #~SF_NOISEMODE
3529   10C2 6F          	ret
3530   10C3             ;-----------------------------------------------------------------------------
3531   10C3             _set_noise_sweep_inc:				; s4a
3532   10C3             ;-----------------------------------------------------------------------------
3533   10C3 18 04 E7    	or	special, #SF_NOISEINC
3534   10C6 2F F7       	bra	_s4xit
3535   10C8             ;-----------------------------------------------------------------------------
3536   10C8             _disable_wavetable:				; s49
3537   10C8             ;-----------------------------------------------------------------------------
3538   10C8 38 3F E7    	and	special, #~(SF_WAVETABLE|SF_WTDIR)
3539   10CB 6F          	ret
3540   10CC             ;-----------------------------------------------------------------------------
3541   10CC             _enable_wavetable:				; s48
3542   10CC             ;-----------------------------------------------------------------------------
3543   10CC FA EB E9    	mov	wt_cur, wt_min
3544   10CF 18 40 E7    	or	special, #SF_WAVETABLE
3545   10D2 6F          	ret
3546   10D3             ;-----------------------------------------------------------------------------
3547   10D3             _set_gxx_standard:				; s47
3548   10D3             ;-----------------------------------------------------------------------------
3549   10D3 38 FB E1    	and	mod_special, #~MS_GXXVIB
3550   10D6 6F          	ret
3551   10D7             ;-----------------------------------------------------------------------------
3552   10D7             _set_gxx_vibrato:				; s46
3553   10D7             ;-----------------------------------------------------------------------------
3554   10D7 18 04 E1    	or	mod_special, #MS_GXXVIB
3555   10DA 6F          	ret
3556   10DB             ;-----------------------------------------------------------------------------
3557   10DB             EVOL_MinMax:					; s45
3558   10DB             ;-----------------------------------------------------------------------------
3559   10DB 18 08 E0    	or	mod_mode, #MO_EVOLINC
3560   10DE FA CD C6    	mov	current_evol, evol_min
3561   10E1 6F          	ret
3562   10E2             ;-----------------------------------------------------------------------------
3563   10E2             EVOL_MaxMin:					; s44
3564   10E2             ;-----------------------------------------------------------------------------
3565   10E2 38 F7 E0    	and	mod_mode, #~MO_EVOLINC
3566   10E5 FA CC C6    	mov	current_evol, evol_max
3567   10E8 6F          	ret
3568   10E9             ;-----------------------------------------------------------------------------
3569   10E9             
3570   10E9             
3571   10E9             ;-----------------------------------------------------------------------------
3572   10E9 7F0000000000FILTER:	.byte   $7f,$00,$00,$00,$00,$00,$00,$00
3572   10EF 0000
3573   10F1 343300D9E501	.byte   $34,$33,$00,$d9,$e5,$01,$fc,$eb ; bandpass
3573   10F7 FCEB
3574   10F9 58BFDBF0FE07	.byte   $58,$bf,$db,$f0,$fe,$07,$0c,$0c ; highpass
3574   10FF 0C0C
3575   1101 0A17232912FE	.byte   $0a,$17,$23,$29,$12,$fe,$f3,$f9 ; lowpass
3575   1107 F3F9
3576   1109 F808111C1C11	.byte	$f8,$08,$11,$1c,$1c,$11,$08,$f8 ; ren and stimpy
3576   110F 08F8
3577   1111 7F7F7F7F7F7F	.byte	$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f	; star ocean/top
3577   1117 7F7F
3578   1119             ;-----------------------------------------------------------------------------
3579   1119             
3580   1119             ;=======================================================================
3581   1119             ;						; s7x
3582   1119             ;=======================================================================
3583   1119             ;available commands: S7D, S7E, S7F
3584   1119             
3585   1119             ;=======================================================================
3586   1119             SCommand_NoiseFreq3:				; s5x
3587   1119             ;=======================================================================
3588   1119 18 20 E7    	or	special, #SF_NOISESWEEP
3589   111C 60          	clrc
3590   111D 88 10       	adc	a, #10h
3591   111F 2F 06       	bra	_noise_mov
3592   1121             ;=======================================================================
3593   1121             SCommand_NoiseFreq2:				; s2x
3594   1121             ;=======================================================================
3595   1121 60          	clrc
3596   1122 88 10       	adc	a, #10h
3597   1124             ;=======================================================================
3598   1124             SCommand_NoiseFreq1:				; s1x
3599   1124             ;=======================================================================
3600   1124 38 DF E7    	and	special, #~SF_NOISESWEEP
3601   1127             _noise_mov:
3602   1127 C4 E6       	mov	noise_value, a
3603   1129 C4 E4       	mov	noise_sweep_start, a
3604   112B             ;-----------------------------------------------------------------------
3605   112B             SCommand_NoiseFreq1b:
3606   112B             ;-----------------------------------------------------------------------
3607   112B 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
3608   112E 38 E0 F3    	and	SPC_DSPD, #FLG_NOISE
3609   1131 09 E6 F3    	or	SPC_DSPD, noise_value
3610   1134 6F          	ret
3611   1135             
3612   1135             ;=======================================================================
3613   1135             SCommand_Panning:				; s8x
3614   1135             ;=======================================================================
3615   1135 D0 2C       	bne	cmd_exit4			; on tick0:
3616   1137 C4 00       	mov	m0, a				; panning = (y << 2) + (y >> 2)
3617   1139 1C          	asl	a				;
3618   113A 1C          	asl	a				;
3619   113B 4B 00       	lsr	m0				;
3620   113D 4B 00       	lsr	m0				;
3621   113F 84 00       	adc	a, m0				;
3622   1141 C4 BE       	mov	t_panning, a			;
3623   1143 D4 34       	mov	ch_panning+x, a			;
3624   1145 6F          	ret					;
3625   1146             
3626   1146             ;-----------------------------------------------------------------------------
3627   1146             Command_ToggleEvolIncDec:			; s90
3628   1146             ;-----------------------------------------------------------------------------
3629   1146 58 08 E0    	eor	mod_mode, #MO_EVOLINC
3630   1149 6F          	ret
3631   114A             ;-----------------------------------------------------------------------------
3632   114A             Command_Surround:
3633   114A             ;-----------------------------------------------------------------------------
3634   114A F4 74       	mov	a, ch_flags+x
3635   114C 08 40       	or	a, #CF_SURROUND
3636   114E D4 74       	mov	ch_flags+x, a
3637   1150 E8 20       	mov	a, #32
3638   1152 D4 34       	mov	ch_panning+x, a
3639   1154 C4 BE       	mov	t_panning, a
3640   1156 6F          	ret
3641   1157             ;-----------------------------------------------------------------------------
3642   1157             Command_MuteChannel:				; s92
3643   1157             ;-----------------------------------------------------------------------------
3644   1157 F4 74       	mov	a, ch_flags+x
3645   1159 08 80       	or	a, #CF_MUTE
3646   115B 2F 04       	bra	_setcf
3647   115D             ;-----------------------------------------------------------------------------
3648   115D             Command_UnmuteChannel:				; s93
3649   115D             ;-----------------------------------------------------------------------------
3650   115D F4 74       	mov	a, ch_flags+x
3651   115F 28 7F       	and     a, #~CF_MUTE			; mask 7 bits
3652   1161 D4 74       _setcf:	mov	ch_flags+x,a
3653   1163             cmd_exit4:
3654   1163 6F          	ret
3655   1164             ;-----------------------------------------------------------------------------
3656   1164             Command_EnableFMVibrato:			; s94
3657   1164             ;-----------------------------------------------------------------------------
3658   1164 18 0A E1    	or	mod_special, #(MS_FM_VIBRATO|MS_FM_ACTIVE)
3659   1167 E8 34       	mov	a, #LBYTE(FM_WAVEFORM)
3660   1169 C5 00 02    	mov	!SampleDirectory, a
3661   116C C5 02 02    	mov	!SampleDirectory+2, a
3662   116F E8 1A       	mov	a, #HBYTE(FM_WAVEFORM)
3663   1171 C5 01 02    	mov	!SampleDirectory+1, a
3664   1174 C5 03 02    	mov	!SampleDirectory+3, a
3665   1177 6F          	ret
3666   1178             ;-----------------------------------------------------------------------------
3667   1178             Command_DisableFMVibrato:			; s95
3668   1178             ;-----------------------------------------------------------------------------
3669   1178 38 F5 E1    	and	mod_special, #~(MS_FM_VIBRATO|MS_FM_ACTIVE)
3670   117B 6F          	ret
3671   117C             ;-----------------------------------------------------------------------------
3672   117C             Command_SetZModeChFS_MaxMin:			; s96
3673   117C             ;-----------------------------------------------------------------------------
3674   117C 3F E2 10    	call	EVOL_MaxMin
3675   117F 2F 03       	bra	_resa
3676   1181             ;-----------------------------------------------------------------------------
3677   1181             Command_SetZModeChFS_MinMax:			; s97
3678   1181             ;-----------------------------------------------------------------------------
3679   1181 3F DB 10    	call	EVOL_MinMax
3680   1184 3F 33 10    _resa:	call	ResetAll
3681   1187             ;-----------------------------------------------------------------------------
3682   1187             Command_SetZModeChFS:				; s98
3683   1187             ;-----------------------------------------------------------------------------
3684   1187 4D          	push	x
3685   1188             
3686   1188 CD 07       	mov	x, #7
3687   118A E8 80       	mov	a, #80h
3688   118C D4 D0       _set80:	mov	filter_values+x, a
3689   118E 1D          	dec	x
3690   118F 10 FB       	bpl	_set80
3691   1191             
3692   1191 CE          	pop	x
3693   1192             
3694   1192 18 01 E0    	or	mod_mode, #MO_CHFLTSWP
3695   1195             
3696   1195 6F          	ret
3697   1196             ;-----------------------------------------------------------------------------
3698   1196             Command_SetZModeEFIR:				; s99
3699   1196             ;-----------------------------------------------------------------------------
3700   1196 38 FC E0    	and	mod_mode, #~(MO_CHFLTZMODE|MO_CHFLTSWP)
3701   1199 6F          S9Exit:	ret
3702   119A             ;=======================================================================
3703   119A             SCommand_SoundControl:				; s9x
3704   119A             ;=======================================================================
3705   119A D0 C7       	bne	cmd_exit4
3706   119C FD          	mov	y, a
3707   119D F6 A6 11    	mov	a, !S9xTab_L+y
3708   11A0 C5 A4 11    	mov	!s9xjmp+1, a
3709   11A3             	;mov	a, !S9xTab_H+y			; all s9x commands are at 11xx
3710   11A3             	;mov	!s9xjmp+2, a			; so no need for a high table
3711   11A3 5F 00 11    s9xjmp:	jmp	1100h
3712   11A6             
3713   11A6             ;-----------------------------------------------------------------------------
3714   11A6             S9xTab_L:
3715   11A6             ;-----------------------------------------------------------------------------
3716   11A6 46          	.byte	LBYTE(Command_ToggleEvXolIncDec)	; s90
3717   11A7 4A          	.byte	LBYTE(Command_Surround)			; s91
3718   11A8 57          	.byte	LBYTE(Command_MuteChanXnel)		; s92
3719   11A9 5D          	.byte	LBYTE(Command_UnmuteChXannel)		; s93
3720   11AA 64          	.byte	LBYTE(Command_EnableFMXVibrato)		; s94
3721   11AB 78          	.byte	LBYTE(Command_DisableFXMVibrato)	; s95
3722   11AC 7C          	.byte	LBYTE(Command_SetZModeXChFS_MaxMin)	; s96
3723   11AD 81          	.byte	LBYTE(Command_SetZModeXChFS_MinMax)	; s97
3724   11AE 87          	.byte	LBYTE(Command_SetZModeXChFS)		; s98
3725   11AF 96          	.byte	LBYTE(Command_SetZModeXEFIR)		; s99
3726   11B0 B6          	.byte	LBYTE(Command_SetFilteXr7F)		; s9a
3727   11B1 BA          	.byte	LBYTE(Command_SetFilteXrBand)		; s9b
3728   11B2 BE          	.byte	LBYTE(Command_SetFilteXrHigh)		; s9c
3729   11B3 C2          	.byte	LBYTE(Command_SetFilteXrLow)		; s9d
3730   11B4 C6          	.byte	LBYTE(Command_SetFilteXrSp1)		; s9e
3731   11B5 CA          	.byte	LBYTE(Command_SetFilteXrSp2)		; s9f
3732   11B6             ;-----------------------------------------------------------------------------
3733   11B6             
3734   11B6             
3735   11B6             ;-----------------------------------------------------------------------------
3736   11B6             Command_SetFilter7F:					; s9a
3737   11B6             ;-----------------------------------------------------------------------------
3738   11B6 8D 07       	mov	y, #7
3739   11B8 2F 12       	bra	_set_special_filter
3740   11BA             ;-----------------------------------------------------------------------------
3741   11BA             Command_SetFilterBand:					; s9b
3742   11BA             ;-----------------------------------------------------------------------------
3743   11BA 8D 0F       	mov	y, #15
3744   11BC 2F 0E       	bra	_set_special_filter
3745   11BE             ;-----------------------------------------------------------------------------
3746   11BE             Command_SetFilterHigh:					; s9c
3747   11BE             ;-----------------------------------------------------------------------------
3748   11BE 8D 17       	mov	y, #23
3749   11C0 2F 0A       	bra	_set_special_filter
3750   11C2             ;-----------------------------------------------------------------------------
3751   11C2             Command_SetFilterLow:					; s9d
3752   11C2             ;-----------------------------------------------------------------------------
3753   11C2 8D 1F       	mov	y, #31
3754   11C4 2F 06       	bra	_set_special_filter
3755   11C6             ;-----------------------------------------------------------------------------
3756   11C6             Command_SetFilterSp1:					; s9e
3757   11C6             ;-----------------------------------------------------------------------------
3758   11C6 8D 27       	mov	y, #39
3759   11C8 2F 02       	bra	_set_special_filter
3760   11CA             ;-----------------------------------------------------------------------------
3761   11CA             Command_SetFilterSp2:					; s9f
3762   11CA             ;-----------------------------------------------------------------------------
3763   11CA 8D 2F       	mov	y, #47
3764   11CC             _set_special_filter:
3765   11CC 80          	setc
3766   11CD 8F 7F F2    	mov	SPC_DSPA, #DSP_C7
3767   11D0             
3768   11D0 4D          	push	x
3769   11D1             
3770   11D1 CD 07       	mov	x, #7
3771   11D3             _copy_special_coef:
3772   11D3 F6 E9 10    	mov	a, !FILTER+y			;
3773   11D6 13 E0 04    	bbc0	mod_mode, _csc			; test MO_CHFLTSWP
3774   11D9 D4 D0       	mov	filter_values+x, a		; set values for filter sweep
3775   11DB 2F 05       	bra	_cscdy
3776   11DD C4 F3       _csc:	mov	SPC_DSPD, a			; set value immediately
3777   11DF B8 10 F2    	sbc	SPC_DSPA, #10h			;
3778   11E2 DC          _cscdy:	dec	y				;
3779   11E3 1D          	dec	x				;
3780   11E4 10 ED       	bpl	_copy_special_coef		;
3781   11E6             
3782   11E6 CE          	pop	x
3783   11E7             
3784   11E7 6F          	ret
3785   11E8             
3786   11E8             ;=============================================================================
3787   11E8             SCommand_NoteCut:				; scx	11 bytes
3788   11E8             ;=============================================================================
3789   11E8 64 12       	cmp	a, mod_tick			; on tick Y:
3790   11EA D0 5F       	bne	cmd_exit5			;
3791   11EC E8 00       	mov	a, #0				; zero volume
3792   11EE C4 BD       	mov	t_volume, a			;
3793   11F0 D4 2C       	mov	ch_volume+x, a			;
3794   11F2 6F          	ret	
3795   11F3             ;=============================================================================
3796   11F3             SCommand_NoteDelay:				; sdx	15 bytes
3797   11F3             ;=============================================================================
3798   11F3 64 12       	cmp	a, mod_tick
3799   11F5 F0 07       	beq	scdelay_equ
3800   11F7 B0 01       	bcs	scdelay_lower
3801   11F9 6F          	ret
3802   11FA             scdelay_lower:
3803   11FA 18 02 C1    	or	t_flags, #TF_DELAY
3804   11FD 6F          	ret
3805   11FE             scdelay_equ:
3806   11FE 18 80 C1    	or	t_flags, #TF_START
3807   1201 6F          	ret
3808   1202             ;=============================================================================
3809   1202             SCommand_Cue:					; sfx
3810   1202             ;=============================================================================
3811   1202 D0 47       	bne	cmd_exit5			;on tick0:
3812   1204 AB C5       	inc	STATUS				; increment CUE value
3813   1206 38 EF C5    	and	STATUS, #11101111b		; in status and send to
3814   1209 FA C5 F6    	mov	SPC_PORT2, STATUS		; snes
3815   120C 6F          	ret					;
3816   120D             ;=============================================================================
3817   120D             Command_Tempo:					; txy
3818   120D             ;=============================================================================
3819   120D 68 20       	cmp	a, #20h
3820   120F 90 08       	bcc	_temposlide
3821   1211 68 50       	cmp	a, #80
3822   1213 B0 1C       	bcs	_change_tempo
3823   1215 E8 50       	mov	a, #80
3824   1217 2F 18       	bra	_change_tempo
3825   1219             ;-----------------------------------------------------------------------------
3826   1219             _temposlide:
3827   1219 68 10       	cmp	a, #10h
3828   121B 90 07       	bcc	_txx_down
3829   121D 28 0F       	and	a, #0Fh
3830   121F 60          	clrc
3831   1220 84 0D       	adc	a, mod_bpm
3832   1222 2F 0D       	bra	_change_tempo
3833   1224             ;-----------------------------------------------------------------------------
3834   1224             _txx_down:
3835   1224 C4 00       	mov	m0, a
3836   1226 E4 0D       	mov	a, mod_bpm
3837   1228 80          	setc
3838   1229 A4 00       	sbc	a, m0
3839   122B 68 50       	cmp	a, #80
3840   122D B0 02       	bcs	_change_tempo
3841   122F E8 50       	mov	a, #80
3842   1231             ;-----------------------------------------------------------------------------
3843   1231             _change_tempo:
3844   1231 3F F2 06    	call	Module_ChangeTempo
3845   1234 8F 07 F1    	mov	SPC_CONTROL, #%111
3846   1237 6F          	ret
3847   1238             ;=============================================================================
3848   1238             ;Command_FineVibrato:				; unimplemented
3849   1238             ;=============================================================================
3850   1238             ;	ret
3851   1238             ;-----------------------------------------------------------------------------
3852   1238             
3853   1238             ;=======================================================================
3854   1238             Command_SetFilterSpeed:				; uxx
3855   1238             ;=======================================================================
3856   1238 C4 CF       	mov	filter_time, a
3857   123A 6F          	ret
3858   123B             ;=============================================================================
3859   123B             ;Command_SetGlobalVolume:			; vxx
3860   123B             ;=============================================================================
3861   123B             	;bne	cmd_exit5			; set global volume on tick0
3862   123B             	;cmp	a, #80h				;
3863   123B             	;bcc	_vxx_nsat			; saturate to 80h
3864   123B             	;mov	a, #80h				;
3865   123B             ;_vxx_nsat:					;
3866   123B             	;mov	mod_gvol, a			;
3867   123B             	;ret					;
3868   123B             ;=============================================================================
3869   123B             ResetMasterVolume:
3870   123B             ;=============================================================================
3871   123B E8 7F       	mov	a, #DEFAULT_MVOL
3872   123D             ;=============================================================================
3873   123D             Command_MasterVolume:				; vxx
3874   123D             ;=============================================================================
3875   123D 68 80       	cmp	a, #80h
3876   123F F0 FA       	beq	ResetMasterVolume
3877   1241             ;=============================================================================
3878   1241             Command_MasterVolume2:
3879   1241             ;=============================================================================
3880   1241 8F 0C F2    	mov	SPC_DSPA, #DSP_MVOL
3881   1244 C4 F3       	mov	SPC_DSPD, a
3882   1246 8F 1C F2    	mov	SPC_DSPA, #DSP_MVOLR
3883   1249 C4 F3       	mov	SPC_DSPD, a
3884   124B             cmd_exit5:
3885   124B 6F          	ret
3886   124C             
3887   124C             ;=============================================================================
3888   124C             ;Command_GlobalVolumeSlide:			; wxy 12 bytes
3889   124C             ;=============================================================================
3890   124C             	;mov	m0, mod_gvol			; slide global volume
3891   124C             	;mov	m0+1, #128			; max 128
3892   124C             	;call	DoVolumeSlide			;
3893   124C             	;mov	mod_gvol, a			;
3894   124C             	;ret					;
3895   124C             
3896   124C             ;=============================================================================
3897   124C             Command_SetPanning:				; xxx
3898   124C             ;=============================================================================
3899   124C D0 FD       	bne	cmd_exit5			; set panning on tick0	
3900   124E 5C          	lsr	a				;
3901   124F 5C          	lsr	a				;
3902   1250 C4 BE       	mov	t_panning, a			;
3903   1252             Command_SetPanningb:				;
3904   1252 D4 34       	mov	ch_panning+x, a			;
3905   1254 F4 74       	mov	a, ch_flags+x			;
3906   1256 28 BF       	and	a, #~CF_SURROUND		;
3907   1258 D4 74       	mov	ch_flags+x, a			;
3908   125A 6F          	ret					;
3909   125B             
3910   125B             ;=============================================================================
3911   125B             ResetEchoVolume:
3912   125B             ;=============================================================================
3913   125B E5 0D 1B    	mov	a, !MODULE+MOD_EVOL
3914   125E             ;=============================================================================
3915   125E             Command_EchoVolume:				; yxx
3916   125E             ;=============================================================================
3917   125E 68 80       	cmp	a, #80h
3918   1260 F0 F9       	beq	ResetEchoVolume
3919   1262 C4 C6       	mov	current_evol, a
3920   1264             ;=============================================================================
3921   1264             Command_EchoVolume2:
3922   1264             ;=============================================================================
3923   1264 8F 2C F2    	mov	SPC_DSPA, #DSP_EVOL
3924   1267 C4 F3       	mov	SPC_DSPD, a
3925   1269 EC 0D 1B    	mov	y, !MODULE+MOD_EVOL
3926   126C 5E 0E 1B    	cmp	y, !MODULE+MOD_EVOLR		; check for stereo
3927   126F F0 03       	beq	_update_echo_volume
3928   1271             ;-----------------------------------------------------------------------------
3929   1271 48 FF       	eor	a, #0FFh
3930   1273 BC          	inc	a
3931   1274             ;-----------------------------------------------------------------------------
3932   1274             _update_echo_volume:
3933   1274             ;-----------------------------------------------------------------------------
3934   1274 8F 3C F2    	mov	SPC_DSPA, #DSP_EVOLR
3935   1277 C4 F3       	mov	SPC_DSPD, a
3936   1279 6F          	ret
3937   127A             
3938   127A             ;-----------------------------------------------------------------------------
3939   127A             _z_ch_filter:				; s98 z80
3940   127A             ;-----------------------------------------------------------------------------
3941   127A 68 80       	cmp	a, #80h
3942   127C F0 06       	beq	_disable_ch_filter_sweep
3943   127E D4 D0       	mov	filter_values+x, a
3944   1280 18 01 E0    	or	mod_mode, #MO_CHFLTSWP
3945   1283 6F          	ret
3946   1284             ;-----------------------------------------------------------------------------
3947   1284             _disable_ch_filter_sweep:
3948   1284             ;-----------------------------------------------------------------------------
3949   1284 38 FE E0    	and	mod_mode, #~MO_CHFLTSWP
3950   1287 6F          	ret
3951   1288             ;=============================================================================
3952   1288             Command_SetParameter:
3953   1288             ;=============================================================================
3954   1288 23 E0 EF    	bbs1	mod_mode, _z_ch_filter	; test MO_CHFLTZMODE
3955   128B             ;-----------------------------------------------------------------------------
3956   128B             ZCommand_SetEFIR:			; s99 z80
3957   128B             ;-----------------------------------------------------------------------------
3958   128B 68 80       	cmp	a, #80h			;
3959   128D F0 09       	beq	ResetEFIR_FS		;
3960   128F FD          	mov	y, a			;
3961   1290 F5 2C 1A    	mov	a, !CBITS+x		;
3962   1293 C4 F2       	mov	SPC_DSPA, a		;
3963   1295 CB F3       	mov	SPC_DSPD, y		;
3964   1297 6F          	ret				;
3965   1298             ;-----------------------------------------------------------------------------
3966   1298             ResetEFIR_FS:
3967   1298             ;-----------------------------------------------------------------------------
3968   1298 8F 00 C7    	mov	current_evol_time, #0
3969   129B             ;=============================================================================
3970   129B             ResetEFIR:
3971   129B             ;=============================================================================
3972   129B 38 F4 E7    	and	special, #~(MO_EVOLINC|MO_CHFLTZMODE|MO_CHFLTSWP)
3973   129E 3F B6 11    	call	Command_SetFilter7F
3974   12A1 6F          	ret
3975   12A2             ;-----------------------------------------------------------------------------
3976   12A2             
3977   12A2             
3978   12A2             ;-----------------------------------------------------------------------------
3979   12A2             ; a = param
3980   12A2             ; y = tick
3981   12A2             ; m0 = value
3982   12A2             ; m0+1 = upper bound
3983   12A2             ;
3984   12A2             ; return: a = result
3985   12A2             ;=============================================================================
3986   12A2             DoVolumeSlide:
3987   12A2             ;=============================================================================
3988   12A2 C4 02       	mov	m1, a			; test param for slide behavior
3989   12A4             					;-------------------------------------
3990   12A4 28 0F       	and	a, #0Fh			; Dx0 : slide up
3991   12A6 F0 1C       	beq	_dvs_up			;-------------------------------------
3992   12A8 E4 02       	mov	a, m1			; D0y : slide down
3993   12AA 28 F0       	and	a, #0F0h		;
3994   12AC F0 03       	beq	_dvs_down		;-------------------------------------
3995   12AE             _dvs_quit:				;-------------------------------------
3996   12AE E4 00       	mov	a, m0			; (invalid)
3997   12B0             _dvs_exit:				;
3998   12B0 6F          	ret				;
3999   12B1             ;-----------------------------------------------------------------------------
4000   12B1             _dvs_down:				; D0y
4001   12B1             ;-----------------------------------------------------------------------------
4002   12B1 78 0F 02    	cmp	m1,#0Fh			;on tick0 OR y == 15
4003   12B4 F0 04       	beq	_dvsd_15		;
4004   12B6 AD 00       	cmp	y, #0			;
4005   12B8 F0 F4       	beq	_dvs_quit		;
4006   12BA             _dvsd_15:				;
4007   12BA E4 00       	mov	a, m0			; a = volume - param
4008   12BC 80          	setc				;
4009   12BD A4 02       	sbc	a, m1			;
4010   12BF B0 EF       	bcs	_dvs_exit		; saturate lower to 0
4011   12C1 E8 00       	mov	a, #0			;
4012   12C3 6F          	ret				;
4013   12C4             ;-----------------------------------------------------------------------------
4014   12C4             _dvs_up:				;
4015   12C4             ;-----------------------------------------------------------------------------
4016   12C4 78 F0 02    	cmp	m1, #0F0h		;on tick0 OR x == 15
4017   12C7 F0 04       	beq	_dvsu_15		;
4018   12C9 AD 00       	cmp	y, #0			;
4019   12CB F0 E1       	beq	_dvs_quit		;
4020   12CD             _dvsu_15:				;
4021   12CD E4 02       	mov	a, m1			; a = x + volume
4022   12CF 9F          	xcn	a			;
4023   12D0 28 0F       	and	a, #0Fh			;
4024   12D2 60          	clrc				;
4025   12D3 84 00       	adc	a, m0			;
4026   12D5 64 01       	cmp	a, m0+1			; saturate upper to [m0.h]
4027   12D7 90 D7       	bcc	_dvs_exit		;
4028   12D9 E4 01       	mov	a, m0+1			;
4029   12DB 6F          	ret				;
4030   12DC             ;-----------------------------------------------------------------------------
4031   12DC             
4032   12DC             ;*****************************************************************************
4033   12DC             
4034   12DC             
4035   12DC             ;-----------------------------------------------------------------------------
4036   12DC             LUT_FTAB:
4037   12DC             ;-----------------------------------------------------------------------------
4038   12DC 74217B218321        .word 02174h, 0217Bh, 02183h, 0218Bh, 02193h, 0219Ah, 021A2h, 021AAh, 021B2h, 021BAh, 021C1h, 021C9h, 021D1h, 021D9h, 021E1h, 021E8h
4038   12E2 8B2193219A21A221AA21B221BA21C121C921D121D921E121E821
4039   12FC F021F8210022        .word 021F0h, 021F8h, 02200h, 02208h, 02210h, 02218h, 0221Fh, 02227h, 0222Fh, 02237h, 0223Fh, 02247h, 0224Fh, 02257h, 0225Fh, 02267h
4039   1302 0822102218221F2227222F2237223F2247224F2257225F226722
4040   131C 6F2277227F22        .word 0226Fh, 02277h, 0227Fh, 02287h, 0228Fh, 02297h, 0229Fh, 022A7h, 022AFh, 022B7h, 022BFh, 022C7h, 022CFh, 022D7h, 022DFh, 022E7h
4040   1322 87228F2297229F22A722AF22B722BF22C722CF22D722DF22E722
4041   133C EF22F722FF22        .word 022EFh, 022F7h, 022FFh, 02307h, 0230Fh, 02317h, 0231Fh, 02328h, 02330h, 02338h, 02340h, 02348h, 02350h, 02358h, 02361h, 02369h
4041   1342 07230F2317231F23282330233823402348235023582361236923
4042   135C 712379238123        .word 02371h, 02379h, 02381h, 0238Ah, 02392h, 0239Ah, 023A2h, 023AAh, 023B3h, 023BBh, 023C3h, 023CBh, 023D4h, 023DCh, 023E4h, 023EDh
4042   1362 8A2392239A23A223AA23B323BB23C323CB23D423DC23E423ED23
4043   137C F523FD230624        .word 023F5h, 023FDh, 02406h, 0240Eh, 02416h, 0241Fh, 02427h, 0242Fh, 02438h, 02440h, 02448h, 02451h, 02459h, 02462h, 0246Ah, 02472h
4043   1382 0E2416241F2427242F243824402448245124592462246A247224
4044   139C 7B2483248C24        .word 0247Bh, 02483h, 0248Ch, 02494h, 0249Dh, 024A5h, 024AEh, 024B6h, 024BEh, 024C7h, 024CFh, 024D8h, 024E0h, 024E9h, 024F2h, 024FAh
4044   13A2 94249D24A524AE24B624BE24C724CF24D824E024E924F224FA24
4045   13BC 03250B251425        .word 02503h, 0250Bh, 02514h, 0251Ch, 02525h, 0252Dh, 02536h, 0253Fh, 02547h, 02550h, 02559h, 02561h, 0256Ah, 02572h, 0257Bh, 02584h
4045   13C2 1C2525252D2536253F2547255025592561256A2572257B258425
4046   13DC 8C2595259E25        .word 0258Ch, 02595h, 0259Eh, 025A7h, 025AFh, 025B8h, 025C1h, 025C9h, 025D2h, 025DBh, 025E4h, 025ECh, 025F5h, 025FEh, 02607h, 0260Fh
4046   13E2 A725AF25B825C125C925D225DB25E425EC25F525FE2507260F26
4047   13FC 182621262A26        .word 02618h, 02621h, 0262Ah, 02633h, 0263Ch, 02644h, 0264Dh, 02656h, 0265Fh, 02668h, 02671h, 0267Ah, 02682h, 0268Bh, 02694h, 0269Dh
4047   1402 33263C2644264D2656265F26682671267A2682268B2694269D26
4048   141C A626AF26B826        .word 026A6h, 026AFh, 026B8h, 026C1h, 026CAh, 026D3h, 026DCh, 026E5h, 026EEh, 026F7h, 02700h, 02709h, 02712h, 0271Bh, 02724h, 0272Dh
4048   1422 C126CA26D326DC26E526EE26F7260027092712271B2724272D27
4049   143C 36273F274827        .word 02736h, 0273Fh, 02748h, 02751h, 0275Ah, 02763h, 0276Dh, 02776h, 0277Fh, 02788h, 02791h, 0279Ah, 027A3h, 027ACh, 027B6h, 027BFh
4049   1442 51275A2763276D2776277F27882791279A27A327AC27B627BF27
4050   145C C827D127DA27        .word 027C8h, 027D1h, 027DAh, 027E4h, 027EDh, 027F6h, 027FFh, 02809h, 02812h, 0281Bh, 02824h, 0282Eh, 02837h, 02840h, 0284Ah, 02853h
4050   1462 E427ED27F627FF27092812281B2824282E28372840284A285328
4051   147C 5C2865286F28        .word 0285Ch, 02865h, 0286Fh, 02878h, 02882h, 0288Bh, 02894h, 0289Eh, 028A7h, 028B0h, 028BAh, 028C3h, 028CDh, 028D6h, 028E0h, 028E9h
4051   1482 782882288B2894289E28A728B028BA28C328CD28D628E028E928
4052   149C F228FC280529        .word 028F2h, 028FCh, 02905h, 0290Fh, 02918h, 02922h, 0292Bh, 02935h, 0293Eh, 02948h, 02951h, 0295Bh, 02965h, 0296Eh, 02978h, 02981h
4052   14A2 0F29182922292B2935293E29482951295B2965296E2978298129
4053   14BC 8B2995299E29        .word 0298Bh, 02995h, 0299Eh, 029A8h, 029B1h, 029BBh, 029C5h, 029CEh, 029D8h, 029E2h, 029EBh, 029F5h, 029FFh, 02A08h, 02A12h, 02A1Ch
4053   14C2 A829B129BB29C529CE29D829E229EB29F529FF29082A122A1C2A
4054   14DC 262A2F2A392A        .word 02A26h, 02A2Fh, 02A39h, 02A43h, 02A4Dh, 02A56h, 02A60h, 02A6Ah, 02A74h, 02A7Eh, 02A87h, 02A91h, 02A9Bh, 02AA5h, 02AAFh, 02AB9h
4054   14E2 432A4D2A562A602A6A2A742A7E2A872A912A9B2AA52AAF2AB92A
4055   14FC C32ACC2AD62A        .word 02AC3h, 02ACCh, 02AD6h, 02AE0h, 02AEAh, 02AF4h, 02AFEh, 02B08h, 02B12h, 02B1Ch, 02B26h, 02B30h, 02B3Ah, 02B44h, 02B4Eh, 02B58h
4055   1502 E02AEA2AF42AFE2A082B122B1C2B262B302B3A2B442B4E2B582B
4056   151C 622B6C2B762B        .word 02B62h, 02B6Ch, 02B76h, 02B80h, 02B8Ah, 02B94h, 02B9Eh, 02BA8h, 02BB2h, 02BBCh, 02BC6h, 02BD1h, 02BDBh, 02BE5h, 02BEFh, 02BF9h
4056   1522 802B8A2B942B9E2BA82BB22BBC2BC62BD12BDB2BE52BEF2BF92B
4057   153C 032C0D2C182C        .word 02C03h, 02C0Dh, 02C18h, 02C22h, 02C2Ch, 02C36h, 02C40h, 02C4Bh, 02C55h, 02C5Fh, 02C69h, 02C74h, 02C7Eh, 02C88h, 02C93h, 02C9Dh
4057   1542 222C2C2C362C402C4B2C552C5F2C692C742C7E2C882C932C9D2C
4058   155C A72CB22CBC2C        .word 02CA7h, 02CB2h, 02CBCh, 02CC6h, 02CD1h, 02CDBh, 02CE5h, 02CF0h, 02CFAh, 02D04h, 02D0Fh, 02D19h, 02D24h, 02D2Eh, 02D39h, 02D43h
4058   1562 C62CD12CDB2CE52CF02CFA2C042D0F2D192D242D2E2D392D432D
4059   157C 4D2D582D622D        .word 02D4Dh, 02D58h, 02D62h, 02D6Dh, 02D77h, 02D82h, 02D8Ch, 02D97h, 02DA1h, 02DACh, 02DB7h, 02DC1h, 02DCCh, 02DD6h, 02DE1h, 02DECh
4059   1582 6D2D772D822D8C2D972DA12DAC2DB72DC12DCC2DD62DE12DEC2D
4060   159C F62D012E0B2E        .word 02DF6h, 02E01h, 02E0Bh, 02E16h, 02E21h, 02E2Bh, 02E36h, 02E41h, 02E4Bh, 02E56h, 02E61h, 02E6Ch, 02E76h, 02E81h, 02E8Ch, 02E97h
4060   15A2 162E212E2B2E362E412E4B2E562E612E6C2E762E812E8C2E972E
4061   15BC A12EAC2EB72E        .word 02EA1h, 02EACh, 02EB7h, 02EC2h, 02ECCh, 02ED7h, 02EE2h, 02EEDh, 02EF8h, 02F03h, 02F0Eh, 02F18h, 02F23h, 02F2Eh, 02F39h, 02F44h
4061   15C2 C22ECC2ED72EE22EED2EF82E032F0E2F182F232F2E2F392F442F
4062   15DC 4F2F5A2F652F        .word 02F4Fh, 02F5Ah, 02F65h, 02F70h, 02F7Bh, 02F86h, 02F91h, 02F9Ch, 02FA7h, 02FB2h, 02FBDh, 02FC8h, 02FD3h, 02FDEh, 02FE9h, 02FF4h
4062   15E2 702F7B2F862F912F9C2FA72FB22FBD2FC82FD32FDE2FE92FF42F
4063   15FC FF2F0A301530        .word 02FFFh, 0300Ah, 03015h, 03020h, 0302Ch, 03037h, 03042h, 0304Dh, 03058h, 03063h, 0306Eh, 0307Ah, 03085h, 03090h, 0309Bh, 030A7h
4063   1602 20302C30373042304D30583063306E307A30853090309B30A730
4064   161C B230BD30C830        .word 030B2h, 030BDh, 030C8h, 030D4h, 030DFh, 030EAh, 030F5h, 03101h, 0310Ch, 03117h, 03123h, 0312Eh, 0313Ah, 03145h, 03150h, 0315Ch
4064   1622 D430DF30EA30F53001310C31173123312E313A31453150315C31
4065   163C 673173317E31        .word 03167h, 03173h, 0317Eh, 03189h, 03195h, 031A0h, 031ACh, 031B7h, 031C3h, 031CEh, 031DAh, 031E5h, 031F1h, 031FCh, 03208h, 03213h
4065   1642 89319531A031AC31B731C331CE31DA31E531F131FC3108321332
4066   165C 1F322B323632        .word 0321Fh, 0322Bh, 03236h, 03242h, 0324Dh, 03259h, 03265h, 03270h, 0327Ch, 03288h, 03293h, 0329Fh, 032ABh, 032B7h, 032C2h, 032CEh
4066   1662 42324D325932653270327C32883293329F32AB32B732C232CE32
4067   167C DA32E532F132        .word 032DAh, 032E5h, 032F1h, 032FDh, 03309h, 03315h, 03320h, 0332Ch, 03338h, 03344h, 03350h, 0335Ch, 03367h, 03373h, 0337Fh, 0338Bh
4067   1682 FD320933153320332C333833443350335C33673373337F338B33
4068   169C 9733A333AF33        .word 03397h, 033A3h, 033AFh, 033BBh, 033C7h, 033D3h, 033DFh, 033EBh, 033F7h, 03403h, 0340Fh, 0341Bh, 03427h, 03433h, 0343Fh, 0344Bh
4068   16A2 BB33C733D333DF33EB33F73303340F341B34273433343F344B34
4069   16BC 573463346F34        .word 03457h, 03463h, 0346Fh, 0347Bh, 03488h, 03494h, 034A0h, 034ACh, 034B8h, 034C4h, 034D1h, 034DDh, 034E9h, 034F5h, 03502h, 0350Eh
4069   16C2 7B3488349434A034AC34B834C434D134DD34E934F53402350E35
4070   16DC 1A3526353335        .word 0351Ah, 03526h, 03533h, 0353Fh, 0354Bh, 03558h, 03564h, 03570h, 0357Dh, 03589h, 03595h, 035A2h, 035AEh, 035BAh, 035C7h, 035D3h
4070   16E2 3F354B355835643570357D3589359535A235AE35BA35C735D335
4071   16FC E035EC35F935        .word 035E0h, 035ECh, 035F9h, 03605h, 03612h, 0361Eh, 0362Bh, 03637h, 03644h, 03650h, 0365Dh, 03669h, 03676h, 03683h, 0368Fh, 0369Ch
4071   1702 053612361E362B363736443650365D366936763683368F369C36
4072   171C A836B536C236        .word 036A8h, 036B5h, 036C2h, 036CEh, 036DBh, 036E8h, 036F4h, 03701h, 0370Eh, 0371Bh, 03727h, 03734h, 03741h, 0374Eh, 0375Ah, 03767h
4072   1722 CE36DB36E836F43601370E371B372737343741374E375A376737
4073   173C 743781378E37        .word 03774h, 03781h, 0378Eh, 0379Ah, 037A7h, 037B4h, 037C1h, 037CEh, 037DBh, 037E8h, 037F5h, 03802h, 0380Eh, 0381Bh, 03828h, 03835h
4073   1742 9A37A737B437C137CE37DB37E837F53702380E381B3828383538
4074   175C 42384F385C38        .word 03842h, 0384Fh, 0385Ch, 03869h, 03876h, 03884h, 03891h, 0389Eh, 038ABh, 038B8h, 038C5h, 038D2h, 038DFh, 038ECh, 038FAh, 03907h
4074   1762 69387638843891389E38AB38B838C538D238DF38EC38FA380739
4075   177C 143921392E39        .word 03914h, 03921h, 0392Eh, 0393Bh, 03949h, 03956h, 03963h, 03970h, 0397Eh, 0398Bh, 03998h, 039A6h, 039B3h, 039C0h, 039CEh, 039DBh
4075   1782 3B3949395639633970397E398B399839A639B339C039CE39DB39
4076   179C E839F639033A        .word 039E8h, 039F6h, 03A03h, 03A11h, 03A1Eh, 03A2Bh, 03A39h, 03A46h, 03A54h, 03A61h, 03A6Fh, 03A7Ch, 03A8Ah, 03A97h, 03AA5h, 03AB2h
4076   17A2 113A1E3A2B3A393A463A543A613A6F3A7C3A8A3A973AA53AB23A
4077   17BC C03ACE3ADB3A        .word 03AC0h, 03ACEh, 03ADBh, 03AE9h, 03AF6h, 03B04h, 03B12h, 03B1Fh, 03B2Dh, 03B3Bh, 03B48h, 03B56h, 03B64h, 03B72h, 03B7Fh, 03B8Dh
4077   17C2 E93AF63A043B123B1F3B2D3B3B3B483B563B643B723B7F3B8D3B
4078   17DC 9B3BA93BB63B        .word 03B9Bh, 03BA9h, 03BB6h, 03BC4h, 03BD2h, 03BE0h, 03BEEh, 03BFCh, 03C09h, 03C17h, 03C25h, 03C33h, 03C41h, 03C4Fh, 03C5Dh, 03C6Bh
4078   17E2 C43BD23BE03BEE3BFC3B093C173C253C333C413C4F3C5D3C6B3C
4079   17FC 793C873C953C        .word 03C79h, 03C87h, 03C95h, 03CA3h, 03CB1h, 03CBFh, 03CCDh, 03CDBh, 03CE9h, 03CF7h, 03D05h, 03D13h, 03D21h, 03D2Fh, 03D3Eh, 03D4Ch
4079   1802 A33CB13CBF3CCD3CDB3CE93CF73C053D133D213D2F3D3E3D4C3D
4080   181C 5A3D683D763D        .word 03D5Ah, 03D68h, 03D76h, 03D85h, 03D93h, 03DA1h, 03DAFh, 03DBDh, 03DCCh, 03DDAh, 03DE8h, 03DF7h, 03E05h, 03E13h, 03E22h, 03E30h
4080   1822 853D933DA13DAF3DBD3DCC3DDA3DE83DF73D053E133E223E303E
4081   183C 3E3E4D3E5B3E        .word 03E3Eh, 03E4Dh, 03E5Bh, 03E6Ah, 03E78h, 03E86h, 03E95h, 03EA3h, 03EB2h, 03EC0h, 03ECFh, 03EDDh, 03EECh, 03EFAh, 03F09h, 03F18h
4081   1842 6A3E783E863E953EA33EB23EC03ECF3EDD3EEC3EFA3E093F183F
4082   185C 263F353F433F        .word 03F26h, 03F35h, 03F43h, 03F52h, 03F61h, 03F6Fh, 03F7Eh, 03F8Dh, 03F9Bh, 03FAAh, 03FB9h, 03FC7h, 03FD6h, 03FE5h, 03FF4h, 04002h
4082   1862 523F613F6F3F7E3F8D3F9B3FAA3FB93FC73FD63FE53FF43F0240
4083   187C 114020402F40        .word 04011h, 04020h, 0402Fh, 0403Eh, 0404Dh, 0405Bh, 0406Ah, 04079h, 04088h, 04097h, 040A6h, 040B5h, 040C4h, 040D3h, 040E2h, 040F1h
4083   1882 3E404D405B406A40794088409740A640B540C440D340E240F140
4084   189C 00410F411E41        .word 04100h, 0410Fh, 0411Eh, 0412Dh, 0413Ch, 0414Bh, 0415Ah, 04169h, 04178h, 04188h, 04197h, 041A6h, 041B5h, 041C4h, 041D3h, 041E3h
4084   18A2 2D413C414B415A416941784188419741A641B541C441D341E341
4085   18BC F24101421042        .word 041F2h, 04201h, 04210h, 04220h, 0422Fh, 0423Eh, 0424Eh, 0425Dh, 0426Ch, 0427Ch, 0428Bh, 0429Ah, 042AAh, 042B9h, 042C9h, 042D8h
4085   18C2 20422F423E424E425D426C427C428B429A42AA42B942C942D842
4086   18DC             ;-----------------------------------------------------------------------------
4087   18DC             
4088   18DC             
4089   18DC             ;-----------------------------------------------------------------------------
4090   18DC             ;BITS:	.byte   1,  2,  4,  8, 16, 32, 64,128
4091   18DC             ;-----------------------------------------------------------------------------
4092   18DC             
4093   18DC             
4094   18DC             ;-----------------------------------------------------------------------------
4095   18DC             ;CBITS:	.byte	15, 31, 47, 63, 79, 95,111,127
4096   18DC             ;-----------------------------------------------------------------------------
4097   18DC             
4098   18DC             
4099   18DC             ;-----------------------------------------------------------------------------
4100   18DC             LUT_DIV3:
4101   18DC             ;-----------------------------------------------------------------------------
4102   18DC 000000010101	.byte 0, 0, 0, 1, 1, 1, 2, 2, 2
4102   18E2 020202
4103   18E5 030303040404	.byte 3, 3, 3, 4, 4, 4, 5, 5, 5
4103   18EB 050505
4104   18EE 060606070707	.byte 6, 6, 6, 7, 7, 7, 8, 8, 8
4104   18F4 080808
4105   18F7 0909090A0A  	.byte 9, 9, 9,10,10
4106   18FC             ;-----------------------------------------------------------------------------
4107   18FC             
4108   18FC             
4109   18FC             ;-----------------------------------------------------------------------------
4110   18FC             WAVETABLE_L:
4111   18FC             ;-----------------------------------------------------------------------------
4112   18FC 04 28       	.byte	LBYTE(WT_SAMPLE1), LBYTE(WT_SAMPLE2)
4113   18FE 4C 70       	.byte	LBYTE(WT_SAMPLE3), LBYTE(WT_SAMPLE4)
4114   1900 94 B8       	.byte	LBYTE(WT_SAMPLE5), LBYTE(WT_SAMPLE6)
4115   1902 DC 00       	.byte	LBYTE(WT_SAMPLE7), LBYTE(WT_SAMPLE8)
4116   1904             ;-----------------------------------------------------------------------------
4117   1904             
4118   1904             	;.byte	0,0,0,0,0,0
4119   1904             
4120   1904             ;-----------------------------------------------------------------------------
4121   1904             ; C64 waveform: $41	[33488 Hz]			; should start at xx04h
4122   1904             ;  pulse width: $81-$88
4123   1904             ;-----------------------------------------------------------------------------
4124   1904             WT_SAMPLE1:
4125   1904             ;-----------------------------------------------------------------------------
4126   1904 A0000FDDDEEE	.byte	$a0,$00,$0f,$dd,$de,$ee,$f1,$46,$66
4126   190A F14666
4127   190D 7C82413F1010	.byte	$7c,$82,$41,$3f,$10,$10,$00,$2f,$66
4127   1913 002F66
4128   1916 9800F0DB1431	.byte	$98,$00,$f0,$db,$14,$31,$0f,$ff,$00
4128   191C 0FFF00
4129   191F 7F1F1F0FF000	.byte	$7f,$1f,$1f,$0f,$f0,$00,$f0,$f4,$50
4129   1925 F0F450
4130   1928             ;-----------------------------------------------------------------------------
4131   1928             WT_SAMPLE2:
4132   1928             ;-----------------------------------------------------------------------------
4133   1928 A0000FDDDEEE	.byte	$a0,$00,$0f,$dd,$de,$ee,$f1,$45,$65
4133   192E F14565
4134   1931 6C4063401F3F	.byte	$6c,$40,$63,$40,$1f,$3f,$13,$f0,$21
4134   1937 13F021
4135   193A 8824F0E1A8E7	.byte	$88,$24,$f0,$e1,$a8,$e7,$75,$fd,$ee
4135   1940 75FDEE
4136   1943 7F0F101E0F00	.byte	$7f,$0f,$10,$1e,$0f,$00,$f0,$f4,$60
4136   1949 F0F460
4137   194C             ;-----------------------------------------------------------------------------
4138   194C             WT_SAMPLE3:
4139   194C             ;-----------------------------------------------------------------------------
4140   194C A0000FDCDDEE	.byte	$a0,$00,$0f,$dc,$dd,$ee,$e1,$35,$55
4140   1952 E13555
4141   1955 74AE02322221	.byte	$74,$ae,$02,$32,$22,$21,$22,$21,$21
4141   195B 222121
4142   195E 8C0114F0E198	.byte	$8c,$01,$14,$f0,$e1,$98,$b5,$74,$1e
4142   1964 B5741E
4143   1967 7BCBF1F1FEF0	.byte	$7b,$cb,$f1,$f1,$fe,$f0,$e0,$f3,$6f
4143   196D E0F36F
4144   1970             ;-----------------------------------------------------------------------------
4145   1970             WT_SAMPLE4:
4146   1970             ;-----------------------------------------------------------------------------
4147   1970 A0000FDCCDEE	.byte	$a0,$00,$0f,$dc,$cd,$ee,$e1,$34,$44
4147   1976 E13444
4148   1979 64CD03554243	.byte	$64,$cd,$03,$55,$42,$43,$24,$42,$43
4148   197F 244243
4149   1982 8C0001130FF0	.byte	$8c,$00,$01,$13,$0f,$f0,$b8,$87,$74
4149   1988 B88774
4150   198B 7F1DCCF0010E	.byte	$7f,$1d,$cc,$f0,$01,$0e,$00,$e6,$61
4150   1991 00E661
4151   1994             ;-----------------------------------------------------------------------------
4152   1994             WT_SAMPLE5:
4153   1994             ;-----------------------------------------------------------------------------
4154   1994 90000D988ABB	.byte	$90,$00,$0d,$98,$8a,$bb,$c1,$57,$77
4154   199A C15777
4155   199D 5C8C77411F30	.byte	$5c,$8c,$77,$41,$1f,$30,$c7,$42,$00
4155   19A3 C74200
4156   19A6 881F11F12200	.byte	$88,$1f,$11,$f1,$22,$00,$e1,$c9,$87
4156   19AC E1C987
4157   19AF 870452FEDEFF	.byte	$87,$04,$52,$fe,$de,$ff,$ff,$f1,$55
4157   19B5 FFF155
4158   19B8             ;-----------------------------------------------------------------------------
4159   19B8             WT_SAMPLE6:
4160   19B8             ;-----------------------------------------------------------------------------
4161   19B8 90000D8889BB	.byte	$90,$00,$0d,$88,$89,$bb,$c1,$57,$77
4161   19BE C15777
4162   19C1 649D12443232	.byte	$64,$9d,$12,$44,$32,$32,$22,$12,$44
4162   19C7 221244
4163   19CA 880010001022	.byte	$88,$00,$10,$00,$10,$22,$f0,$0f,$da
4163   19D0 F00FDA
4164   19D3 9FA35200EF00	.byte	$9f,$a3,$52,$00,$ef,$00,$00,$01,$20
4164   19D9 000120
4165   19DC             ;-----------------------------------------------------------------------------
4166   19DC             WT_SAMPLE7:
4167   19DC             ;-----------------------------------------------------------------------------
4168   19DC A0000ECBCCDD	.byte	$a0,$00,$0e,$cb,$cc,$dd,$e1,$23,$33
4168   19E2 E12333
4169   19E5 548B14776364	.byte	$54,$8b,$14,$77,$63,$64,$33,$44,$34
4169   19EB 334434
4170   19EE 683011111111	.byte	$68,$30,$11,$11,$11,$11,$76,$0e,$e0
4170   19F4 760EE0
4171   19F7 9BEE95520FD0	.byte	$9b,$ee,$95,$52,$0f,$d0,$f0,$01,$3f
4171   19FD F0013F
4172   1A00             ;-----------------------------------------------------------------------------
4173   1A00             WT_SAMPLE8:
4174   1A00             ;-----------------------------------------------------------------------------
4175   1A00 A0000ECBBCDD	.byte	$a0,$00,$0e,$cb,$bc,$dd,$e1,$23,$33
4175   1A06 E12333
4176   1A09 648E02333132	.byte	$64,$8e,$02,$33,$31,$32,$12,$12,$6f
4176   1A0F 12126F
4177   1A12 683221101111	.byte	$68,$32,$21,$10,$11,$11,$11,$66,$ff
4177   1A18 1166FF
4178   1A1B 9B00EE85620E	.byte	$9b,$00,$ee,$85,$62,$0e,$ef,$01,$21
4178   1A21 EF0121
4179   1A24             ;-----------------------------------------------------------------------------
4180   1A24             
4181   1A24             
4182   1A24             ;-----------------------------------------------------------------------------
4183   1A24             ;WAVETABLE_L:
4184   1A24             ;-----------------------------------------------------------------------------
4185   1A24             	;.byte	LBYTE(WT_SAMPLE1), LBYTE(WT_SAMPLE2)
4186   1A24             	;.byte	LBYTE(WT_SAMPLE3), LBYTE(WT_SAMPLE4)
4187   1A24             	;.byte	LBYTE(WT_SAMPLE5), LBYTE(WT_SAMPLE6)
4188   1A24             	;.byte	LBYTE(WT_SAMPLE7), LBYTE(WT_SAMPLE8)
4189   1A24             ;-----------------------------------------------------------------------------
4190   1A24             
4191   1A24             
4192   1A24             ;-----------------------------------------------------------------------------
4193   1A24 010204081020BITS:	.byte	1,  2,  4,  8, 16, 32, 64,128
4193   1A2A 4080
4194   1A2C             ;-----------------------------------------------------------------------------
4195   1A2C             
4196   1A2C             
4197   1A2C             ;-----------------------------------------------------------------------------
4198   1A2C 0F1F2F3F4F5FCBITS:	.byte  DSP_C0,DSP_C1,DSP_C2,DSP_C3,DSP_C4,DSP_C5,DSP_C6,DSP_C7
4198   1A32 6F7F
4199   1A34             ;-----------------------------------------------------------------------------
4200   1A34             
4201   1A34             
4202   1A34             ;-----------------------------------------------------------------------------
4203   1A34             FM_WAVEFORM:
4204   1A34             ;-----------------------------------------------------------------------------
4205   1A34             	;.byte	$b0,$00,$00,$00,$00,$00,$00,$00,$00
4206   1A34             	;.byte	$74,$00,$00,$00,$00,$00,$00,$00,$00
4207   1A34             	;.byte	$b0,$00,$00,$00,$00,$00,$00,$00,$00
4208   1A34             	;.byte	$b7,$00,$00,$00,$00,$00,$00,$00,$00
4209   1A34             
4210   1A34 B00234564C17	.byte	$b0,$02,$34,$56,$4c,$17,$56,$55,$42
4210   1A3A 565542
4211   1A3D 74DF16311E0F	.byte	$74,$df,$16,$31,$1e,$0f,$00,$01,$f0
4211   1A43 0001F0
4212   1A46 B0FFF00539B4	.byte	$b0,$ff,$f0,$05,$39,$b4,$2f,$30,$10
4212   1A4C 2F3010
4213   1A4F B7BECCDFF302	.byte	$b7,$be,$cc,$df,$f3,$02,$f0,$02,$32
4213   1A55 F00232
4214   1A58             
4215   1A58             
4216   1A58             ;-----------------------------------------------------------------------------
4217   1A58             FM_WAVEFORM_END:
4218   1A58             ;-----------------------------------------------------------------------------
4219   1A58             
4220   1A58             
4221   1A58             ;-----------------------------------------------------------------------------
4222   1A58             IT_FINE_SINE_DATA:
4223   1A58             ;-----------------------------------------------------------------------------
4224   1A58 000203050608	.byte   0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23
4224   1A5E 090B0C0E101113141617
4225   1A68 181A1B1D1E20	.byte  24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44
4225   1A6E 212224252627292A2B2C
4226   1A78 2D2E2F303132	.byte  45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59
4226   1A7E 33343536373838393A3B
4227   1A88 3B3C3C3D3D3E	.byte  59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64
4227   1A8E 3E3E3F3F3F4040404040
4228   1A98 404040404040	.byte  64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60
4228   1A9E 3F3F3F3E3E3E3D3D3C3C
4229   1AA8 3B3B3A393838	.byte  59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46
4229   1AAE 37363534333231302F2E
4230   1AB8 2D2C2B2A2927	.byte  45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26
4230   1ABE 2625242221201E1D1B1A
4231   1AC8 181716141311	.byte  24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2
4231   1ACE 100E0C0B090806050302
4232   1AD8             ;-----------------------------------------------------------------------------
4233   1AD8             
4234   1AD8             
4235   1AD8             ;-----------------------------------------------------------------------------
4236   1AD8             ;LUT_DIV3:
4237   1AD8             ;-----------------------------------------------------------------------------
4238   1AD8             	;.byte 0, 0, 0, 1, 1, 1, 2, 2, 2
4239   1AD8             	;.byte 3, 3, 3, 4, 4, 4, 5, 5, 5
4240   1AD8             	;.byte 6, 6, 6, 7, 7, 7, 8, 8, 8
4241   1AD8             	;.byte 9, 9, 9,10,10
4242   1AD8             ;-----------------------------------------------------------------------------
4243   1AD8             
4244   1AD8             
4245   1AD8             ;*******************************************************************
4246   1AD8             CMD_RES:	; 13 bytes
4247   1AD8             ;*******************************************************************
4248   1AD8 8F 6C F2    	mov	SPC_DSPA, #DSP_FLG
4249   1ADB 8F E0 F3    	mov	SPC_DSPD, #11100000b
4250   1ADE 20          	clrp
4251   1ADF 8F 80 F1    	mov	SPC_CONTROL, #10000000b ;
4252   1AE2 5F C0 FF    	jmp	0FFC0h
4253   1AE5             
4254   1AE5             ;-----------------------------------------------------------------------
4255   1AE5             SCommand_Drop:						; s7x
4256   1AE5             ;-----------------------------------------------------------------------
4257   1AE5 68 0E       	cmp	a, #0eh
4258   1AE7 F0 0A       	beq	_enable_drop
4259   1AE9 38 FB E0    	and	mod_mode, #~MO_DROP
4260   1AEC 8F 00 BA    	mov	drop, #0
4261   1AEF 8F 00 BB    	mov	drop+1, #0
4262   1AF2 6F          	ret
4263   1AF3             
4264   1AF3             _enable_drop:
4265   1AF3 18 04 E0    	or	mod_mode, #MO_DROP
4266   1AF6 6F          	ret
4267   1AF7             
4268   1AF7             
4269   1AF7             ;*****************************************************************************
4270   1AF7             __BRK_ROUTINE__:
4271   1AF7 0B F4       	asl	SPC_PORT0
4272   1AF9             	;bcs	_brk_pass
4273   1AF9             	;ret
4274   1AF9             _brk_pass:
4275   1AF9             	;jmp	somewhere
4276   1AF9 6F          	ret
4277   1AFA             ;*****************************************************************************
4278   1AFA             
4279   1AFA             
4280   1AFA             ;-----------------------------------------------------------------------------
4281   1AFA             MODULE .END
4282   1AFA             ;-----------------------------------------------------------------------------
4283   1AFA             
4284   1AFA             
4285   1AFA             ;-----------------------------------------------------------------------------
4286   1AFA             ;FFC0 - FFFF    Memory (read / write)
4287   1AFA             ;FFC0 - FFFF    Memory (write only)*
4288   1AFA             ;FFC0 - FFFF    64 byte IPL ROM (read only)*
4289   1AFA             ;-----------------------------------------------------------------------------
4290   1AFA             
tasm: Number of errors = 0
