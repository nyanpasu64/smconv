;-------------------------------------------------------------------------;
; decompression routines
; by mukunda
;-------------------------------------------------------------------------;
.include "snes.inc"
.include "snes_decompress.inc"
;-------------------------------------------------------------------------;
.importzp memptr, m0, m4, m5, m6
;-------------------------------------------------------------------------;


.ifdef HIROM

	;/////////////////////////////////////////////////////////////////;
	.segment "XCODE"
	;/////////////////////////////////////////////////////////////////;

.else

	;/////////////////////////////////////////////////////////////////;
	.code
	;/////////////////////////////////////////////////////////////////;

.endif


.a8
.i16


;=========================================================================;
.macro copy_vbyte
;=========================================================================;
.scope
	rep	#21h			; a = m0 - y
	tya
	iny
	lsr
	sta	REG_VMADDL		; set vram address
	lda	m0
	inc	m0
	bcs	@readH			;
@readL:
	lsr
	tax
	sep	#20h			;
	lda	REG_VMDATALREAD		;
	stx	REG_VMADDL
	bcs	@writeH
@writeL:
	sta	REG_VMDATAL
	dex
	;bne	0
	bra	@copyexit

@readH:
:	lsr
	tax
	sep	#20h			;
	lda	REG_VMDATAHREAD		;
:
@copyexit:
.endscope
.endmacro
	
;=========================================================================;
.macro store_vbyte
;=========================================================================;
	bcs	:+			; write A to vram (carry = H/L)
	sta	REG_VMDATAL		;
	bra	:++			;
:	sta	REG_VMDATAH		;
:					;
.endmacro				;

;=========================================================================;
.macro prep_store
;=========================================================================;
	rep	#20h			; setup vram address (to target)
					;
	lda	m0			;
	inc	m0			;
	lsr				;
	sta	REG_VMADDL		;
					;
	sep	#20h			;
.endmacro


;*************************************************************************;
; A = source bank
; X = source address
; Y = vram address
;*************************************************************************;
count = m4
cflags = m5
bit_counter = m6
;*************************************************************************;
DecompressDataVram:
;*************************************************************************;
	sta	memptr+2		; memptr+2 = source bank
	stx	memptr			; memptr   = source address
					;
	ldx	m0			; preserve m0,m4,m5,m6
	phx				;
	ldx	m4			;
	phx				;
	ldx	m5			;
	phx				;
	ldx	m6			;
	phx				;
					;---------------------------------;
	sty	m0			; m0 = vram target
					;---------------------------------;
	;lda	#%00000000		; setup VRAM access (increment on
	stz	REG_VMAIN		; read low)
					;---------------------------------;
	ldy	#0000h			; y = 0 (source index)
					;---------------------------------;
	lda	[memptr]		; test compression type
	and	#0f0h			;
	cmp	#10h			; 1x = LZ77	
	beq	LZ77source		;
;-------------------------------------------------------------------------;	
ddv_exit:
;-------------------------------------------------------------------------;
	plx
	stx	m6
	plx
	stx	m5
	plx
	stx	m4
	plx
	stx	m0
	rtl
;-------------------------------------------------------------------------;
LZ77source:
;-------------------------------------------------------------------------;
	iny				; x = byte 1,2 (data length)

	rep	#20h			;
					;
	lda	[memptr], y		;
	tax				;
					;
	sep	#20h			;
	
	iny
	iny
	iny
;------------------------------------------------------------------------;
LZ77_DecompressLoop:
;------------------------------------------------------------------------;
	lda	[memptr], y
	sta	cflags
	iny

	lda	#8
	sta	bit_counter
;-------------------------------------------------------------------------;
next_bit:
;---------------------------------------;---------------------------------;
	asl	cflags			; test bit
	bcs	lz_byte			;
;---------------------------------------;
raw_byte:
;---------------------------------------;
	prep_store
	lda	[memptr], y		; copy one byte
	store_vbyte
	iny
	dex
	beq	ddv_exit; next_block
;-------------------------------------------------------------------------;
	dec	bit_counter
	bne	next_bit
	bra	LZ77_DecompressLoop
;-------------------------------------------------------------------------;
lz_byte:
;---------------------------------------;---------------------------------;
	rep	#20h			; read 2 bytes
					;
	lda	[memptr], y		;
	iny				;
	iny				;---------------------------------;
	phy				; preserve y
					;---------------------------------;
	sep	#20h			; y = target - disp - 1
					;
	pha				;	
	and	#0fh			;
	xba				;
					;
	rep	#20h			;
					;
	sec				;
	sbc	m0			;
	eor	#0ffffh			;
	tay				;---------------------------------;
					;
	sep	#20h			; a = count (top 4 bits + 3)
					;
	pla				;
	lsr				;
	lsr				;
	lsr				;
	lsr				;
	clc				;
	adc	#3			;---------------------------------;
	sta	count			; count (16bit)
	stz	count+1			;---------------------------------;
					;
	rep	#20h			; count > x ? x : count
					;
	cpx	count			;
	bcs	:+			;
;---------------------------------------;
	stx	count			;
	sec				;
;---------------------------------------;---------------------------------;
:	txa				; push "x - count"
	sbc	count			;
	pha				; 
					;
	sep	#20h			;
;---------------------------------------;---------------------------------;
copyloop:
;---------------------------------------;---------------------------------;
	rep	#21h			; copy ONE byte..........
					;
	tya				;
	iny				;
	lsr				;
	sta	REG_VMADDL		;
	lda	m0			;
	inc	m0			;
	bcs	copy_readH		;
;---------------------------------------;---------------------------------;
copy_readL:
;---------------------------------------;---------------------------------;
	lsr				;
	tax				;
					;
	sep	#20h			;
					;
	lda	REG_VMDATALREAD		;
	stx	REG_VMADDL		;
	bcs	copy_writeH		;
;---------------------------------------;---------------------------------;
copy_writeL:
;---------------------------------------;---------------------------------;
	sta	REG_VMDATAL		;
	dec	count			;
	bne	copyloop		;
	bra	copyexit		;
;---------------------------------------;---------------------------------;
copy_readH:
;---------------------------------------;---------------------------------;
	lsr				;
	tax				;
					;
	sep	#20h			;
					;
	lda	REG_VMDATAHREAD		;
	stx	REG_VMADDL		;
	bcc	copy_writeL		;
;---------------------------------------;---------------------------------;
copy_writeH:
;---------------------------------------;---------------------------------;
	sta	REG_VMDATAH		;
	dec	count
	bne	copyloop
;-------------------------------------------------------------------------;
copyexit:
;-------------------------------------------------------------------------;
	plx
	ply
	cpx	#0
;-------------------------------------------------------------------------;
next_block:
;-------------------------------------------------------------------------;
	bne	:+
;---------------------------------------;---------------------------------;
	jmp	ddv_exit		; exit on end of data
;---------------------------------------;---------------------------------;
:	dec	bit_counter
	beq	:+
;-------------------------------------------------------------------------;
	jmp	next_bit
;-------------------------------------------------------------------------;
:	jmp	LZ77_DecompressLoop


;*************************************************************************;
; Copy data from memory/rom to cgram
;
; A = source bank
; B = palette index
; Y = source address
; X = number of colours
;*************************************************************************;
CopyPalette:
;*************************************************************************;
	sta	memptr+2	; set bank#
	sty	memptr+0	; set source addr
	xba			;
	sta	REG_CGADD	; set cg address
				;	
	ldy	#0000h		;
;-------------------------------;-----------------------------------------;
:	lda	[memptr], y	; copy x colours
	iny			;
	sta	REG_CGDATA	;
	lda	[memptr], y	;
	iny			;
	sta	REG_CGDATA	;
				;
	dex			;
	bne	:-		;
;-------------------------------------------------------------------------;
	rtl
